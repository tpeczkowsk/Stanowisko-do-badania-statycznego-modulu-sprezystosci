
inzynierka_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c83c  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800cae8  0800cae8  0001cae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cb38  0800cb38  0001cb38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cb40  0800cb40  0001cb40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cb44  0800cb44  0001cb44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800cb48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000494  24000010  0800cb58  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240004a4  0800cb58  000204a4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ea7a  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003633  00000000  00000000  0003eab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001600  00000000  00000000  000420f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001498  00000000  00000000  000436f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034138  00000000  00000000  00044b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f5b7  00000000  00000000  00078cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00154311  00000000  00000000  00098277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ec588  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d20  00000000  00000000  001ec5d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800cad0 	.word	0x0800cad0

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800cad0 	.word	0x0800cad0

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
 8000610:	615a      	str	r2, [r3, #20]
 8000612:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000614:	4b30      	ldr	r3, [pc, #192]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000616:	4a31      	ldr	r2, [pc, #196]	; (80006dc <MX_ADC1_Init+0xec>)
 8000618:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800061a:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000620:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000626:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062c:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <MX_ADC1_Init+0xe8>)
 800062e:	2204      	movs	r2, #4
 8000630:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000632:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <MX_ADC1_Init+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800063e:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000640:	2201      	movs	r2, #1
 8000642:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000644:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000646:	2200      	movs	r2, #0
 8000648:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <MX_ADC1_Init+0xe8>)
 800064c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000652:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000658:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_ADC1_Init+0xe8>)
 800065c:	2203      	movs	r2, #3
 800065e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800066c:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_ADC1_Init+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	4818      	ldr	r0, [pc, #96]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000676:	f001 fa39 	bl	8001aec <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000680:	f000 fb2c 	bl	8000cdc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	4619      	mov	r1, r3
 800068e:	4812      	ldr	r0, [pc, #72]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000690:	f001 ff60 	bl	8002554 <HAL_ADCEx_MultiModeConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800069a:	f000 fb1f 	bl	8000cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_ADC1_Init+0xf0>)
 80006a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a2:	2306      	movs	r3, #6
 80006a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80006a6:	2307      	movs	r3, #7
 80006a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006aa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006ae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b0:	2304      	movs	r3, #4
 80006b2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_ADC1_Init+0xe8>)
 80006c2:	f001 fb6d 	bl	8001da0 <HAL_ADC_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006cc:	f000 fb06 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	3728      	adds	r7, #40	; 0x28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2400002c 	.word	0x2400002c
 80006dc:	40022000 	.word	0x40022000
 80006e0:	3ef08000 	.word	0x3ef08000

080006e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b0ba      	sub	sp, #232	; 0xe8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	22c0      	movs	r2, #192	; 0xc0
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f00c f9db 	bl	800cac0 <memset>
  if(adcHandle->Instance==ADC1)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a43      	ldr	r2, [pc, #268]	; (800081c <HAL_ADC_MspInit+0x138>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d17e      	bne.n	8000812 <HAL_ADC_MspInit+0x12e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000714:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000718:	f04f 0300 	mov.w	r3, #0
 800071c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000720:	2301      	movs	r3, #1
 8000722:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000724:	2310      	movs	r3, #16
 8000726:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 8000728:	2303      	movs	r3, #3
 800072a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800072c:	2302      	movs	r3, #2
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000734:	23c0      	movs	r3, #192	; 0xc0
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000738:	2300      	movs	r3, #0
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000740:	2300      	movs	r3, #0
 8000742:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000746:	f107 0310 	add.w	r3, r7, #16
 800074a:	4618      	mov	r0, r3
 800074c:	f006 f970 	bl	8006a30 <HAL_RCCEx_PeriphCLKConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000756:	f000 fac1 	bl	8000cdc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800075a:	4b31      	ldr	r3, [pc, #196]	; (8000820 <HAL_ADC_MspInit+0x13c>)
 800075c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000760:	4a2f      	ldr	r2, [pc, #188]	; (8000820 <HAL_ADC_MspInit+0x13c>)
 8000762:	f043 0320 	orr.w	r3, r3, #32
 8000766:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800076a:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <HAL_ADC_MspInit+0x13c>)
 800076c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000770:	f003 0320 	and.w	r3, r3, #32
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	4b29      	ldr	r3, [pc, #164]	; (8000820 <HAL_ADC_MspInit+0x13c>)
 800077a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800077e:	4a28      	ldr	r2, [pc, #160]	; (8000820 <HAL_ADC_MspInit+0x13c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000788:	4b25      	ldr	r3, [pc, #148]	; (8000820 <HAL_ADC_MspInit+0x13c>)
 800078a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000796:	2308      	movs	r3, #8
 8000798:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800079c:	2303      	movs	r3, #3
 800079e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80007ac:	4619      	mov	r1, r3
 80007ae:	481d      	ldr	r0, [pc, #116]	; (8000824 <HAL_ADC_MspInit+0x140>)
 80007b0:	f004 ff5c 	bl	800566c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007b6:	4a1d      	ldr	r2, [pc, #116]	; (800082c <HAL_ADC_MspInit+0x148>)
 80007b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007bc:	2209      	movs	r2, #9
 80007be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007f6:	480c      	ldr	r0, [pc, #48]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007f8:	f002 f858 	bl	80028ac <HAL_DMA_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <HAL_ADC_MspInit+0x122>
    {
      Error_Handler();
 8000802:	f000 fa6b 	bl	8000cdc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_ADC_MspInit+0x144>)
 800080a:	64da      	str	r2, [r3, #76]	; 0x4c
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <HAL_ADC_MspInit+0x144>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000812:	bf00      	nop
 8000814:	37e8      	adds	r7, #232	; 0xe8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40022000 	.word	0x40022000
 8000820:	58024400 	.word	0x58024400
 8000824:	58020000 	.word	0x58020000
 8000828:	24000090 	.word	0x24000090
 800082c:	40020010 	.word	0x40020010

08000830 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000836:	4b19      	ldr	r3, [pc, #100]	; (800089c <MX_DMA_Init+0x6c>)
 8000838:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800083c:	4a17      	ldr	r2, [pc, #92]	; (800089c <MX_DMA_Init+0x6c>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_DMA_Init+0x6c>)
 8000848:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2100      	movs	r1, #0
 8000858:	200b      	movs	r0, #11
 800085a:	f001 fff2 	bl	8002842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800085e:	200b      	movs	r0, #11
 8000860:	f002 f809 	bl	8002876 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	2100      	movs	r1, #0
 8000868:	200c      	movs	r0, #12
 800086a:	f001 ffea 	bl	8002842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800086e:	200c      	movs	r0, #12
 8000870:	f002 f801 	bl	8002876 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	2100      	movs	r1, #0
 8000878:	200d      	movs	r0, #13
 800087a:	f001 ffe2 	bl	8002842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800087e:	200d      	movs	r0, #13
 8000880:	f001 fff9 	bl	8002876 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	2066      	movs	r0, #102	; 0x66
 800088a:	f001 ffda 	bl	8002842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 800088e:	2066      	movs	r0, #102	; 0x66
 8000890:	f001 fff1 	bl	8002876 <HAL_NVIC_EnableIRQ>

}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	58024400 	.word	0x58024400

080008a0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08e      	sub	sp, #56	; 0x38
 80008a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4b99      	ldr	r3, [pc, #612]	; (8000b1c <MX_GPIO_Init+0x27c>)
 80008b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008bc:	4a97      	ldr	r2, [pc, #604]	; (8000b1c <MX_GPIO_Init+0x27c>)
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008c6:	4b95      	ldr	r3, [pc, #596]	; (8000b1c <MX_GPIO_Init+0x27c>)
 80008c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	623b      	str	r3, [r7, #32]
 80008d2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008d4:	4b91      	ldr	r3, [pc, #580]	; (8000b1c <MX_GPIO_Init+0x27c>)
 80008d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008da:	4a90      	ldr	r2, [pc, #576]	; (8000b1c <MX_GPIO_Init+0x27c>)
 80008dc:	f043 0320 	orr.w	r3, r3, #32
 80008e0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008e4:	4b8d      	ldr	r3, [pc, #564]	; (8000b1c <MX_GPIO_Init+0x27c>)
 80008e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ea:	f003 0320 	and.w	r3, r3, #32
 80008ee:	61fb      	str	r3, [r7, #28]
 80008f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f2:	4b8a      	ldr	r3, [pc, #552]	; (8000b1c <MX_GPIO_Init+0x27c>)
 80008f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f8:	4a88      	ldr	r2, [pc, #544]	; (8000b1c <MX_GPIO_Init+0x27c>)
 80008fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000902:	4b86      	ldr	r3, [pc, #536]	; (8000b1c <MX_GPIO_Init+0x27c>)
 8000904:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090c:	61bb      	str	r3, [r7, #24]
 800090e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b82      	ldr	r3, [pc, #520]	; (8000b1c <MX_GPIO_Init+0x27c>)
 8000912:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000916:	4a81      	ldr	r2, [pc, #516]	; (8000b1c <MX_GPIO_Init+0x27c>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000920:	4b7e      	ldr	r3, [pc, #504]	; (8000b1c <MX_GPIO_Init+0x27c>)
 8000922:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b7b      	ldr	r3, [pc, #492]	; (8000b1c <MX_GPIO_Init+0x27c>)
 8000930:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000934:	4a79      	ldr	r2, [pc, #484]	; (8000b1c <MX_GPIO_Init+0x27c>)
 8000936:	f043 0302 	orr.w	r3, r3, #2
 800093a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800093e:	4b77      	ldr	r3, [pc, #476]	; (8000b1c <MX_GPIO_Init+0x27c>)
 8000940:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000944:	f003 0302 	and.w	r3, r3, #2
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094c:	4b73      	ldr	r3, [pc, #460]	; (8000b1c <MX_GPIO_Init+0x27c>)
 800094e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000952:	4a72      	ldr	r2, [pc, #456]	; (8000b1c <MX_GPIO_Init+0x27c>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800095c:	4b6f      	ldr	r3, [pc, #444]	; (8000b1c <MX_GPIO_Init+0x27c>)
 800095e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096a:	4b6c      	ldr	r3, [pc, #432]	; (8000b1c <MX_GPIO_Init+0x27c>)
 800096c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000970:	4a6a      	ldr	r2, [pc, #424]	; (8000b1c <MX_GPIO_Init+0x27c>)
 8000972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000976:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800097a:	4b68      	ldr	r3, [pc, #416]	; (8000b1c <MX_GPIO_Init+0x27c>)
 800097c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000988:	4b64      	ldr	r3, [pc, #400]	; (8000b1c <MX_GPIO_Init+0x27c>)
 800098a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800098e:	4a63      	ldr	r2, [pc, #396]	; (8000b1c <MX_GPIO_Init+0x27c>)
 8000990:	f043 0310 	orr.w	r3, r3, #16
 8000994:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000998:	4b60      	ldr	r3, [pc, #384]	; (8000b1c <MX_GPIO_Init+0x27c>)
 800099a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800099e:	f003 0310 	and.w	r3, r3, #16
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ac:	485c      	ldr	r0, [pc, #368]	; (8000b20 <MX_GPIO_Init+0x280>)
 80009ae:	f005 f80d 	bl	80059cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|ENABLE_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f244 0121 	movw	r1, #16417	; 0x4021
 80009b8:	485a      	ldr	r0, [pc, #360]	; (8000b24 <MX_GPIO_Init+0x284>)
 80009ba:	f005 f807 	bl	80059cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	4859      	ldr	r0, [pc, #356]	; (8000b28 <MX_GPIO_Init+0x288>)
 80009c4:	f005 f802 	bl	80059cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HX711_CLK_GPIO_Port, HX711_CLK_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2180      	movs	r1, #128	; 0x80
 80009cc:	4857      	ldr	r0, [pc, #348]	; (8000b2c <MX_GPIO_Init+0x28c>)
 80009ce:	f004 fffd 	bl	80059cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2102      	movs	r1, #2
 80009d6:	4856      	ldr	r0, [pc, #344]	; (8000b30 <MX_GPIO_Init+0x290>)
 80009d8:	f004 fff8 	bl	80059cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	4619      	mov	r1, r3
 80009f0:	484d      	ldr	r0, [pc, #308]	; (8000b28 <MX_GPIO_Init+0x288>)
 80009f2:	f004 fe3b 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80009f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4844      	ldr	r0, [pc, #272]	; (8000b20 <MX_GPIO_Init+0x280>)
 8000a10:	f004 fe2c 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|ENABLE_Pin;
 8000a14:	f244 0321 	movw	r3, #16417	; 0x4021
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	483d      	ldr	r0, [pc, #244]	; (8000b24 <MX_GPIO_Init+0x284>)
 8000a2e:	f004 fe1d 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a44:	4619      	mov	r1, r3
 8000a46:	483b      	ldr	r0, [pc, #236]	; (8000b34 <MX_GPIO_Init+0x294>)
 8000a48:	f004 fe10 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8000a4c:	2380      	movs	r3, #128	; 0x80
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	4619      	mov	r1, r3
 8000a62:	4831      	ldr	r0, [pc, #196]	; (8000b28 <MX_GPIO_Init+0x288>)
 8000a64:	f004 fe02 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	482e      	ldr	r0, [pc, #184]	; (8000b38 <MX_GPIO_Init+0x298>)
 8000a7e:	f004 fdf5 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a94:	230a      	movs	r3, #10
 8000a96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4826      	ldr	r0, [pc, #152]	; (8000b38 <MX_GPIO_Init+0x298>)
 8000aa0:	f004 fde4 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000aa4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	4619      	mov	r1, r3
 8000abc:	481e      	ldr	r0, [pc, #120]	; (8000b38 <MX_GPIO_Init+0x298>)
 8000abe:	f004 fdd5 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX711_DT_Pin;
 8000ac2:	2340      	movs	r3, #64	; 0x40
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HX711_DT_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4815      	ldr	r0, [pc, #84]	; (8000b2c <MX_GPIO_Init+0x28c>)
 8000ad6:	f004 fdc9 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX711_CLK_Pin;
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HX711_CLK_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	480e      	ldr	r0, [pc, #56]	; (8000b2c <MX_GPIO_Init+0x28c>)
 8000af2:	f004 fdbb 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000af6:	2302      	movs	r3, #2
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4808      	ldr	r0, [pc, #32]	; (8000b30 <MX_GPIO_Init+0x290>)
 8000b0e:	f004 fdad 	bl	800566c <HAL_GPIO_Init>

}
 8000b12:	bf00      	nop
 8000b14:	3738      	adds	r7, #56	; 0x38
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	58024400 	.word	0x58024400
 8000b20:	58021400 	.word	0x58021400
 8000b24:	58020400 	.word	0x58020400
 8000b28:	58020800 	.word	0x58020800
 8000b2c:	58020c00 	.word	0x58020c00
 8000b30:	58021000 	.word	0x58021000
 8000b34:	58021800 	.word	0x58021800
 8000b38:	58020000 	.word	0x58020000

08000b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b42:	f000 fdb5 	bl	80016b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b46:	f000 f83f 	bl	8000bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4a:	f7ff fea9 	bl	80008a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b4e:	f7ff fe6f 	bl	8000830 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000b52:	f000 fc57 	bl	8001404 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000b56:	f7ff fd4b 	bl	80005f0 <MX_ADC1_Init>
  MX_USB_OTG_HS_USB_Init();
 8000b5a:	f000 fd77 	bl	800164c <MX_USB_OTG_HS_USB_Init>
  MX_TIM3_Init();
 8000b5e:	f000 fb0d 	bl	800117c <MX_TIM3_Init>
  MX_TIM1_Init();
 8000b62:	f000 fa3d 	bl	8000fe0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b66:	f000 fa91 	bl	800108c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  sharp_ir_sensor_start();
//  hx711_init(&loadcell, HX711_CLK_GPIO_Port, HX711_DT_GPIO_Port, HX711_CLK_Pin, HX711_DT_Pin, 0, 1);
  stepper_init(&stepper, &htim2, TIM_CHANNEL_1, &htim1, STEP_GPIO_Port, DIR_GPIO_Port, ENABLE_GPIO_Port, STEP_Pin, DIR_Pin, ENABLE_Pin);
 8000b6a:	2320      	movs	r3, #32
 8000b6c:	9305      	str	r3, [sp, #20]
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	9304      	str	r3, [sp, #16]
 8000b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b76:	9303      	str	r3, [sp, #12]
 8000b78:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <main+0x74>)
 8000b7a:	9302      	str	r3, [sp, #8]
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <main+0x78>)
 8000b7e:	9301      	str	r3, [sp, #4]
 8000b80:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <main+0x7c>)
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <main+0x80>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	490d      	ldr	r1, [pc, #52]	; (8000bc0 <main+0x84>)
 8000b8a:	480e      	ldr	r0, [pc, #56]	; (8000bc4 <main+0x88>)
 8000b8c:	f000 f8ab 	bl	8000ce6 <stepper_init>
  stepper_set_enable_LOW(&stepper);
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <main+0x88>)
 8000b92:	f000 f91f 	bl	8000dd4 <stepper_set_enable_LOW>
  uart_handler_start_receiving();
 8000b96:	f000 fc03 	bl	80013a0 <uart_handler_start_receiving>
//	  stepper_set_enable_HIGH(&stepper);
//	  HAL_Delay(4000);
//	  stepper_start_angle_mode(&stepper, CCW, 30, 360);
//	  stepper_set_enable_HIGH(&stepper);
//	  HAL_Delay(4000);
	  if(uart_handler_get_data_received() == 1){
 8000b9a:	f000 fbcd 	bl	8001338 <uart_handler_get_data_received>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d1fa      	bne.n	8000b9a <main+0x5e>
		  uart_handler_ping_pong();
 8000ba4:	f000 fbe4 	bl	8001370 <uart_handler_ping_pong>
		  uart_handler_set_data_received(0);
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f000 fbd1 	bl	8001350 <uart_handler_set_data_received>
	  if(uart_handler_get_data_received() == 1){
 8000bae:	e7f4      	b.n	8000b9a <main+0x5e>
 8000bb0:	58020400 	.word	0x58020400
 8000bb4:	58020800 	.word	0x58020800
 8000bb8:	58020000 	.word	0x58020000
 8000bbc:	24000134 	.word	0x24000134
 8000bc0:	24000180 	.word	0x24000180
 8000bc4:	24000108 	.word	0x24000108

08000bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b09c      	sub	sp, #112	; 0x70
 8000bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	224c      	movs	r2, #76	; 0x4c
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f00b ff72 	bl	800cac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2220      	movs	r2, #32
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f00b ff6c 	bl	800cac0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000be8:	4b30      	ldr	r3, [pc, #192]	; (8000cac <SystemClock_Config+0xe4>)
 8000bea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bf2:	2004      	movs	r0, #4
 8000bf4:	f004 ff04 	bl	8005a00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <SystemClock_Config+0xe8>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a2b      	ldr	r2, [pc, #172]	; (8000cb0 <SystemClock_Config+0xe8>)
 8000c02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <SystemClock_Config+0xe8>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c14:	bf00      	nop
 8000c16:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <SystemClock_Config+0xe8>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c22:	d1f8      	bne.n	8000c16 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000c24:	2321      	movs	r3, #33	; 0x21
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c28:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c32:	2302      	movs	r3, #2
 8000c34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c36:	2302      	movs	r3, #2
 8000c38:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000c3e:	2346      	movs	r3, #70	; 0x46
 8000c40:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c42:	2302      	movs	r3, #2
 8000c44:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c46:	2304      	movs	r3, #4
 8000c48:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c4e:	230c      	movs	r3, #12
 8000c50:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f004 ff28 	bl	8005ab4 <HAL_RCC_OscConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c6a:	f000 f837 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6e:	233f      	movs	r3, #63	; 0x3f
 8000c70:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c72:	2303      	movs	r3, #3
 8000c74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c7e:	2340      	movs	r3, #64	; 0x40
 8000c80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c82:	2340      	movs	r3, #64	; 0x40
 8000c84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c8c:	2340      	movs	r3, #64	; 0x40
 8000c8e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2107      	movs	r1, #7
 8000c94:	4618      	mov	r0, r3
 8000c96:	f005 fb3f 	bl	8006318 <HAL_RCC_ClockConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000ca0:	f000 f81c 	bl	8000cdc <Error_Handler>
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	3770      	adds	r7, #112	; 0x70
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	58024800 	.word	0x58024800

08000cb4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	if(htim->Instance == stepper.slave_timer.htim->Instance){
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d102      	bne.n	8000cd0 <HAL_TIM_PeriodElapsedCallback+0x1c>
		stepper_stop(&stepper);
 8000cca:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000ccc:	f000 f833 	bl	8000d36 <stepper_stop>
	}
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	24000108 	.word	0x24000108

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <Error_Handler+0x8>

08000ce6 <stepper_init>:
#include "stepper.h"
#include "tim.h"

void stepper_init(stepper_t *stepper, TIM_HandleTypeDef *timer, uint32_t channel, TIM_HandleTypeDef *slave_timer,
		GPIO_TypeDef *STEP_port, GPIO_TypeDef *DIR_port, GPIO_TypeDef *ENABLE_port,
		uint16_t STEP_pin, uint16_t DIR_pin, uint16_t ENABLE_pin){
 8000ce6:	b480      	push	{r7}
 8000ce8:	b085      	sub	sp, #20
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	603b      	str	r3, [r7, #0]
	stepper->timer.htim = timer;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	601a      	str	r2, [r3, #0]
	stepper->timer.channel = channel;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	605a      	str	r2, [r3, #4]
	stepper->slave_timer.htim = slave_timer;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	609a      	str	r2, [r3, #8]

	stepper->ports.STEP_port = STEP_port;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	615a      	str	r2, [r3, #20]
	stepper->ports.DIR_port = DIR_port;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	69fa      	ldr	r2, [r7, #28]
 8000d10:	619a      	str	r2, [r3, #24]
	stepper->ports.ENABLE_port = ENABLE_port;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6a3a      	ldr	r2, [r7, #32]
 8000d16:	61da      	str	r2, [r3, #28]

	stepper->pins.STEP_pin = STEP_pin;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000d1c:	841a      	strh	r2, [r3, #32]
	stepper->pins.DIR_pin = DIR_pin;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d22:	845a      	strh	r2, [r3, #34]	; 0x22
	stepper->pins.ENABLE_pin = ENABLE_pin;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000d28:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <stepper_stop>:

	HAL_TIM_PWM_Start(stepper->timer.htim, stepper->timer.channel);

}

void stepper_stop(stepper_t *stepper){
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
	stepper->mode = STOP;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	741a      	strb	r2, [r3, #16]
	__HAL_TIM_SET_COMPARE(stepper->timer.htim,stepper->timer.channel,0);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d105      	bne.n	8000d58 <stepper_stop+0x22>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2200      	movs	r2, #0
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34
 8000d56:	e02c      	b.n	8000db2 <stepper_stop+0x7c>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d105      	bne.n	8000d6c <stepper_stop+0x36>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	2300      	movs	r3, #0
 8000d68:	6393      	str	r3, [r2, #56]	; 0x38
 8000d6a:	e022      	b.n	8000db2 <stepper_stop+0x7c>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b08      	cmp	r3, #8
 8000d72:	d105      	bne.n	8000d80 <stepper_stop+0x4a>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000d7e:	e018      	b.n	8000db2 <stepper_stop+0x7c>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b0c      	cmp	r3, #12
 8000d86:	d105      	bne.n	8000d94 <stepper_stop+0x5e>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	e00e      	b.n	8000db2 <stepper_stop+0x7c>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b10      	cmp	r3, #16
 8000d9a:	d105      	bne.n	8000da8 <stepper_stop+0x72>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	2300      	movs	r3, #0
 8000da4:	6593      	str	r3, [r2, #88]	; 0x58
 8000da6:	e004      	b.n	8000db2 <stepper_stop+0x7c>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	2300      	movs	r3, #0
 8000db0:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_TIM_PWM_Stop(stepper->timer.htim, stepper->timer.channel);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4610      	mov	r0, r2
 8000dbe:	f008 fb29 	bl	8009414 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(stepper->slave_timer.htim);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f008 fa93 	bl	80092f2 <HAL_TIM_Base_Stop_IT>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <stepper_set_enable_LOW>:

void stepper_set_enable_HIGH(stepper_t *stepper){
	HAL_GPIO_WritePin(stepper->ports.ENABLE_port, stepper->pins.ENABLE_pin, GPIO_PIN_SET);
}

void stepper_set_enable_LOW(stepper_t *stepper){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(stepper->ports.ENABLE_port, stepper->pins.ENABLE_pin, GPIO_PIN_RESET);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69d8      	ldr	r0, [r3, #28]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000de4:	2200      	movs	r2, #0
 8000de6:	4619      	mov	r1, r3
 8000de8:	f004 fdf0 	bl	80059cc <HAL_GPIO_WritePin>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_MspInit+0x30>)
 8000dfc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000e00:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <HAL_MspInit+0x30>)
 8000e02:	f043 0302 	orr.w	r3, r3, #2
 8000e06:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_MspInit+0x30>)
 8000e0c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	58024400 	.word	0x58024400

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <NMI_Handler+0x4>

08000e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e74:	f000 fc8e 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <DMA1_Stream0_IRQHandler+0x10>)
 8000e82:	f003 f871 	bl	8003f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	24000090 	.word	0x24000090

08000e90 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <DMA1_Stream1_IRQHandler+0x10>)
 8000e96:	f003 f867 	bl	8003f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	240003b0 	.word	0x240003b0

08000ea4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <DMA1_Stream2_IRQHandler+0x10>)
 8000eaa:	f003 f85d 	bl	8003f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	24000428 	.word	0x24000428

08000eb8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <TIM1_UP_IRQHandler+0x10>)
 8000ebe:	f008 fb3f 	bl	8009540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	24000134 	.word	0x24000134

08000ecc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <USART3_IRQHandler+0x10>)
 8000ed2:	f009 fd65 	bl	800a9a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2400031c 	.word	0x2400031c

08000ee0 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ef4:	4b32      	ldr	r3, [pc, #200]	; (8000fc0 <SystemInit+0xd0>)
 8000ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efa:	4a31      	ldr	r2, [pc, #196]	; (8000fc0 <SystemInit+0xd0>)
 8000efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f04:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <SystemInit+0xd4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 030f 	and.w	r3, r3, #15
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d807      	bhi.n	8000f20 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f10:	4b2c      	ldr	r3, [pc, #176]	; (8000fc4 <SystemInit+0xd4>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f023 030f 	bic.w	r3, r3, #15
 8000f18:	4a2a      	ldr	r2, [pc, #168]	; (8000fc4 <SystemInit+0xd4>)
 8000f1a:	f043 0303 	orr.w	r3, r3, #3
 8000f1e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f20:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <SystemInit+0xd8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a28      	ldr	r2, [pc, #160]	; (8000fc8 <SystemInit+0xd8>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f2c:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <SystemInit+0xd8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f32:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <SystemInit+0xd8>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4924      	ldr	r1, [pc, #144]	; (8000fc8 <SystemInit+0xd8>)
 8000f38:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <SystemInit+0xdc>)
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f3e:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <SystemInit+0xd4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 030c 	and.w	r3, r3, #12
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d007      	beq.n	8000f5a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <SystemInit+0xd4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f023 030f 	bic.w	r3, r3, #15
 8000f52:	4a1c      	ldr	r2, [pc, #112]	; (8000fc4 <SystemInit+0xd4>)
 8000f54:	f043 0303 	orr.w	r3, r3, #3
 8000f58:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <SystemInit+0xd8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <SystemInit+0xd8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <SystemInit+0xd8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <SystemInit+0xd8>)
 8000f6e:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <SystemInit+0xe0>)
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <SystemInit+0xd8>)
 8000f74:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <SystemInit+0xe4>)
 8000f76:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <SystemInit+0xd8>)
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <SystemInit+0xe8>)
 8000f7c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <SystemInit+0xd8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <SystemInit+0xd8>)
 8000f86:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <SystemInit+0xe8>)
 8000f88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <SystemInit+0xd8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <SystemInit+0xd8>)
 8000f92:	4a11      	ldr	r2, [pc, #68]	; (8000fd8 <SystemInit+0xe8>)
 8000f94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <SystemInit+0xd8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <SystemInit+0xd8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a09      	ldr	r2, [pc, #36]	; (8000fc8 <SystemInit+0xd8>)
 8000fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <SystemInit+0xd8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <SystemInit+0xec>)
 8000fb0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000fb4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00
 8000fc4:	52002000 	.word	0x52002000
 8000fc8:	58024400 	.word	0x58024400
 8000fcc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fd0:	02020200 	.word	0x02020200
 8000fd4:	01ff0000 	.word	0x01ff0000
 8000fd8:	01010280 	.word	0x01010280
 8000fdc:	52004000 	.word	0x52004000

08000fe0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001000:	4b20      	ldr	r3, [pc, #128]	; (8001084 <MX_TIM1_Init+0xa4>)
 8001002:	4a21      	ldr	r2, [pc, #132]	; (8001088 <MX_TIM1_Init+0xa8>)
 8001004:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <MX_TIM1_Init+0xa4>)
 8001008:	2200      	movs	r2, #0
 800100a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <MX_TIM1_Init+0xa4>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <MX_TIM1_Init+0xa4>)
 8001014:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001018:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_TIM1_Init+0xa4>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_TIM1_Init+0xa4>)
 8001022:	2200      	movs	r2, #0
 8001024:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_TIM1_Init+0xa4>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800102c:	4815      	ldr	r0, [pc, #84]	; (8001084 <MX_TIM1_Init+0xa4>)
 800102e:	f008 f909 	bl	8009244 <HAL_TIM_Base_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001038:	f7ff fe50 	bl	8000cdc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800103c:	2307      	movs	r3, #7
 800103e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001040:	2310      	movs	r3, #16
 8001042:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4619      	mov	r1, r3
 800104a:	480e      	ldr	r0, [pc, #56]	; (8001084 <MX_TIM1_Init+0xa4>)
 800104c:	f008 fda4 	bl	8009b98 <HAL_TIM_SlaveConfigSynchro>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001056:	f7ff fe41 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001066:	463b      	mov	r3, r7
 8001068:	4619      	mov	r1, r3
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <MX_TIM1_Init+0xa4>)
 800106c:	f009 fb1c 	bl	800a6a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001076:	f7ff fe31 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	3720      	adds	r7, #32
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	24000134 	.word	0x24000134
 8001088:	40010000 	.word	0x40010000

0800108c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08e      	sub	sp, #56	; 0x38
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001092:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ac:	463b      	mov	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]
 80010ba:	615a      	str	r2, [r3, #20]
 80010bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010be:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <MX_TIM2_Init+0xec>)
 80010c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 28-1;
 80010c6:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <MX_TIM2_Init+0xec>)
 80010c8:	221b      	movs	r2, #27
 80010ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010cc:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <MX_TIM2_Init+0xec>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80010d2:	4b29      	ldr	r3, [pc, #164]	; (8001178 <MX_TIM2_Init+0xec>)
 80010d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80010d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010da:	4b27      	ldr	r3, [pc, #156]	; (8001178 <MX_TIM2_Init+0xec>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <MX_TIM2_Init+0xec>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e6:	4824      	ldr	r0, [pc, #144]	; (8001178 <MX_TIM2_Init+0xec>)
 80010e8:	f008 f8ac 	bl	8009244 <HAL_TIM_Base_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010f2:	f7ff fdf3 	bl	8000cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001100:	4619      	mov	r1, r3
 8001102:	481d      	ldr	r0, [pc, #116]	; (8001178 <MX_TIM2_Init+0xec>)
 8001104:	f008 fc50 	bl	80099a8 <HAL_TIM_ConfigClockSource>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800110e:	f7ff fde5 	bl	8000cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001112:	4819      	ldr	r0, [pc, #100]	; (8001178 <MX_TIM2_Init+0xec>)
 8001114:	f008 f91c 	bl	8009350 <HAL_TIM_PWM_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800111e:	f7ff fddd 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001122:	2340      	movs	r3, #64	; 0x40
 8001124:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	4811      	ldr	r0, [pc, #68]	; (8001178 <MX_TIM2_Init+0xec>)
 8001132:	f009 fab9 	bl	800a6a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800113c:	f7ff fdce 	bl	8000cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001140:	2360      	movs	r3, #96	; 0x60
 8001142:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000;
 8001144:	f241 3388 	movw	r3, #5000	; 0x1388
 8001148:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001152:	463b      	mov	r3, r7
 8001154:	2200      	movs	r2, #0
 8001156:	4619      	mov	r1, r3
 8001158:	4807      	ldr	r0, [pc, #28]	; (8001178 <MX_TIM2_Init+0xec>)
 800115a:	f008 fb11 	bl	8009780 <HAL_TIM_PWM_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001164:	f7ff fdba 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001168:	4803      	ldr	r0, [pc, #12]	; (8001178 <MX_TIM2_Init+0xec>)
 800116a:	f000 f8ab 	bl	80012c4 <HAL_TIM_MspPostInit>

}
 800116e:	bf00      	nop
 8001170:	3738      	adds	r7, #56	; 0x38
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	24000180 	.word	0x24000180

0800117c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <MX_TIM3_Init+0x98>)
 800119c:	4a1e      	ldr	r2, [pc, #120]	; (8001218 <MX_TIM3_Init+0x9c>)
 800119e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28000-1;
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <MX_TIM3_Init+0x98>)
 80011a2:	f646 525f 	movw	r2, #27999	; 0x6d5f
 80011a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_TIM3_Init+0x98>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80011ae:	4b19      	ldr	r3, [pc, #100]	; (8001214 <MX_TIM3_Init+0x98>)
 80011b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <MX_TIM3_Init+0x98>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_TIM3_Init+0x98>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011c2:	4814      	ldr	r0, [pc, #80]	; (8001214 <MX_TIM3_Init+0x98>)
 80011c4:	f008 f83e 	bl	8009244 <HAL_TIM_Base_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80011ce:	f7ff fd85 	bl	8000cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	4619      	mov	r1, r3
 80011de:	480d      	ldr	r0, [pc, #52]	; (8001214 <MX_TIM3_Init+0x98>)
 80011e0:	f008 fbe2 	bl	80099a8 <HAL_TIM_ConfigClockSource>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80011ea:	f7ff fd77 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011ee:	2320      	movs	r3, #32
 80011f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	4619      	mov	r1, r3
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <MX_TIM3_Init+0x98>)
 80011fc:	f009 fa54 	bl	800a6a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001206:	f7ff fd69 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	3720      	adds	r7, #32
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	240001cc 	.word	0x240001cc
 8001218:	40000400 	.word	0x40000400

0800121c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a23      	ldr	r2, [pc, #140]	; (80012b8 <HAL_TIM_Base_MspInit+0x9c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d117      	bne.n	800125e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <HAL_TIM_Base_MspInit+0xa0>)
 8001230:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001234:	4a21      	ldr	r2, [pc, #132]	; (80012bc <HAL_TIM_Base_MspInit+0xa0>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <HAL_TIM_Base_MspInit+0xa0>)
 8001240:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	2019      	movs	r0, #25
 8001252:	f001 faf6 	bl	8002842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001256:	2019      	movs	r0, #25
 8001258:	f001 fb0d 	bl	8002876 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800125c:	e028      	b.n	80012b0 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM2)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001266:	d10f      	bne.n	8001288 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <HAL_TIM_Base_MspInit+0xa0>)
 800126a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800126e:	4a13      	ldr	r2, [pc, #76]	; (80012bc <HAL_TIM_Base_MspInit+0xa0>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001278:	4b10      	ldr	r3, [pc, #64]	; (80012bc <HAL_TIM_Base_MspInit+0xa0>)
 800127a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
}
 8001286:	e013      	b.n	80012b0 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM3)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0c      	ldr	r2, [pc, #48]	; (80012c0 <HAL_TIM_Base_MspInit+0xa4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d10e      	bne.n	80012b0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_TIM_Base_MspInit+0xa0>)
 8001294:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001298:	4a08      	ldr	r2, [pc, #32]	; (80012bc <HAL_TIM_Base_MspInit+0xa0>)
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_TIM_Base_MspInit+0xa0>)
 80012a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40010000 	.word	0x40010000
 80012bc:	58024400 	.word	0x58024400
 80012c0:	40000400 	.word	0x40000400

080012c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e4:	d11f      	bne.n	8001326 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_TIM_MspPostInit+0x6c>)
 80012e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012ec:	4a10      	ldr	r2, [pc, #64]	; (8001330 <HAL_TIM_MspPostInit+0x6c>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_TIM_MspPostInit+0x6c>)
 80012f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP_Pin;
 8001304:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001308:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001316:	2301      	movs	r3, #1
 8001318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	4619      	mov	r1, r3
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <HAL_TIM_MspPostInit+0x70>)
 8001322:	f004 f9a3 	bl	800566c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3720      	adds	r7, #32
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	58024400 	.word	0x58024400
 8001334:	58020000 	.word	0x58020000

08001338 <uart_handler_get_data_received>:
#include "string.h"

volatile uint8_t uart_data_received = 0;
uint8_t receive_buffer[256] = {0};

uint8_t uart_handler_get_data_received(void){
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
	return uart_data_received;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <uart_handler_get_data_received+0x14>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2db      	uxtb	r3, r3
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	24000218 	.word	0x24000218

08001350 <uart_handler_set_data_received>:

void uart_handler_set_data_received(uint8_t value){
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
	uart_data_received = value;
 800135a:	4a04      	ldr	r2, [pc, #16]	; (800136c <uart_handler_set_data_received+0x1c>)
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	7013      	strb	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	24000218 	.word	0x24000218

08001370 <uart_handler_ping_pong>:

void uart_handler_ping_pong(void){
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	  if(memcmp(receive_buffer,"Ping",4) == 0){
 8001374:	2204      	movs	r2, #4
 8001376:	4907      	ldr	r1, [pc, #28]	; (8001394 <uart_handler_ping_pong+0x24>)
 8001378:	4807      	ldr	r0, [pc, #28]	; (8001398 <uart_handler_ping_pong+0x28>)
 800137a:	f00b fb91 	bl	800caa0 <memcmp>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d103      	bne.n	800138c <uart_handler_ping_pong+0x1c>
		  uart_handler_transmit((uint8_t*)"Pong", 4);
 8001384:	2104      	movs	r1, #4
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <uart_handler_ping_pong+0x2c>)
 8001388:	f000 f818 	bl	80013bc <uart_handler_transmit>
	  }
	  uart_handler_start_receiving();
 800138c:	f000 f808 	bl	80013a0 <uart_handler_start_receiving>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	0800cae8 	.word	0x0800cae8
 8001398:	2400021c 	.word	0x2400021c
 800139c:	0800caf0 	.word	0x0800caf0

080013a0 <uart_handler_start_receiving>:

void uart_handler_start_receiving(void){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&SENDER_UART, receive_buffer, 256);
 80013a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013a8:	4902      	ldr	r1, [pc, #8]	; (80013b4 <uart_handler_start_receiving+0x14>)
 80013aa:	4803      	ldr	r0, [pc, #12]	; (80013b8 <uart_handler_start_receiving+0x18>)
 80013ac:	f00b fab2 	bl	800c914 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	2400021c 	.word	0x2400021c
 80013b8:	2400031c 	.word	0x2400031c

080013bc <uart_handler_transmit>:

void uart_handler_transmit(uint8_t *data_ptr, uint16_t size){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_DMA(&SENDER_UART, data_ptr, size);
 80013c8:	887b      	ldrh	r3, [r7, #2]
 80013ca:	461a      	mov	r2, r3
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	4803      	ldr	r0, [pc, #12]	; (80013dc <uart_handler_transmit+0x20>)
 80013d0:	f009 fa66 	bl	800a8a0 <HAL_UART_Transmit_DMA>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2400031c 	.word	0x2400031c

080013e0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
//	if(huart == &SENDER_UART){
		uart_data_received = 1;
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <HAL_UARTEx_RxEventCallback+0x20>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
//	}
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	24000218 	.word	0x24000218

08001404 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001408:	4b22      	ldr	r3, [pc, #136]	; (8001494 <MX_USART3_UART_Init+0x90>)
 800140a:	4a23      	ldr	r2, [pc, #140]	; (8001498 <MX_USART3_UART_Init+0x94>)
 800140c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <MX_USART3_UART_Init+0x90>)
 8001410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001414:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <MX_USART3_UART_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <MX_USART3_UART_Init+0x90>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <MX_USART3_UART_Init+0x90>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_USART3_UART_Init+0x90>)
 800142a:	220c      	movs	r2, #12
 800142c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <MX_USART3_UART_Init+0x90>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_USART3_UART_Init+0x90>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <MX_USART3_UART_Init+0x90>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_USART3_UART_Init+0x90>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <MX_USART3_UART_Init+0x90>)
 8001448:	2200      	movs	r2, #0
 800144a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800144c:	4811      	ldr	r0, [pc, #68]	; (8001494 <MX_USART3_UART_Init+0x90>)
 800144e:	f009 f9d7 	bl	800a800 <HAL_UART_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001458:	f7ff fc40 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800145c:	2100      	movs	r1, #0
 800145e:	480d      	ldr	r0, [pc, #52]	; (8001494 <MX_USART3_UART_Init+0x90>)
 8001460:	f00b f9dc 	bl	800c81c <HAL_UARTEx_SetTxFifoThreshold>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800146a:	f7ff fc37 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800146e:	2100      	movs	r1, #0
 8001470:	4808      	ldr	r0, [pc, #32]	; (8001494 <MX_USART3_UART_Init+0x90>)
 8001472:	f00b fa11 	bl	800c898 <HAL_UARTEx_SetRxFifoThreshold>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800147c:	f7ff fc2e 	bl	8000cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_USART3_UART_Init+0x90>)
 8001482:	f00b f992 	bl	800c7aa <HAL_UARTEx_DisableFifoMode>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800148c:	f7ff fc26 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	2400031c 	.word	0x2400031c
 8001498:	40004800 	.word	0x40004800

0800149c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b0ba      	sub	sp, #232	; 0xe8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	22c0      	movs	r2, #192	; 0xc0
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f00b faff 	bl	800cac0 <memset>
  if(uartHandle->Instance==USART3)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a5a      	ldr	r2, [pc, #360]	; (8001630 <HAL_UART_MspInit+0x194>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	f040 80ac 	bne.w	8001626 <HAL_UART_MspInit+0x18a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014ce:	f04f 0202 	mov.w	r2, #2
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014da:	2300      	movs	r3, #0
 80014dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e0:	f107 0310 	add.w	r3, r7, #16
 80014e4:	4618      	mov	r0, r3
 80014e6:	f005 faa3 	bl	8006a30 <HAL_RCCEx_PeriphCLKConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80014f0:	f7ff fbf4 	bl	8000cdc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014f4:	4b4f      	ldr	r3, [pc, #316]	; (8001634 <HAL_UART_MspInit+0x198>)
 80014f6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80014fa:	4a4e      	ldr	r2, [pc, #312]	; (8001634 <HAL_UART_MspInit+0x198>)
 80014fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001500:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001504:	4b4b      	ldr	r3, [pc, #300]	; (8001634 <HAL_UART_MspInit+0x198>)
 8001506:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800150a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001512:	4b48      	ldr	r3, [pc, #288]	; (8001634 <HAL_UART_MspInit+0x198>)
 8001514:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001518:	4a46      	ldr	r2, [pc, #280]	; (8001634 <HAL_UART_MspInit+0x198>)
 800151a:	f043 0308 	orr.w	r3, r3, #8
 800151e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001522:	4b44      	ldr	r3, [pc, #272]	; (8001634 <HAL_UART_MspInit+0x198>)
 8001524:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001530:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001534:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800154a:	2307      	movs	r3, #7
 800154c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001550:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001554:	4619      	mov	r1, r3
 8001556:	4838      	ldr	r0, [pc, #224]	; (8001638 <HAL_UART_MspInit+0x19c>)
 8001558:	f004 f888 	bl	800566c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800155c:	4b37      	ldr	r3, [pc, #220]	; (800163c <HAL_UART_MspInit+0x1a0>)
 800155e:	4a38      	ldr	r2, [pc, #224]	; (8001640 <HAL_UART_MspInit+0x1a4>)
 8001560:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001562:	4b36      	ldr	r3, [pc, #216]	; (800163c <HAL_UART_MspInit+0x1a0>)
 8001564:	222e      	movs	r2, #46	; 0x2e
 8001566:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001568:	4b34      	ldr	r3, [pc, #208]	; (800163c <HAL_UART_MspInit+0x1a0>)
 800156a:	2240      	movs	r2, #64	; 0x40
 800156c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800156e:	4b33      	ldr	r3, [pc, #204]	; (800163c <HAL_UART_MspInit+0x1a0>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001574:	4b31      	ldr	r3, [pc, #196]	; (800163c <HAL_UART_MspInit+0x1a0>)
 8001576:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800157a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800157c:	4b2f      	ldr	r3, [pc, #188]	; (800163c <HAL_UART_MspInit+0x1a0>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001582:	4b2e      	ldr	r3, [pc, #184]	; (800163c <HAL_UART_MspInit+0x1a0>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001588:	4b2c      	ldr	r3, [pc, #176]	; (800163c <HAL_UART_MspInit+0x1a0>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800158e:	4b2b      	ldr	r3, [pc, #172]	; (800163c <HAL_UART_MspInit+0x1a0>)
 8001590:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001594:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001596:	4b29      	ldr	r3, [pc, #164]	; (800163c <HAL_UART_MspInit+0x1a0>)
 8001598:	2200      	movs	r2, #0
 800159a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800159c:	4827      	ldr	r0, [pc, #156]	; (800163c <HAL_UART_MspInit+0x1a0>)
 800159e:	f001 f985 	bl	80028ac <HAL_DMA_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80015a8:	f7ff fb98 	bl	8000cdc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a23      	ldr	r2, [pc, #140]	; (800163c <HAL_UART_MspInit+0x1a0>)
 80015b0:	67da      	str	r2, [r3, #124]	; 0x7c
 80015b2:	4a22      	ldr	r2, [pc, #136]	; (800163c <HAL_UART_MspInit+0x1a0>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream2;
 80015b8:	4b22      	ldr	r3, [pc, #136]	; (8001644 <HAL_UART_MspInit+0x1a8>)
 80015ba:	4a23      	ldr	r2, [pc, #140]	; (8001648 <HAL_UART_MspInit+0x1ac>)
 80015bc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <HAL_UART_MspInit+0x1a8>)
 80015c0:	222d      	movs	r2, #45	; 0x2d
 80015c2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015c4:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <HAL_UART_MspInit+0x1a8>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <HAL_UART_MspInit+0x1a8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <HAL_UART_MspInit+0x1a8>)
 80015d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <HAL_UART_MspInit+0x1a8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <HAL_UART_MspInit+0x1a8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <HAL_UART_MspInit+0x1a8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <HAL_UART_MspInit+0x1a8>)
 80015ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015f0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <HAL_UART_MspInit+0x1a8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80015f8:	4812      	ldr	r0, [pc, #72]	; (8001644 <HAL_UART_MspInit+0x1a8>)
 80015fa:	f001 f957 	bl	80028ac <HAL_DMA_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 8001604:	f7ff fb6a 	bl	8000cdc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <HAL_UART_MspInit+0x1a8>)
 800160c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001610:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <HAL_UART_MspInit+0x1a8>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	2027      	movs	r0, #39	; 0x27
 800161c:	f001 f911 	bl	8002842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001620:	2027      	movs	r0, #39	; 0x27
 8001622:	f001 f928 	bl	8002876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001626:	bf00      	nop
 8001628:	37e8      	adds	r7, #232	; 0xe8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40004800 	.word	0x40004800
 8001634:	58024400 	.word	0x58024400
 8001638:	58020c00 	.word	0x58020c00
 800163c:	240003b0 	.word	0x240003b0
 8001640:	40020028 	.word	0x40020028
 8001644:	24000428 	.word	0x24000428
 8001648:	40020040 	.word	0x40020040

0800164c <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800165c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001694 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001660:	f7ff fc46 	bl	8000ef0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001664:	480c      	ldr	r0, [pc, #48]	; (8001698 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001666:	490d      	ldr	r1, [pc, #52]	; (800169c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001668:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800166c:	e002      	b.n	8001674 <LoopCopyDataInit>

0800166e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001672:	3304      	adds	r3, #4

08001674 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001678:	d3f9      	bcc.n	800166e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800167c:	4c0a      	ldr	r4, [pc, #40]	; (80016a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001680:	e001      	b.n	8001686 <LoopFillZerobss>

08001682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001684:	3204      	adds	r2, #4

08001686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001688:	d3fb      	bcc.n	8001682 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800168a:	f00b f9e5 	bl	800ca58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168e:	f7ff fa55 	bl	8000b3c <main>
  bx  lr
 8001692:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001694:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001698:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800169c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80016a0:	0800cb48 	.word	0x0800cb48
  ldr r2, =_sbss
 80016a4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80016a8:	240004a4 	.word	0x240004a4

080016ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC_IRQHandler>
	...

080016b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b6:	2003      	movs	r0, #3
 80016b8:	f001 f8b8 	bl	800282c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80016bc:	f004 ffe2 	bl	8006684 <HAL_RCC_GetSysClockFreq>
 80016c0:	4602      	mov	r2, r0
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <HAL_Init+0x68>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	0a1b      	lsrs	r3, r3, #8
 80016c8:	f003 030f 	and.w	r3, r3, #15
 80016cc:	4913      	ldr	r1, [pc, #76]	; (800171c <HAL_Init+0x6c>)
 80016ce:	5ccb      	ldrb	r3, [r1, r3]
 80016d0:	f003 031f 	and.w	r3, r3, #31
 80016d4:	fa22 f303 	lsr.w	r3, r2, r3
 80016d8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_Init+0x68>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	4a0e      	ldr	r2, [pc, #56]	; (800171c <HAL_Init+0x6c>)
 80016e4:	5cd3      	ldrb	r3, [r2, r3]
 80016e6:	f003 031f 	and.w	r3, r3, #31
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	fa22 f303 	lsr.w	r3, r2, r3
 80016f0:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <HAL_Init+0x70>)
 80016f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016f4:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <HAL_Init+0x74>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016fa:	2000      	movs	r0, #0
 80016fc:	f000 f814 	bl	8001728 <HAL_InitTick>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e002      	b.n	8001710 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800170a:	f7ff fb73 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	58024400 	.word	0x58024400
 800171c:	0800caf8 	.word	0x0800caf8
 8001720:	24000004 	.word	0x24000004
 8001724:	24000000 	.word	0x24000000

08001728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001730:	4b15      	ldr	r3, [pc, #84]	; (8001788 <HAL_InitTick+0x60>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e021      	b.n	8001780 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800173c:	4b13      	ldr	r3, [pc, #76]	; (800178c <HAL_InitTick+0x64>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_InitTick+0x60>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174a:	fbb3 f3f1 	udiv	r3, r3, r1
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f001 f89d 	bl	8002892 <HAL_SYSTICK_Config>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00e      	b.n	8001780 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d80a      	bhi.n	800177e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001768:	2200      	movs	r2, #0
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001770:	f001 f867 	bl	8002842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_InitTick+0x68>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2400000c 	.word	0x2400000c
 800178c:	24000000 	.word	0x24000000
 8001790:	24000008 	.word	0x24000008

08001794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x20>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_IncTick+0x24>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	2400000c 	.word	0x2400000c
 80017b8:	240004a0 	.word	0x240004a0

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	240004a0 	.word	0x240004a0

080017d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	609a      	str	r2, [r3, #8]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	609a      	str	r2, [r3, #8]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	3360      	adds	r3, #96	; 0x60
 800184e:	461a      	mov	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	430b      	orrs	r3, r1
 800186a:	431a      	orrs	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001870:	bf00      	nop
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	431a      	orrs	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	611a      	str	r2, [r3, #16]
}
 80018a2:	bf00      	nop
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b087      	sub	sp, #28
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3360      	adds	r3, #96	; 0x60
 80018be:	461a      	mov	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	431a      	orrs	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	601a      	str	r2, [r3, #0]
  }
}
 80018d8:	bf00      	nop
 80018da:	371c      	adds	r7, #28
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3330      	adds	r3, #48	; 0x30
 80018f4:	461a      	mov	r2, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	f003 030c 	and.w	r3, r3, #12
 8001900:	4413      	add	r3, r2
 8001902:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	211f      	movs	r1, #31
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	401a      	ands	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	0e9b      	lsrs	r3, r3, #26
 800191c:	f003 011f 	and.w	r1, r3, #31
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	f003 031f 	and.w	r3, r3, #31
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	431a      	orrs	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001930:	bf00      	nop
 8001932:	371c      	adds	r7, #28
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800193c:	b480      	push	{r7}
 800193e:	b087      	sub	sp, #28
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	3314      	adds	r3, #20
 800194c:	461a      	mov	r2, r3
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	0e5b      	lsrs	r3, r3, #25
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	4413      	add	r3, r2
 800195a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	0d1b      	lsrs	r3, r3, #20
 8001964:	f003 031f 	and.w	r3, r3, #31
 8001968:	2107      	movs	r1, #7
 800196a:	fa01 f303 	lsl.w	r3, r1, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	401a      	ands	r2, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	0d1b      	lsrs	r3, r3, #20
 8001976:	f003 031f 	and.w	r3, r3, #31
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	431a      	orrs	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001986:	bf00      	nop
 8001988:	371c      	adds	r7, #28
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019ac:	43db      	mvns	r3, r3
 80019ae:	401a      	ands	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f003 0318 	and.w	r3, r3, #24
 80019b6:	4908      	ldr	r1, [pc, #32]	; (80019d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019b8:	40d9      	lsrs	r1, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	400b      	ands	r3, r1
 80019be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019c2:	431a      	orrs	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	000fffff 	.word	0x000fffff

080019dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <LL_ADC_DisableDeepPowerDown+0x20>)
 80019ea:	4013      	ands	r3, r2
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6093      	str	r3, [r2, #8]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	5fffffc0 	.word	0x5fffffc0

08001a00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a14:	d101      	bne.n	8001a1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <LL_ADC_EnableInternalRegulator+0x24>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	6fffffc0 	.word	0x6fffffc0

08001a50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a64:	d101      	bne.n	8001a6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <LL_ADC_IsEnabled+0x18>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <LL_ADC_IsEnabled+0x1a>
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d101      	bne.n	8001ab6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d101      	bne.n	8001adc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e138      	b.n	8001d78 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d109      	bne.n	8001b28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7fe fde5 	bl	80006e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff67 	bl	8001a00 <LL_ADC_IsDeepPowerDownEnabled>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d004      	beq.n	8001b42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff4d 	bl	80019dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ff82 	bl	8001a50 <LL_ADC_IsInternalRegulatorEnabled>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d114      	bne.n	8001b7c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff66 	bl	8001a28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b5c:	4b88      	ldr	r3, [pc, #544]	; (8001d80 <HAL_ADC_Init+0x294>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	099b      	lsrs	r3, r3, #6
 8001b62:	4a88      	ldr	r2, [pc, #544]	; (8001d84 <HAL_ADC_Init+0x298>)
 8001b64:	fba2 2303 	umull	r2, r3, r2, r3
 8001b68:	099b      	lsrs	r3, r3, #6
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b6e:	e002      	b.n	8001b76 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f9      	bne.n	8001b70 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff65 	bl	8001a50 <LL_ADC_IsInternalRegulatorEnabled>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10d      	bne.n	8001ba8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b90:	f043 0210 	orr.w	r2, r3, #16
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	f043 0201 	orr.w	r2, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff76 	bl	8001a9e <LL_ADC_REG_IsConversionOngoing>
 8001bb2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f040 80d2 	bne.w	8001d66 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f040 80ce 	bne.w	8001d66 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bce:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bd2:	f043 0202 	orr.w	r2, r3, #2
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ff4a 	bl	8001a78 <LL_ADC_IsEnabled>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d110      	bne.n	8001c0c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bea:	4867      	ldr	r0, [pc, #412]	; (8001d88 <HAL_ADC_Init+0x29c>)
 8001bec:	f7ff ff44 	bl	8001a78 <LL_ADC_IsEnabled>
 8001bf0:	4604      	mov	r4, r0
 8001bf2:	4866      	ldr	r0, [pc, #408]	; (8001d8c <HAL_ADC_Init+0x2a0>)
 8001bf4:	f7ff ff40 	bl	8001a78 <LL_ADC_IsEnabled>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4323      	orrs	r3, r4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d105      	bne.n	8001c0c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4619      	mov	r1, r3
 8001c06:	4862      	ldr	r0, [pc, #392]	; (8001d90 <HAL_ADC_Init+0x2a4>)
 8001c08:	f7ff fde4 	bl	80017d4 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7d5b      	ldrb	r3, [r3, #21]
 8001c10:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c16:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001c1c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	7f1b      	ldrb	r3, [r3, #28]
 8001c22:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7f1b      	ldrb	r3, [r3, #28]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d106      	bne.n	8001c3e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	045b      	lsls	r3, r3, #17
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d009      	beq.n	8001c5a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	4b4c      	ldr	r3, [pc, #304]	; (8001d94 <HAL_ADC_Init+0x2a8>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	69b9      	ldr	r1, [r7, #24]
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff13 	bl	8001a9e <LL_ADC_REG_IsConversionOngoing>
 8001c78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff ff20 	bl	8001ac4 <LL_ADC_INJ_IsConversionOngoing>
 8001c84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d14a      	bne.n	8001d22 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d147      	bne.n	8001d22 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7d1b      	ldrb	r3, [r3, #20]
 8001c96:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	4b3c      	ldr	r3, [pc, #240]	; (8001d98 <HAL_ADC_Init+0x2ac>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	69b9      	ldr	r1, [r7, #24]
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d11b      	bne.n	8001cf6 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	4b34      	ldr	r3, [pc, #208]	; (8001d9c <HAL_ADC_Init+0x2b0>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cd2:	3a01      	subs	r2, #1
 8001cd4:	0411      	lsls	r1, r2, #16
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cda:	4311      	orrs	r1, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ce0:	4311      	orrs	r1, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	611a      	str	r2, [r3, #16]
 8001cf4:	e007      	b.n	8001d06 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0201 	bic.w	r2, r2, #1
 8001d04:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 fb25 	bl	800236c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d10c      	bne.n	8001d44 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	f023 010f 	bic.w	r1, r3, #15
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	1e5a      	subs	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	631a      	str	r2, [r3, #48]	; 0x30
 8001d42:	e007      	b.n	8001d54 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 020f 	bic.w	r2, r2, #15
 8001d52:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d58:	f023 0303 	bic.w	r3, r3, #3
 8001d5c:	f043 0201 	orr.w	r2, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	655a      	str	r2, [r3, #84]	; 0x54
 8001d64:	e007      	b.n	8001d76 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6a:	f043 0210 	orr.w	r2, r3, #16
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d76:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3724      	adds	r7, #36	; 0x24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd90      	pop	{r4, r7, pc}
 8001d80:	24000000 	.word	0x24000000
 8001d84:	053e2d63 	.word	0x053e2d63
 8001d88:	40022000 	.word	0x40022000
 8001d8c:	40022100 	.word	0x40022100
 8001d90:	40022300 	.word	0x40022300
 8001d94:	fff0c003 	.word	0xfff0c003
 8001d98:	ffffbffc 	.word	0xffffbffc
 8001d9c:	fc00f81e 	.word	0xfc00f81e

08001da0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b0a1      	sub	sp, #132	; 0x84
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4a9a      	ldr	r2, [pc, #616]	; (8002024 <HAL_ADC_ConfigChannel+0x284>)
 8001dba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d101      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x2a>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e2bc      	b.n	8002344 <HAL_ADC_ConfigChannel+0x5a4>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fe61 	bl	8001a9e <LL_ADC_REG_IsConversionOngoing>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f040 82a1 	bne.w	8002326 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d108      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x62>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	0e9b      	lsrs	r3, r3, #26
 8001df6:	f003 031f 	and.w	r3, r3, #31
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	e016      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x90>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e12:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	e003      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001e1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	f003 031f 	and.w	r3, r3, #31
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	69d1      	ldr	r1, [r2, #28]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	430b      	orrs	r3, r1
 8001e3c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	6859      	ldr	r1, [r3, #4]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	f7ff fd4a 	bl	80018e4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fe22 	bl	8001a9e <LL_ADC_REG_IsConversionOngoing>
 8001e5a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fe2f 	bl	8001ac4 <LL_ADC_INJ_IsConversionOngoing>
 8001e66:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 80a0 	bne.w	8001fb0 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f040 809c 	bne.w	8001fb0 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6819      	ldr	r1, [r3, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	461a      	mov	r2, r3
 8001e86:	f7ff fd59 	bl	800193c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0310 	and.w	r3, r3, #16
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10b      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x110>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	695a      	ldr	r2, [r3, #20]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	e00a      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x126>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	695a      	ldr	r2, [r3, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d027      	beq.n	8001f20 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	6919      	ldr	r1, [r3, #16]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ede:	f7ff fcad 	bl	800183c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	6919      	ldr	r1, [r3, #16]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	7e5b      	ldrb	r3, [r3, #25]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d102      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x158>
 8001ef2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001ef6:	e000      	b.n	8001efa <HAL_ADC_ConfigChannel+0x15a>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	461a      	mov	r2, r3
 8001efc:	f7ff fcd7 	bl	80018ae <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	6919      	ldr	r1, [r3, #16]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	7e1b      	ldrb	r3, [r3, #24]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d102      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x176>
 8001f10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f14:	e000      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x178>
 8001f16:	2300      	movs	r3, #0
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f7ff fcaf 	bl	800187c <LL_ADC_SetDataRightShift>
 8001f1e:	e047      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	069b      	lsls	r3, r3, #26
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d107      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f42:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	069b      	lsls	r3, r3, #26
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d107      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f66:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	069b      	lsls	r3, r3, #26
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d107      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f8a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	069b      	lsls	r3, r3, #26
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d107      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fae:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fd5f 	bl	8001a78 <LL_ADC_IsEnabled>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f040 81bb 	bne.w	8002338 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	6819      	ldr	r1, [r3, #0]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f7ff fce0 	bl	8001994 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a12      	ldr	r2, [pc, #72]	; (8002024 <HAL_ADC_ConfigChannel+0x284>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	f040 8130 	bne.w	8002240 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10b      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x268>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0e9b      	lsrs	r3, r3, #26
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	2b09      	cmp	r3, #9
 8001ffe:	bf94      	ite	ls
 8002000:	2301      	movls	r3, #1
 8002002:	2300      	movhi	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	e01b      	b.n	8002040 <HAL_ADC_ConfigChannel+0x2a0>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002018:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800201a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800201c:	2b00      	cmp	r3, #0
 800201e:	d103      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002020:	2320      	movs	r3, #32
 8002022:	e005      	b.n	8002030 <HAL_ADC_ConfigChannel+0x290>
 8002024:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800202a:	fab3 f383 	clz	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	3301      	adds	r3, #1
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	2b09      	cmp	r3, #9
 8002038:	bf94      	ite	ls
 800203a:	2301      	movls	r3, #1
 800203c:	2300      	movhi	r3, #0
 800203e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002040:	2b00      	cmp	r3, #0
 8002042:	d079      	beq.n	8002138 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800204c:	2b00      	cmp	r3, #0
 800204e:	d107      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x2c0>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0e9b      	lsrs	r3, r3, #26
 8002056:	3301      	adds	r3, #1
 8002058:	069b      	lsls	r3, r3, #26
 800205a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800205e:	e015      	b.n	800208c <HAL_ADC_ConfigChannel+0x2ec>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800206e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002070:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002078:	2320      	movs	r3, #32
 800207a:	e003      	b.n	8002084 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800207c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	3301      	adds	r3, #1
 8002086:	069b      	lsls	r3, r3, #26
 8002088:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002094:	2b00      	cmp	r3, #0
 8002096:	d109      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x30c>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0e9b      	lsrs	r3, r3, #26
 800209e:	3301      	adds	r3, #1
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	2101      	movs	r1, #1
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	e017      	b.n	80020dc <HAL_ADC_ConfigChannel+0x33c>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80020ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80020be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80020c4:	2320      	movs	r3, #32
 80020c6:	e003      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 80020c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	3301      	adds	r3, #1
 80020d2:	f003 031f 	and.w	r3, r3, #31
 80020d6:	2101      	movs	r1, #1
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	ea42 0103 	orr.w	r1, r2, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10a      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x362>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0e9b      	lsrs	r3, r3, #26
 80020f2:	3301      	adds	r3, #1
 80020f4:	f003 021f 	and.w	r2, r3, #31
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	051b      	lsls	r3, r3, #20
 8002100:	e018      	b.n	8002134 <HAL_ADC_ConfigChannel+0x394>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002112:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800211a:	2320      	movs	r3, #32
 800211c:	e003      	b.n	8002126 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800211e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002120:	fab3 f383 	clz	r3, r3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	3301      	adds	r3, #1
 8002128:	f003 021f 	and.w	r2, r3, #31
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002134:	430b      	orrs	r3, r1
 8002136:	e07e      	b.n	8002236 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002140:	2b00      	cmp	r3, #0
 8002142:	d107      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x3b4>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0e9b      	lsrs	r3, r3, #26
 800214a:	3301      	adds	r3, #1
 800214c:	069b      	lsls	r3, r3, #26
 800214e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002152:	e015      	b.n	8002180 <HAL_ADC_ConfigChannel+0x3e0>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215c:	fa93 f3a3 	rbit	r3, r3
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800216c:	2320      	movs	r3, #32
 800216e:	e003      	b.n	8002178 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	3301      	adds	r3, #1
 800217a:	069b      	lsls	r3, r3, #26
 800217c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002188:	2b00      	cmp	r3, #0
 800218a:	d109      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x400>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	0e9b      	lsrs	r3, r3, #26
 8002192:	3301      	adds	r3, #1
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	2101      	movs	r1, #1
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	e017      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x430>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	fa93 f3a3 	rbit	r3, r3
 80021ac:	61bb      	str	r3, [r7, #24]
  return result;
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80021b8:	2320      	movs	r3, #32
 80021ba:	e003      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	3301      	adds	r3, #1
 80021c6:	f003 031f 	and.w	r3, r3, #31
 80021ca:	2101      	movs	r1, #1
 80021cc:	fa01 f303 	lsl.w	r3, r1, r3
 80021d0:	ea42 0103 	orr.w	r1, r2, r3
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10d      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x45c>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	0e9b      	lsrs	r3, r3, #26
 80021e6:	3301      	adds	r3, #1
 80021e8:	f003 021f 	and.w	r2, r3, #31
 80021ec:	4613      	mov	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4413      	add	r3, r2
 80021f2:	3b1e      	subs	r3, #30
 80021f4:	051b      	lsls	r3, r3, #20
 80021f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021fa:	e01b      	b.n	8002234 <HAL_ADC_ConfigChannel+0x494>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	60fb      	str	r3, [r7, #12]
  return result;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002214:	2320      	movs	r3, #32
 8002216:	e003      	b.n	8002220 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	3301      	adds	r3, #1
 8002222:	f003 021f 	and.w	r2, r3, #31
 8002226:	4613      	mov	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	4413      	add	r3, r2
 800222c:	3b1e      	subs	r3, #30
 800222e:	051b      	lsls	r3, r3, #20
 8002230:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002234:	430b      	orrs	r3, r1
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	6892      	ldr	r2, [r2, #8]
 800223a:	4619      	mov	r1, r3
 800223c:	f7ff fb7e 	bl	800193c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	da77      	bge.n	8002338 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002248:	4840      	ldr	r0, [pc, #256]	; (800234c <HAL_ADC_ConfigChannel+0x5ac>)
 800224a:	f7ff fae9 	bl	8001820 <LL_ADC_GetCommonPathInternalCh>
 800224e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002250:	483f      	ldr	r0, [pc, #252]	; (8002350 <HAL_ADC_ConfigChannel+0x5b0>)
 8002252:	f7ff fc11 	bl	8001a78 <LL_ADC_IsEnabled>
 8002256:	4604      	mov	r4, r0
 8002258:	483e      	ldr	r0, [pc, #248]	; (8002354 <HAL_ADC_ConfigChannel+0x5b4>)
 800225a:	f7ff fc0d 	bl	8001a78 <LL_ADC_IsEnabled>
 800225e:	4603      	mov	r3, r0
 8002260:	4323      	orrs	r3, r4
 8002262:	2b00      	cmp	r3, #0
 8002264:	d155      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a3b      	ldr	r2, [pc, #236]	; (8002358 <HAL_ADC_ConfigChannel+0x5b8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d122      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x516>
 8002270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002272:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d11d      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a35      	ldr	r2, [pc, #212]	; (8002354 <HAL_ADC_ConfigChannel+0x5b4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d159      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002286:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800228a:	4619      	mov	r1, r3
 800228c:	482f      	ldr	r0, [pc, #188]	; (800234c <HAL_ADC_ConfigChannel+0x5ac>)
 800228e:	f7ff fab4 	bl	80017fa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002292:	4b32      	ldr	r3, [pc, #200]	; (800235c <HAL_ADC_ConfigChannel+0x5bc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	099b      	lsrs	r3, r3, #6
 8002298:	4a31      	ldr	r2, [pc, #196]	; (8002360 <HAL_ADC_ConfigChannel+0x5c0>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	099b      	lsrs	r3, r3, #6
 80022a0:	3301      	adds	r3, #1
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80022a6:	e002      	b.n	80022ae <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f9      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022b4:	e040      	b.n	8002338 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a2a      	ldr	r2, [pc, #168]	; (8002364 <HAL_ADC_ConfigChannel+0x5c4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d111      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x544>
 80022c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10c      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a21      	ldr	r2, [pc, #132]	; (8002354 <HAL_ADC_ConfigChannel+0x5b4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d131      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80022d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022da:	4619      	mov	r1, r3
 80022dc:	481b      	ldr	r0, [pc, #108]	; (800234c <HAL_ADC_ConfigChannel+0x5ac>)
 80022de:	f7ff fa8c 	bl	80017fa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022e2:	e029      	b.n	8002338 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1f      	ldr	r2, [pc, #124]	; (8002368 <HAL_ADC_ConfigChannel+0x5c8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d124      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x598>
 80022ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d11f      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a15      	ldr	r2, [pc, #84]	; (8002354 <HAL_ADC_ConfigChannel+0x5b4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d11a      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002304:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002308:	4619      	mov	r1, r3
 800230a:	4810      	ldr	r0, [pc, #64]	; (800234c <HAL_ADC_ConfigChannel+0x5ac>)
 800230c:	f7ff fa75 	bl	80017fa <LL_ADC_SetCommonPathInternalCh>
 8002310:	e012      	b.n	8002338 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002316:	f043 0220 	orr.w	r2, r3, #32
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002324:	e008      	b.n	8002338 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232a:	f043 0220 	orr.w	r2, r3, #32
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002340:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002344:	4618      	mov	r0, r3
 8002346:	3784      	adds	r7, #132	; 0x84
 8002348:	46bd      	mov	sp, r7
 800234a:	bd90      	pop	{r4, r7, pc}
 800234c:	40022300 	.word	0x40022300
 8002350:	40022000 	.word	0x40022000
 8002354:	40022100 	.word	0x40022100
 8002358:	cb840000 	.word	0xcb840000
 800235c:	24000000 	.word	0x24000000
 8002360:	053e2d63 	.word	0x053e2d63
 8002364:	bac04000 	.word	0xbac04000
 8002368:	cfb80000 	.word	0xcfb80000

0800236c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002374:	4b60      	ldr	r3, [pc, #384]	; (80024f8 <ADC_ConfigureBoostMode+0x18c>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d01c      	beq.n	80023ba <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002380:	f004 fafa 	bl	8006978 <HAL_RCC_GetHCLKFreq>
 8002384:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800238e:	d010      	beq.n	80023b2 <ADC_ConfigureBoostMode+0x46>
 8002390:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002394:	d873      	bhi.n	800247e <ADC_ConfigureBoostMode+0x112>
 8002396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239a:	d002      	beq.n	80023a2 <ADC_ConfigureBoostMode+0x36>
 800239c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023a0:	d16d      	bne.n	800247e <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	0c1b      	lsrs	r3, r3, #16
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ae:	60fb      	str	r3, [r7, #12]
        break;
 80023b0:	e068      	b.n	8002484 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	60fb      	str	r3, [r7, #12]
        break;
 80023b8:	e064      	b.n	8002484 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80023ba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80023be:	f04f 0100 	mov.w	r1, #0
 80023c2:	f005 fcf3 	bl	8007dac <HAL_RCCEx_GetPeriphCLKFreq>
 80023c6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80023d0:	d051      	beq.n	8002476 <ADC_ConfigureBoostMode+0x10a>
 80023d2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80023d6:	d854      	bhi.n	8002482 <ADC_ConfigureBoostMode+0x116>
 80023d8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80023dc:	d047      	beq.n	800246e <ADC_ConfigureBoostMode+0x102>
 80023de:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80023e2:	d84e      	bhi.n	8002482 <ADC_ConfigureBoostMode+0x116>
 80023e4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80023e8:	d03d      	beq.n	8002466 <ADC_ConfigureBoostMode+0xfa>
 80023ea:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80023ee:	d848      	bhi.n	8002482 <ADC_ConfigureBoostMode+0x116>
 80023f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023f4:	d033      	beq.n	800245e <ADC_ConfigureBoostMode+0xf2>
 80023f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023fa:	d842      	bhi.n	8002482 <ADC_ConfigureBoostMode+0x116>
 80023fc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002400:	d029      	beq.n	8002456 <ADC_ConfigureBoostMode+0xea>
 8002402:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002406:	d83c      	bhi.n	8002482 <ADC_ConfigureBoostMode+0x116>
 8002408:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800240c:	d01a      	beq.n	8002444 <ADC_ConfigureBoostMode+0xd8>
 800240e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002412:	d836      	bhi.n	8002482 <ADC_ConfigureBoostMode+0x116>
 8002414:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002418:	d014      	beq.n	8002444 <ADC_ConfigureBoostMode+0xd8>
 800241a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800241e:	d830      	bhi.n	8002482 <ADC_ConfigureBoostMode+0x116>
 8002420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002424:	d00e      	beq.n	8002444 <ADC_ConfigureBoostMode+0xd8>
 8002426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800242a:	d82a      	bhi.n	8002482 <ADC_ConfigureBoostMode+0x116>
 800242c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002430:	d008      	beq.n	8002444 <ADC_ConfigureBoostMode+0xd8>
 8002432:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002436:	d824      	bhi.n	8002482 <ADC_ConfigureBoostMode+0x116>
 8002438:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800243c:	d002      	beq.n	8002444 <ADC_ConfigureBoostMode+0xd8>
 800243e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002442:	d11e      	bne.n	8002482 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	0c9b      	lsrs	r3, r3, #18
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002452:	60fb      	str	r3, [r7, #12]
        break;
 8002454:	e016      	b.n	8002484 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	60fb      	str	r3, [r7, #12]
        break;
 800245c:	e012      	b.n	8002484 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	095b      	lsrs	r3, r3, #5
 8002462:	60fb      	str	r3, [r7, #12]
        break;
 8002464:	e00e      	b.n	8002484 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	099b      	lsrs	r3, r3, #6
 800246a:	60fb      	str	r3, [r7, #12]
        break;
 800246c:	e00a      	b.n	8002484 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	09db      	lsrs	r3, r3, #7
 8002472:	60fb      	str	r3, [r7, #12]
        break;
 8002474:	e006      	b.n	8002484 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	60fb      	str	r3, [r7, #12]
        break;
 800247c:	e002      	b.n	8002484 <ADC_ConfigureBoostMode+0x118>
        break;
 800247e:	bf00      	nop
 8002480:	e000      	b.n	8002484 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002482:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	085b      	lsrs	r3, r3, #1
 8002488:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4a1b      	ldr	r2, [pc, #108]	; (80024fc <ADC_ConfigureBoostMode+0x190>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d808      	bhi.n	80024a4 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80024a0:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80024a2:	e025      	b.n	80024f0 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4a16      	ldr	r2, [pc, #88]	; (8002500 <ADC_ConfigureBoostMode+0x194>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d80a      	bhi.n	80024c2 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024be:	609a      	str	r2, [r3, #8]
}
 80024c0:	e016      	b.n	80024f0 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4a0f      	ldr	r2, [pc, #60]	; (8002504 <ADC_ConfigureBoostMode+0x198>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d80a      	bhi.n	80024e0 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024dc:	609a      	str	r2, [r3, #8]
}
 80024de:	e007      	b.n	80024f0 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80024ee:	609a      	str	r2, [r3, #8]
}
 80024f0:	bf00      	nop
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40022300 	.word	0x40022300
 80024fc:	005f5e10 	.word	0x005f5e10
 8002500:	00bebc20 	.word	0x00bebc20
 8002504:	017d7840 	.word	0x017d7840

08002508 <LL_ADC_IsEnabled>:
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <LL_ADC_IsEnabled+0x18>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <LL_ADC_IsEnabled+0x1a>
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <LL_ADC_REG_IsConversionOngoing>:
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b04      	cmp	r3, #4
 8002540:	d101      	bne.n	8002546 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b09f      	sub	sp, #124	; 0x7c
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800256e:	2302      	movs	r3, #2
 8002570:	e080      	b.n	8002674 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800257e:	2300      	movs	r3, #0
 8002580:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a3d      	ldr	r2, [pc, #244]	; (800267c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d102      	bne.n	8002592 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800258c:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	e001      	b.n	8002596 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10b      	bne.n	80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	f043 0220 	orr.w	r2, r3, #32
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e05f      	b.n	8002674 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ffb9 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 80025bc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff ffb3 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d141      	bne.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80025ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d13e      	bne.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025d4:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80025d6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d020      	beq.n	8002622 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80025e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	431a      	orrs	r2, r3
 80025ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025f2:	4822      	ldr	r0, [pc, #136]	; (800267c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80025f4:	f7ff ff88 	bl	8002508 <LL_ADC_IsEnabled>
 80025f8:	4604      	mov	r4, r0
 80025fa:	4821      	ldr	r0, [pc, #132]	; (8002680 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80025fc:	f7ff ff84 	bl	8002508 <LL_ADC_IsEnabled>
 8002600:	4603      	mov	r3, r0
 8002602:	4323      	orrs	r3, r4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d12e      	bne.n	8002666 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800260e:	4013      	ands	r3, r2
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	6811      	ldr	r1, [r2, #0]
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	6892      	ldr	r2, [r2, #8]
 8002618:	430a      	orrs	r2, r1
 800261a:	431a      	orrs	r2, r3
 800261c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002620:	e021      	b.n	8002666 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800262a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800262c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800262e:	4813      	ldr	r0, [pc, #76]	; (800267c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002630:	f7ff ff6a 	bl	8002508 <LL_ADC_IsEnabled>
 8002634:	4604      	mov	r4, r0
 8002636:	4812      	ldr	r0, [pc, #72]	; (8002680 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002638:	f7ff ff66 	bl	8002508 <LL_ADC_IsEnabled>
 800263c:	4603      	mov	r3, r0
 800263e:	4323      	orrs	r3, r4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d110      	bne.n	8002666 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800264a:	4013      	ands	r3, r2
 800264c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800264e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002650:	e009      	b.n	8002666 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002656:	f043 0220 	orr.w	r2, r3, #32
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002664:	e000      	b.n	8002668 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002666:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002670:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002674:	4618      	mov	r0, r3
 8002676:	377c      	adds	r7, #124	; 0x7c
 8002678:	46bd      	mov	sp, r7
 800267a:	bd90      	pop	{r4, r7, pc}
 800267c:	40022000 	.word	0x40022000
 8002680:	40022100 	.word	0x40022100
 8002684:	40022300 	.word	0x40022300
 8002688:	fffff0e0 	.word	0xfffff0e0

0800268c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <__NVIC_SetPriorityGrouping+0x40>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026a8:	4013      	ands	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <__NVIC_SetPriorityGrouping+0x44>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ba:	4a04      	ldr	r2, [pc, #16]	; (80026cc <__NVIC_SetPriorityGrouping+0x40>)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	60d3      	str	r3, [r2, #12]
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000ed00 	.word	0xe000ed00
 80026d0:	05fa0000 	.word	0x05fa0000

080026d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <__NVIC_GetPriorityGrouping+0x18>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	0a1b      	lsrs	r3, r3, #8
 80026de:	f003 0307 	and.w	r3, r3, #7
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	db0b      	blt.n	800271a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	f003 021f 	and.w	r2, r3, #31
 8002708:	4907      	ldr	r1, [pc, #28]	; (8002728 <__NVIC_EnableIRQ+0x38>)
 800270a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	2001      	movs	r0, #1
 8002712:	fa00 f202 	lsl.w	r2, r0, r2
 8002716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	e000e100 	.word	0xe000e100

0800272c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	6039      	str	r1, [r7, #0]
 8002736:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002738:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800273c:	2b00      	cmp	r3, #0
 800273e:	db0a      	blt.n	8002756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	b2da      	uxtb	r2, r3
 8002744:	490c      	ldr	r1, [pc, #48]	; (8002778 <__NVIC_SetPriority+0x4c>)
 8002746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800274a:	0112      	lsls	r2, r2, #4
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	440b      	add	r3, r1
 8002750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002754:	e00a      	b.n	800276c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4908      	ldr	r1, [pc, #32]	; (800277c <__NVIC_SetPriority+0x50>)
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	3b04      	subs	r3, #4
 8002764:	0112      	lsls	r2, r2, #4
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	440b      	add	r3, r1
 800276a:	761a      	strb	r2, [r3, #24]
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000e100 	.word	0xe000e100
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002780:	b480      	push	{r7}
 8002782:	b089      	sub	sp, #36	; 0x24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f1c3 0307 	rsb	r3, r3, #7
 800279a:	2b04      	cmp	r3, #4
 800279c:	bf28      	it	cs
 800279e:	2304      	movcs	r3, #4
 80027a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3304      	adds	r3, #4
 80027a6:	2b06      	cmp	r3, #6
 80027a8:	d902      	bls.n	80027b0 <NVIC_EncodePriority+0x30>
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3b03      	subs	r3, #3
 80027ae:	e000      	b.n	80027b2 <NVIC_EncodePriority+0x32>
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43da      	mvns	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	401a      	ands	r2, r3
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	43d9      	mvns	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	4313      	orrs	r3, r2
         );
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3724      	adds	r7, #36	; 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
	...

080027e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f8:	d301      	bcc.n	80027fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027fa:	2301      	movs	r3, #1
 80027fc:	e00f      	b.n	800281e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027fe:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <SysTick_Config+0x40>)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3b01      	subs	r3, #1
 8002804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002806:	210f      	movs	r1, #15
 8002808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800280c:	f7ff ff8e 	bl	800272c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <SysTick_Config+0x40>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002816:	4b04      	ldr	r3, [pc, #16]	; (8002828 <SysTick_Config+0x40>)
 8002818:	2207      	movs	r2, #7
 800281a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	e000e010 	.word	0xe000e010

0800282c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff ff29 	bl	800268c <__NVIC_SetPriorityGrouping>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b086      	sub	sp, #24
 8002846:	af00      	add	r7, sp, #0
 8002848:	4603      	mov	r3, r0
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	607a      	str	r2, [r7, #4]
 800284e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002850:	f7ff ff40 	bl	80026d4 <__NVIC_GetPriorityGrouping>
 8002854:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	6978      	ldr	r0, [r7, #20]
 800285c:	f7ff ff90 	bl	8002780 <NVIC_EncodePriority>
 8002860:	4602      	mov	r2, r0
 8002862:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ff5f 	bl	800272c <__NVIC_SetPriority>
}
 800286e:	bf00      	nop
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	4603      	mov	r3, r0
 800287e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002880:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff33 	bl	80026f0 <__NVIC_EnableIRQ>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ffa4 	bl	80027e8 <SysTick_Config>
 80028a0:	4603      	mov	r3, r0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80028b4:	f7fe ff82 	bl	80017bc <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e37f      	b.n	8002fc4 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a66      	ldr	r2, [pc, #408]	; (8002a64 <HAL_DMA_Init+0x1b8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d04a      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a65      	ldr	r2, [pc, #404]	; (8002a68 <HAL_DMA_Init+0x1bc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d045      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a63      	ldr	r2, [pc, #396]	; (8002a6c <HAL_DMA_Init+0x1c0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d040      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a62      	ldr	r2, [pc, #392]	; (8002a70 <HAL_DMA_Init+0x1c4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d03b      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a60      	ldr	r2, [pc, #384]	; (8002a74 <HAL_DMA_Init+0x1c8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d036      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a5f      	ldr	r2, [pc, #380]	; (8002a78 <HAL_DMA_Init+0x1cc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d031      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a5d      	ldr	r2, [pc, #372]	; (8002a7c <HAL_DMA_Init+0x1d0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d02c      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a5c      	ldr	r2, [pc, #368]	; (8002a80 <HAL_DMA_Init+0x1d4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d027      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a5a      	ldr	r2, [pc, #360]	; (8002a84 <HAL_DMA_Init+0x1d8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d022      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a59      	ldr	r2, [pc, #356]	; (8002a88 <HAL_DMA_Init+0x1dc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d01d      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a57      	ldr	r2, [pc, #348]	; (8002a8c <HAL_DMA_Init+0x1e0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d018      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a56      	ldr	r2, [pc, #344]	; (8002a90 <HAL_DMA_Init+0x1e4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d013      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a54      	ldr	r2, [pc, #336]	; (8002a94 <HAL_DMA_Init+0x1e8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00e      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a53      	ldr	r2, [pc, #332]	; (8002a98 <HAL_DMA_Init+0x1ec>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d009      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a51      	ldr	r2, [pc, #324]	; (8002a9c <HAL_DMA_Init+0x1f0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d004      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a50      	ldr	r2, [pc, #320]	; (8002aa0 <HAL_DMA_Init+0x1f4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d101      	bne.n	8002968 <HAL_DMA_Init+0xbc>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <HAL_DMA_Init+0xbe>
 8002968:	2300      	movs	r3, #0
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 813c 	beq.w	8002be8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a37      	ldr	r2, [pc, #220]	; (8002a64 <HAL_DMA_Init+0x1b8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d04a      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a36      	ldr	r2, [pc, #216]	; (8002a68 <HAL_DMA_Init+0x1bc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d045      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a34      	ldr	r2, [pc, #208]	; (8002a6c <HAL_DMA_Init+0x1c0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d040      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a33      	ldr	r2, [pc, #204]	; (8002a70 <HAL_DMA_Init+0x1c4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d03b      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a31      	ldr	r2, [pc, #196]	; (8002a74 <HAL_DMA_Init+0x1c8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d036      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a30      	ldr	r2, [pc, #192]	; (8002a78 <HAL_DMA_Init+0x1cc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d031      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a2e      	ldr	r2, [pc, #184]	; (8002a7c <HAL_DMA_Init+0x1d0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d02c      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a2d      	ldr	r2, [pc, #180]	; (8002a80 <HAL_DMA_Init+0x1d4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d027      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a2b      	ldr	r2, [pc, #172]	; (8002a84 <HAL_DMA_Init+0x1d8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d022      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a2a      	ldr	r2, [pc, #168]	; (8002a88 <HAL_DMA_Init+0x1dc>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d01d      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a28      	ldr	r2, [pc, #160]	; (8002a8c <HAL_DMA_Init+0x1e0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d018      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a27      	ldr	r2, [pc, #156]	; (8002a90 <HAL_DMA_Init+0x1e4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d013      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a25      	ldr	r2, [pc, #148]	; (8002a94 <HAL_DMA_Init+0x1e8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00e      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a24      	ldr	r2, [pc, #144]	; (8002a98 <HAL_DMA_Init+0x1ec>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d009      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a22      	ldr	r2, [pc, #136]	; (8002a9c <HAL_DMA_Init+0x1f0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d004      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a21      	ldr	r2, [pc, #132]	; (8002aa0 <HAL_DMA_Init+0x1f4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d108      	bne.n	8002a32 <HAL_DMA_Init+0x186>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	e007      	b.n	8002a42 <HAL_DMA_Init+0x196>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0201 	bic.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a42:	e02f      	b.n	8002aa4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a44:	f7fe feba 	bl	80017bc <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b05      	cmp	r3, #5
 8002a50:	d928      	bls.n	8002aa4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2220      	movs	r2, #32
 8002a56:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e2af      	b.n	8002fc4 <HAL_DMA_Init+0x718>
 8002a64:	40020010 	.word	0x40020010
 8002a68:	40020028 	.word	0x40020028
 8002a6c:	40020040 	.word	0x40020040
 8002a70:	40020058 	.word	0x40020058
 8002a74:	40020070 	.word	0x40020070
 8002a78:	40020088 	.word	0x40020088
 8002a7c:	400200a0 	.word	0x400200a0
 8002a80:	400200b8 	.word	0x400200b8
 8002a84:	40020410 	.word	0x40020410
 8002a88:	40020428 	.word	0x40020428
 8002a8c:	40020440 	.word	0x40020440
 8002a90:	40020458 	.word	0x40020458
 8002a94:	40020470 	.word	0x40020470
 8002a98:	40020488 	.word	0x40020488
 8002a9c:	400204a0 	.word	0x400204a0
 8002aa0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1c8      	bne.n	8002a44 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4b73      	ldr	r3, [pc, #460]	; (8002c8c <HAL_DMA_Init+0x3e0>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002aca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d107      	bne.n	8002b08 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	4313      	orrs	r3, r2
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b28      	cmp	r3, #40	; 0x28
 8002b0e:	d903      	bls.n	8002b18 <HAL_DMA_Init+0x26c>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b2e      	cmp	r3, #46	; 0x2e
 8002b16:	d91f      	bls.n	8002b58 <HAL_DMA_Init+0x2ac>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b3e      	cmp	r3, #62	; 0x3e
 8002b1e:	d903      	bls.n	8002b28 <HAL_DMA_Init+0x27c>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b42      	cmp	r3, #66	; 0x42
 8002b26:	d917      	bls.n	8002b58 <HAL_DMA_Init+0x2ac>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b46      	cmp	r3, #70	; 0x46
 8002b2e:	d903      	bls.n	8002b38 <HAL_DMA_Init+0x28c>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b48      	cmp	r3, #72	; 0x48
 8002b36:	d90f      	bls.n	8002b58 <HAL_DMA_Init+0x2ac>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b4e      	cmp	r3, #78	; 0x4e
 8002b3e:	d903      	bls.n	8002b48 <HAL_DMA_Init+0x29c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b52      	cmp	r3, #82	; 0x52
 8002b46:	d907      	bls.n	8002b58 <HAL_DMA_Init+0x2ac>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b73      	cmp	r3, #115	; 0x73
 8002b4e:	d905      	bls.n	8002b5c <HAL_DMA_Init+0x2b0>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b77      	cmp	r3, #119	; 0x77
 8002b56:	d801      	bhi.n	8002b5c <HAL_DMA_Init+0x2b0>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <HAL_DMA_Init+0x2b2>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b68:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f023 0307 	bic.w	r3, r3, #7
 8002b80:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d117      	bne.n	8002bc4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00e      	beq.n	8002bc4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f002 fbd6 	bl	8005358 <DMA_CheckFifoParam>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d008      	beq.n	8002bc4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2240      	movs	r2, #64	; 0x40
 8002bb6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e1ff      	b.n	8002fc4 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f002 fb11 	bl	80051f4 <DMA_CalcBaseAndBitshift>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bda:	f003 031f 	and.w	r3, r3, #31
 8002bde:	223f      	movs	r2, #63	; 0x3f
 8002be0:	409a      	lsls	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	e0fe      	b.n	8002de6 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a28      	ldr	r2, [pc, #160]	; (8002c90 <HAL_DMA_Init+0x3e4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d04a      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a27      	ldr	r2, [pc, #156]	; (8002c94 <HAL_DMA_Init+0x3e8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d045      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a25      	ldr	r2, [pc, #148]	; (8002c98 <HAL_DMA_Init+0x3ec>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d040      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a24      	ldr	r2, [pc, #144]	; (8002c9c <HAL_DMA_Init+0x3f0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d03b      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a22      	ldr	r2, [pc, #136]	; (8002ca0 <HAL_DMA_Init+0x3f4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d036      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a21      	ldr	r2, [pc, #132]	; (8002ca4 <HAL_DMA_Init+0x3f8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d031      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1f      	ldr	r2, [pc, #124]	; (8002ca8 <HAL_DMA_Init+0x3fc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d02c      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1e      	ldr	r2, [pc, #120]	; (8002cac <HAL_DMA_Init+0x400>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d027      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1c      	ldr	r2, [pc, #112]	; (8002cb0 <HAL_DMA_Init+0x404>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d022      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1b      	ldr	r2, [pc, #108]	; (8002cb4 <HAL_DMA_Init+0x408>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d01d      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a19      	ldr	r2, [pc, #100]	; (8002cb8 <HAL_DMA_Init+0x40c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d018      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a18      	ldr	r2, [pc, #96]	; (8002cbc <HAL_DMA_Init+0x410>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d013      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a16      	ldr	r2, [pc, #88]	; (8002cc0 <HAL_DMA_Init+0x414>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00e      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a15      	ldr	r2, [pc, #84]	; (8002cc4 <HAL_DMA_Init+0x418>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d009      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <HAL_DMA_Init+0x41c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d004      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <HAL_DMA_Init+0x420>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d123      	bne.n	8002cd0 <HAL_DMA_Init+0x424>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e022      	b.n	8002cd2 <HAL_DMA_Init+0x426>
 8002c8c:	fe10803f 	.word	0xfe10803f
 8002c90:	48022c08 	.word	0x48022c08
 8002c94:	48022c1c 	.word	0x48022c1c
 8002c98:	48022c30 	.word	0x48022c30
 8002c9c:	48022c44 	.word	0x48022c44
 8002ca0:	48022c58 	.word	0x48022c58
 8002ca4:	48022c6c 	.word	0x48022c6c
 8002ca8:	48022c80 	.word	0x48022c80
 8002cac:	48022c94 	.word	0x48022c94
 8002cb0:	58025408 	.word	0x58025408
 8002cb4:	5802541c 	.word	0x5802541c
 8002cb8:	58025430 	.word	0x58025430
 8002cbc:	58025444 	.word	0x58025444
 8002cc0:	58025458 	.word	0x58025458
 8002cc4:	5802546c 	.word	0x5802546c
 8002cc8:	58025480 	.word	0x58025480
 8002ccc:	58025494 	.word	0x58025494
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d07e      	beq.n	8002dd4 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a80      	ldr	r2, [pc, #512]	; (8002edc <HAL_DMA_Init+0x630>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d021      	beq.n	8002d24 <HAL_DMA_Init+0x478>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a7e      	ldr	r2, [pc, #504]	; (8002ee0 <HAL_DMA_Init+0x634>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01c      	beq.n	8002d24 <HAL_DMA_Init+0x478>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a7d      	ldr	r2, [pc, #500]	; (8002ee4 <HAL_DMA_Init+0x638>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d017      	beq.n	8002d24 <HAL_DMA_Init+0x478>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a7b      	ldr	r2, [pc, #492]	; (8002ee8 <HAL_DMA_Init+0x63c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d012      	beq.n	8002d24 <HAL_DMA_Init+0x478>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a7a      	ldr	r2, [pc, #488]	; (8002eec <HAL_DMA_Init+0x640>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00d      	beq.n	8002d24 <HAL_DMA_Init+0x478>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a78      	ldr	r2, [pc, #480]	; (8002ef0 <HAL_DMA_Init+0x644>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d008      	beq.n	8002d24 <HAL_DMA_Init+0x478>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a77      	ldr	r2, [pc, #476]	; (8002ef4 <HAL_DMA_Init+0x648>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d003      	beq.n	8002d24 <HAL_DMA_Init+0x478>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a75      	ldr	r2, [pc, #468]	; (8002ef8 <HAL_DMA_Init+0x64c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4b6e      	ldr	r3, [pc, #440]	; (8002efc <HAL_DMA_Init+0x650>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b40      	cmp	r3, #64	; 0x40
 8002d4c:	d008      	beq.n	8002d60 <HAL_DMA_Init+0x4b4>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b80      	cmp	r3, #128	; 0x80
 8002d54:	d102      	bne.n	8002d5c <HAL_DMA_Init+0x4b0>
 8002d56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d5a:	e002      	b.n	8002d62 <HAL_DMA_Init+0x4b6>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e000      	b.n	8002d62 <HAL_DMA_Init+0x4b6>
 8002d60:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68d2      	ldr	r2, [r2, #12]
 8002d66:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d90:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b56      	ldr	r3, [pc, #344]	; (8002f00 <HAL_DMA_Init+0x654>)
 8002da8:	4413      	add	r3, r2
 8002daa:	4a56      	ldr	r2, [pc, #344]	; (8002f04 <HAL_DMA_Init+0x658>)
 8002dac:	fba2 2303 	umull	r2, r3, r2, r3
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	009a      	lsls	r2, r3, #2
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f002 fa1b 	bl	80051f4 <DMA_CalcBaseAndBitshift>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	2201      	movs	r2, #1
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	e008      	b.n	8002de6 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2240      	movs	r2, #64	; 0x40
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2203      	movs	r2, #3
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0ee      	b.n	8002fc4 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a47      	ldr	r2, [pc, #284]	; (8002f08 <HAL_DMA_Init+0x65c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d072      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a45      	ldr	r2, [pc, #276]	; (8002f0c <HAL_DMA_Init+0x660>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d06d      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a44      	ldr	r2, [pc, #272]	; (8002f10 <HAL_DMA_Init+0x664>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d068      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a42      	ldr	r2, [pc, #264]	; (8002f14 <HAL_DMA_Init+0x668>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d063      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a41      	ldr	r2, [pc, #260]	; (8002f18 <HAL_DMA_Init+0x66c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d05e      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a3f      	ldr	r2, [pc, #252]	; (8002f1c <HAL_DMA_Init+0x670>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d059      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a3e      	ldr	r2, [pc, #248]	; (8002f20 <HAL_DMA_Init+0x674>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d054      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a3c      	ldr	r2, [pc, #240]	; (8002f24 <HAL_DMA_Init+0x678>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d04f      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a3b      	ldr	r2, [pc, #236]	; (8002f28 <HAL_DMA_Init+0x67c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d04a      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a39      	ldr	r2, [pc, #228]	; (8002f2c <HAL_DMA_Init+0x680>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d045      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a38      	ldr	r2, [pc, #224]	; (8002f30 <HAL_DMA_Init+0x684>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d040      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a36      	ldr	r2, [pc, #216]	; (8002f34 <HAL_DMA_Init+0x688>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d03b      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a35      	ldr	r2, [pc, #212]	; (8002f38 <HAL_DMA_Init+0x68c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d036      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a33      	ldr	r2, [pc, #204]	; (8002f3c <HAL_DMA_Init+0x690>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d031      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a32      	ldr	r2, [pc, #200]	; (8002f40 <HAL_DMA_Init+0x694>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d02c      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a30      	ldr	r2, [pc, #192]	; (8002f44 <HAL_DMA_Init+0x698>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d027      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a14      	ldr	r2, [pc, #80]	; (8002edc <HAL_DMA_Init+0x630>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d022      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <HAL_DMA_Init+0x634>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d01d      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a11      	ldr	r2, [pc, #68]	; (8002ee4 <HAL_DMA_Init+0x638>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d018      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0f      	ldr	r2, [pc, #60]	; (8002ee8 <HAL_DMA_Init+0x63c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d013      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a0e      	ldr	r2, [pc, #56]	; (8002eec <HAL_DMA_Init+0x640>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00e      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0c      	ldr	r2, [pc, #48]	; (8002ef0 <HAL_DMA_Init+0x644>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d009      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a0b      	ldr	r2, [pc, #44]	; (8002ef4 <HAL_DMA_Init+0x648>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d004      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a09      	ldr	r2, [pc, #36]	; (8002ef8 <HAL_DMA_Init+0x64c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d138      	bne.n	8002f48 <HAL_DMA_Init+0x69c>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e037      	b.n	8002f4a <HAL_DMA_Init+0x69e>
 8002eda:	bf00      	nop
 8002edc:	58025408 	.word	0x58025408
 8002ee0:	5802541c 	.word	0x5802541c
 8002ee4:	58025430 	.word	0x58025430
 8002ee8:	58025444 	.word	0x58025444
 8002eec:	58025458 	.word	0x58025458
 8002ef0:	5802546c 	.word	0x5802546c
 8002ef4:	58025480 	.word	0x58025480
 8002ef8:	58025494 	.word	0x58025494
 8002efc:	fffe000f 	.word	0xfffe000f
 8002f00:	a7fdabf8 	.word	0xa7fdabf8
 8002f04:	cccccccd 	.word	0xcccccccd
 8002f08:	40020010 	.word	0x40020010
 8002f0c:	40020028 	.word	0x40020028
 8002f10:	40020040 	.word	0x40020040
 8002f14:	40020058 	.word	0x40020058
 8002f18:	40020070 	.word	0x40020070
 8002f1c:	40020088 	.word	0x40020088
 8002f20:	400200a0 	.word	0x400200a0
 8002f24:	400200b8 	.word	0x400200b8
 8002f28:	40020410 	.word	0x40020410
 8002f2c:	40020428 	.word	0x40020428
 8002f30:	40020440 	.word	0x40020440
 8002f34:	40020458 	.word	0x40020458
 8002f38:	40020470 	.word	0x40020470
 8002f3c:	40020488 	.word	0x40020488
 8002f40:	400204a0 	.word	0x400204a0
 8002f44:	400204b8 	.word	0x400204b8
 8002f48:	2300      	movs	r3, #0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d032      	beq.n	8002fb4 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f002 fa7e 	bl	8005450 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b80      	cmp	r3, #128	; 0x80
 8002f5a:	d102      	bne.n	8002f62 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f76:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d010      	beq.n	8002fa2 <HAL_DMA_Init+0x6f6>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d80c      	bhi.n	8002fa2 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f002 fafb 	bl	8005584 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	e008      	b.n	8002fb4 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e226      	b.n	8003436 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_DMA_Start_IT+0x2a>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e21f      	b.n	8003436 <HAL_DMA_Start_IT+0x46a>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b01      	cmp	r3, #1
 8003008:	f040 820a 	bne.w	8003420 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a68      	ldr	r2, [pc, #416]	; (80031c0 <HAL_DMA_Start_IT+0x1f4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d04a      	beq.n	80030ba <HAL_DMA_Start_IT+0xee>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a66      	ldr	r2, [pc, #408]	; (80031c4 <HAL_DMA_Start_IT+0x1f8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d045      	beq.n	80030ba <HAL_DMA_Start_IT+0xee>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a65      	ldr	r2, [pc, #404]	; (80031c8 <HAL_DMA_Start_IT+0x1fc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d040      	beq.n	80030ba <HAL_DMA_Start_IT+0xee>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a63      	ldr	r2, [pc, #396]	; (80031cc <HAL_DMA_Start_IT+0x200>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d03b      	beq.n	80030ba <HAL_DMA_Start_IT+0xee>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a62      	ldr	r2, [pc, #392]	; (80031d0 <HAL_DMA_Start_IT+0x204>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d036      	beq.n	80030ba <HAL_DMA_Start_IT+0xee>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a60      	ldr	r2, [pc, #384]	; (80031d4 <HAL_DMA_Start_IT+0x208>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d031      	beq.n	80030ba <HAL_DMA_Start_IT+0xee>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a5f      	ldr	r2, [pc, #380]	; (80031d8 <HAL_DMA_Start_IT+0x20c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d02c      	beq.n	80030ba <HAL_DMA_Start_IT+0xee>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a5d      	ldr	r2, [pc, #372]	; (80031dc <HAL_DMA_Start_IT+0x210>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d027      	beq.n	80030ba <HAL_DMA_Start_IT+0xee>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a5c      	ldr	r2, [pc, #368]	; (80031e0 <HAL_DMA_Start_IT+0x214>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d022      	beq.n	80030ba <HAL_DMA_Start_IT+0xee>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a5a      	ldr	r2, [pc, #360]	; (80031e4 <HAL_DMA_Start_IT+0x218>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d01d      	beq.n	80030ba <HAL_DMA_Start_IT+0xee>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a59      	ldr	r2, [pc, #356]	; (80031e8 <HAL_DMA_Start_IT+0x21c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d018      	beq.n	80030ba <HAL_DMA_Start_IT+0xee>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a57      	ldr	r2, [pc, #348]	; (80031ec <HAL_DMA_Start_IT+0x220>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <HAL_DMA_Start_IT+0xee>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a56      	ldr	r2, [pc, #344]	; (80031f0 <HAL_DMA_Start_IT+0x224>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d00e      	beq.n	80030ba <HAL_DMA_Start_IT+0xee>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a54      	ldr	r2, [pc, #336]	; (80031f4 <HAL_DMA_Start_IT+0x228>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d009      	beq.n	80030ba <HAL_DMA_Start_IT+0xee>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a53      	ldr	r2, [pc, #332]	; (80031f8 <HAL_DMA_Start_IT+0x22c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d004      	beq.n	80030ba <HAL_DMA_Start_IT+0xee>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a51      	ldr	r2, [pc, #324]	; (80031fc <HAL_DMA_Start_IT+0x230>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d108      	bne.n	80030cc <HAL_DMA_Start_IT+0x100>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	e007      	b.n	80030dc <HAL_DMA_Start_IT+0x110>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0201 	bic.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f001 fea2 	bl	8004e2c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a34      	ldr	r2, [pc, #208]	; (80031c0 <HAL_DMA_Start_IT+0x1f4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d04a      	beq.n	8003188 <HAL_DMA_Start_IT+0x1bc>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a33      	ldr	r2, [pc, #204]	; (80031c4 <HAL_DMA_Start_IT+0x1f8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d045      	beq.n	8003188 <HAL_DMA_Start_IT+0x1bc>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a31      	ldr	r2, [pc, #196]	; (80031c8 <HAL_DMA_Start_IT+0x1fc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d040      	beq.n	8003188 <HAL_DMA_Start_IT+0x1bc>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a30      	ldr	r2, [pc, #192]	; (80031cc <HAL_DMA_Start_IT+0x200>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d03b      	beq.n	8003188 <HAL_DMA_Start_IT+0x1bc>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a2e      	ldr	r2, [pc, #184]	; (80031d0 <HAL_DMA_Start_IT+0x204>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d036      	beq.n	8003188 <HAL_DMA_Start_IT+0x1bc>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a2d      	ldr	r2, [pc, #180]	; (80031d4 <HAL_DMA_Start_IT+0x208>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d031      	beq.n	8003188 <HAL_DMA_Start_IT+0x1bc>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a2b      	ldr	r2, [pc, #172]	; (80031d8 <HAL_DMA_Start_IT+0x20c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d02c      	beq.n	8003188 <HAL_DMA_Start_IT+0x1bc>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a2a      	ldr	r2, [pc, #168]	; (80031dc <HAL_DMA_Start_IT+0x210>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d027      	beq.n	8003188 <HAL_DMA_Start_IT+0x1bc>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a28      	ldr	r2, [pc, #160]	; (80031e0 <HAL_DMA_Start_IT+0x214>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d022      	beq.n	8003188 <HAL_DMA_Start_IT+0x1bc>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a27      	ldr	r2, [pc, #156]	; (80031e4 <HAL_DMA_Start_IT+0x218>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d01d      	beq.n	8003188 <HAL_DMA_Start_IT+0x1bc>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a25      	ldr	r2, [pc, #148]	; (80031e8 <HAL_DMA_Start_IT+0x21c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d018      	beq.n	8003188 <HAL_DMA_Start_IT+0x1bc>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a24      	ldr	r2, [pc, #144]	; (80031ec <HAL_DMA_Start_IT+0x220>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d013      	beq.n	8003188 <HAL_DMA_Start_IT+0x1bc>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a22      	ldr	r2, [pc, #136]	; (80031f0 <HAL_DMA_Start_IT+0x224>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00e      	beq.n	8003188 <HAL_DMA_Start_IT+0x1bc>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a21      	ldr	r2, [pc, #132]	; (80031f4 <HAL_DMA_Start_IT+0x228>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d009      	beq.n	8003188 <HAL_DMA_Start_IT+0x1bc>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a1f      	ldr	r2, [pc, #124]	; (80031f8 <HAL_DMA_Start_IT+0x22c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d004      	beq.n	8003188 <HAL_DMA_Start_IT+0x1bc>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a1e      	ldr	r2, [pc, #120]	; (80031fc <HAL_DMA_Start_IT+0x230>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d101      	bne.n	800318c <HAL_DMA_Start_IT+0x1c0>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <HAL_DMA_Start_IT+0x1c2>
 800318c:	2300      	movs	r3, #0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d036      	beq.n	8003200 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f023 021e 	bic.w	r2, r3, #30
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0216 	orr.w	r2, r2, #22
 80031a4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d03e      	beq.n	800322c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 0208 	orr.w	r2, r2, #8
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	e035      	b.n	800322c <HAL_DMA_Start_IT+0x260>
 80031c0:	40020010 	.word	0x40020010
 80031c4:	40020028 	.word	0x40020028
 80031c8:	40020040 	.word	0x40020040
 80031cc:	40020058 	.word	0x40020058
 80031d0:	40020070 	.word	0x40020070
 80031d4:	40020088 	.word	0x40020088
 80031d8:	400200a0 	.word	0x400200a0
 80031dc:	400200b8 	.word	0x400200b8
 80031e0:	40020410 	.word	0x40020410
 80031e4:	40020428 	.word	0x40020428
 80031e8:	40020440 	.word	0x40020440
 80031ec:	40020458 	.word	0x40020458
 80031f0:	40020470 	.word	0x40020470
 80031f4:	40020488 	.word	0x40020488
 80031f8:	400204a0 	.word	0x400204a0
 80031fc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 020e 	bic.w	r2, r3, #14
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 020a 	orr.w	r2, r2, #10
 8003212:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	2b00      	cmp	r3, #0
 800321a:	d007      	beq.n	800322c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0204 	orr.w	r2, r2, #4
 800322a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a83      	ldr	r2, [pc, #524]	; (8003440 <HAL_DMA_Start_IT+0x474>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d072      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a82      	ldr	r2, [pc, #520]	; (8003444 <HAL_DMA_Start_IT+0x478>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d06d      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a80      	ldr	r2, [pc, #512]	; (8003448 <HAL_DMA_Start_IT+0x47c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d068      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a7f      	ldr	r2, [pc, #508]	; (800344c <HAL_DMA_Start_IT+0x480>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d063      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a7d      	ldr	r2, [pc, #500]	; (8003450 <HAL_DMA_Start_IT+0x484>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d05e      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a7c      	ldr	r2, [pc, #496]	; (8003454 <HAL_DMA_Start_IT+0x488>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d059      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a7a      	ldr	r2, [pc, #488]	; (8003458 <HAL_DMA_Start_IT+0x48c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d054      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a79      	ldr	r2, [pc, #484]	; (800345c <HAL_DMA_Start_IT+0x490>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d04f      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a77      	ldr	r2, [pc, #476]	; (8003460 <HAL_DMA_Start_IT+0x494>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d04a      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a76      	ldr	r2, [pc, #472]	; (8003464 <HAL_DMA_Start_IT+0x498>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d045      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a74      	ldr	r2, [pc, #464]	; (8003468 <HAL_DMA_Start_IT+0x49c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d040      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a73      	ldr	r2, [pc, #460]	; (800346c <HAL_DMA_Start_IT+0x4a0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d03b      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a71      	ldr	r2, [pc, #452]	; (8003470 <HAL_DMA_Start_IT+0x4a4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d036      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a70      	ldr	r2, [pc, #448]	; (8003474 <HAL_DMA_Start_IT+0x4a8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d031      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a6e      	ldr	r2, [pc, #440]	; (8003478 <HAL_DMA_Start_IT+0x4ac>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d02c      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a6d      	ldr	r2, [pc, #436]	; (800347c <HAL_DMA_Start_IT+0x4b0>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d027      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a6b      	ldr	r2, [pc, #428]	; (8003480 <HAL_DMA_Start_IT+0x4b4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d022      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a6a      	ldr	r2, [pc, #424]	; (8003484 <HAL_DMA_Start_IT+0x4b8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d01d      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a68      	ldr	r2, [pc, #416]	; (8003488 <HAL_DMA_Start_IT+0x4bc>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d018      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a67      	ldr	r2, [pc, #412]	; (800348c <HAL_DMA_Start_IT+0x4c0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d013      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a65      	ldr	r2, [pc, #404]	; (8003490 <HAL_DMA_Start_IT+0x4c4>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00e      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a64      	ldr	r2, [pc, #400]	; (8003494 <HAL_DMA_Start_IT+0x4c8>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d009      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a62      	ldr	r2, [pc, #392]	; (8003498 <HAL_DMA_Start_IT+0x4cc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d004      	beq.n	800331c <HAL_DMA_Start_IT+0x350>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a61      	ldr	r2, [pc, #388]	; (800349c <HAL_DMA_Start_IT+0x4d0>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d101      	bne.n	8003320 <HAL_DMA_Start_IT+0x354>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <HAL_DMA_Start_IT+0x356>
 8003320:	2300      	movs	r3, #0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d01a      	beq.n	800335c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d007      	beq.n	8003344 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800333e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003342:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d007      	beq.n	800335c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800335a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a37      	ldr	r2, [pc, #220]	; (8003440 <HAL_DMA_Start_IT+0x474>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d04a      	beq.n	80033fc <HAL_DMA_Start_IT+0x430>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a36      	ldr	r2, [pc, #216]	; (8003444 <HAL_DMA_Start_IT+0x478>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d045      	beq.n	80033fc <HAL_DMA_Start_IT+0x430>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a34      	ldr	r2, [pc, #208]	; (8003448 <HAL_DMA_Start_IT+0x47c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d040      	beq.n	80033fc <HAL_DMA_Start_IT+0x430>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a33      	ldr	r2, [pc, #204]	; (800344c <HAL_DMA_Start_IT+0x480>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d03b      	beq.n	80033fc <HAL_DMA_Start_IT+0x430>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a31      	ldr	r2, [pc, #196]	; (8003450 <HAL_DMA_Start_IT+0x484>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d036      	beq.n	80033fc <HAL_DMA_Start_IT+0x430>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a30      	ldr	r2, [pc, #192]	; (8003454 <HAL_DMA_Start_IT+0x488>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d031      	beq.n	80033fc <HAL_DMA_Start_IT+0x430>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a2e      	ldr	r2, [pc, #184]	; (8003458 <HAL_DMA_Start_IT+0x48c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d02c      	beq.n	80033fc <HAL_DMA_Start_IT+0x430>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a2d      	ldr	r2, [pc, #180]	; (800345c <HAL_DMA_Start_IT+0x490>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d027      	beq.n	80033fc <HAL_DMA_Start_IT+0x430>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a2b      	ldr	r2, [pc, #172]	; (8003460 <HAL_DMA_Start_IT+0x494>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d022      	beq.n	80033fc <HAL_DMA_Start_IT+0x430>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a2a      	ldr	r2, [pc, #168]	; (8003464 <HAL_DMA_Start_IT+0x498>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d01d      	beq.n	80033fc <HAL_DMA_Start_IT+0x430>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a28      	ldr	r2, [pc, #160]	; (8003468 <HAL_DMA_Start_IT+0x49c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d018      	beq.n	80033fc <HAL_DMA_Start_IT+0x430>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a27      	ldr	r2, [pc, #156]	; (800346c <HAL_DMA_Start_IT+0x4a0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d013      	beq.n	80033fc <HAL_DMA_Start_IT+0x430>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a25      	ldr	r2, [pc, #148]	; (8003470 <HAL_DMA_Start_IT+0x4a4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00e      	beq.n	80033fc <HAL_DMA_Start_IT+0x430>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a24      	ldr	r2, [pc, #144]	; (8003474 <HAL_DMA_Start_IT+0x4a8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d009      	beq.n	80033fc <HAL_DMA_Start_IT+0x430>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a22      	ldr	r2, [pc, #136]	; (8003478 <HAL_DMA_Start_IT+0x4ac>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d004      	beq.n	80033fc <HAL_DMA_Start_IT+0x430>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a21      	ldr	r2, [pc, #132]	; (800347c <HAL_DMA_Start_IT+0x4b0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d108      	bne.n	800340e <HAL_DMA_Start_IT+0x442>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	e012      	b.n	8003434 <HAL_DMA_Start_IT+0x468>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0201 	orr.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e009      	b.n	8003434 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003426:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003434:	7dfb      	ldrb	r3, [r7, #23]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40020010 	.word	0x40020010
 8003444:	40020028 	.word	0x40020028
 8003448:	40020040 	.word	0x40020040
 800344c:	40020058 	.word	0x40020058
 8003450:	40020070 	.word	0x40020070
 8003454:	40020088 	.word	0x40020088
 8003458:	400200a0 	.word	0x400200a0
 800345c:	400200b8 	.word	0x400200b8
 8003460:	40020410 	.word	0x40020410
 8003464:	40020428 	.word	0x40020428
 8003468:	40020440 	.word	0x40020440
 800346c:	40020458 	.word	0x40020458
 8003470:	40020470 	.word	0x40020470
 8003474:	40020488 	.word	0x40020488
 8003478:	400204a0 	.word	0x400204a0
 800347c:	400204b8 	.word	0x400204b8
 8003480:	58025408 	.word	0x58025408
 8003484:	5802541c 	.word	0x5802541c
 8003488:	58025430 	.word	0x58025430
 800348c:	58025444 	.word	0x58025444
 8003490:	58025458 	.word	0x58025458
 8003494:	5802546c 	.word	0x5802546c
 8003498:	58025480 	.word	0x58025480
 800349c:	58025494 	.word	0x58025494

080034a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80034a8:	f7fe f988 	bl	80017bc <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e2dc      	b.n	8003a72 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d008      	beq.n	80034d6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2280      	movs	r2, #128	; 0x80
 80034c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e2cd      	b.n	8003a72 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a76      	ldr	r2, [pc, #472]	; (80036b4 <HAL_DMA_Abort+0x214>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d04a      	beq.n	8003576 <HAL_DMA_Abort+0xd6>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a74      	ldr	r2, [pc, #464]	; (80036b8 <HAL_DMA_Abort+0x218>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d045      	beq.n	8003576 <HAL_DMA_Abort+0xd6>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a73      	ldr	r2, [pc, #460]	; (80036bc <HAL_DMA_Abort+0x21c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d040      	beq.n	8003576 <HAL_DMA_Abort+0xd6>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a71      	ldr	r2, [pc, #452]	; (80036c0 <HAL_DMA_Abort+0x220>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d03b      	beq.n	8003576 <HAL_DMA_Abort+0xd6>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a70      	ldr	r2, [pc, #448]	; (80036c4 <HAL_DMA_Abort+0x224>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d036      	beq.n	8003576 <HAL_DMA_Abort+0xd6>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a6e      	ldr	r2, [pc, #440]	; (80036c8 <HAL_DMA_Abort+0x228>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d031      	beq.n	8003576 <HAL_DMA_Abort+0xd6>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a6d      	ldr	r2, [pc, #436]	; (80036cc <HAL_DMA_Abort+0x22c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d02c      	beq.n	8003576 <HAL_DMA_Abort+0xd6>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a6b      	ldr	r2, [pc, #428]	; (80036d0 <HAL_DMA_Abort+0x230>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d027      	beq.n	8003576 <HAL_DMA_Abort+0xd6>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a6a      	ldr	r2, [pc, #424]	; (80036d4 <HAL_DMA_Abort+0x234>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d022      	beq.n	8003576 <HAL_DMA_Abort+0xd6>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a68      	ldr	r2, [pc, #416]	; (80036d8 <HAL_DMA_Abort+0x238>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d01d      	beq.n	8003576 <HAL_DMA_Abort+0xd6>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a67      	ldr	r2, [pc, #412]	; (80036dc <HAL_DMA_Abort+0x23c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d018      	beq.n	8003576 <HAL_DMA_Abort+0xd6>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a65      	ldr	r2, [pc, #404]	; (80036e0 <HAL_DMA_Abort+0x240>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d013      	beq.n	8003576 <HAL_DMA_Abort+0xd6>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a64      	ldr	r2, [pc, #400]	; (80036e4 <HAL_DMA_Abort+0x244>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00e      	beq.n	8003576 <HAL_DMA_Abort+0xd6>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a62      	ldr	r2, [pc, #392]	; (80036e8 <HAL_DMA_Abort+0x248>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d009      	beq.n	8003576 <HAL_DMA_Abort+0xd6>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a61      	ldr	r2, [pc, #388]	; (80036ec <HAL_DMA_Abort+0x24c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d004      	beq.n	8003576 <HAL_DMA_Abort+0xd6>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a5f      	ldr	r2, [pc, #380]	; (80036f0 <HAL_DMA_Abort+0x250>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d101      	bne.n	800357a <HAL_DMA_Abort+0xda>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <HAL_DMA_Abort+0xdc>
 800357a:	2300      	movs	r3, #0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d013      	beq.n	80035a8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 021e 	bic.w	r2, r2, #30
 800358e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800359e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	e00a      	b.n	80035be <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 020e 	bic.w	r2, r2, #14
 80035b6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a3c      	ldr	r2, [pc, #240]	; (80036b4 <HAL_DMA_Abort+0x214>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d072      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a3a      	ldr	r2, [pc, #232]	; (80036b8 <HAL_DMA_Abort+0x218>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d06d      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a39      	ldr	r2, [pc, #228]	; (80036bc <HAL_DMA_Abort+0x21c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d068      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a37      	ldr	r2, [pc, #220]	; (80036c0 <HAL_DMA_Abort+0x220>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d063      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a36      	ldr	r2, [pc, #216]	; (80036c4 <HAL_DMA_Abort+0x224>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d05e      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a34      	ldr	r2, [pc, #208]	; (80036c8 <HAL_DMA_Abort+0x228>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d059      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a33      	ldr	r2, [pc, #204]	; (80036cc <HAL_DMA_Abort+0x22c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d054      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a31      	ldr	r2, [pc, #196]	; (80036d0 <HAL_DMA_Abort+0x230>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d04f      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a30      	ldr	r2, [pc, #192]	; (80036d4 <HAL_DMA_Abort+0x234>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d04a      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a2e      	ldr	r2, [pc, #184]	; (80036d8 <HAL_DMA_Abort+0x238>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d045      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a2d      	ldr	r2, [pc, #180]	; (80036dc <HAL_DMA_Abort+0x23c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d040      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2b      	ldr	r2, [pc, #172]	; (80036e0 <HAL_DMA_Abort+0x240>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d03b      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a2a      	ldr	r2, [pc, #168]	; (80036e4 <HAL_DMA_Abort+0x244>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d036      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a28      	ldr	r2, [pc, #160]	; (80036e8 <HAL_DMA_Abort+0x248>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d031      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a27      	ldr	r2, [pc, #156]	; (80036ec <HAL_DMA_Abort+0x24c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d02c      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a25      	ldr	r2, [pc, #148]	; (80036f0 <HAL_DMA_Abort+0x250>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d027      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a24      	ldr	r2, [pc, #144]	; (80036f4 <HAL_DMA_Abort+0x254>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d022      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a22      	ldr	r2, [pc, #136]	; (80036f8 <HAL_DMA_Abort+0x258>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d01d      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a21      	ldr	r2, [pc, #132]	; (80036fc <HAL_DMA_Abort+0x25c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d018      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1f      	ldr	r2, [pc, #124]	; (8003700 <HAL_DMA_Abort+0x260>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d013      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1e      	ldr	r2, [pc, #120]	; (8003704 <HAL_DMA_Abort+0x264>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00e      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <HAL_DMA_Abort+0x268>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d009      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1b      	ldr	r2, [pc, #108]	; (800370c <HAL_DMA_Abort+0x26c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_DMA_Abort+0x20e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a19      	ldr	r2, [pc, #100]	; (8003710 <HAL_DMA_Abort+0x270>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d132      	bne.n	8003714 <HAL_DMA_Abort+0x274>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e031      	b.n	8003716 <HAL_DMA_Abort+0x276>
 80036b2:	bf00      	nop
 80036b4:	40020010 	.word	0x40020010
 80036b8:	40020028 	.word	0x40020028
 80036bc:	40020040 	.word	0x40020040
 80036c0:	40020058 	.word	0x40020058
 80036c4:	40020070 	.word	0x40020070
 80036c8:	40020088 	.word	0x40020088
 80036cc:	400200a0 	.word	0x400200a0
 80036d0:	400200b8 	.word	0x400200b8
 80036d4:	40020410 	.word	0x40020410
 80036d8:	40020428 	.word	0x40020428
 80036dc:	40020440 	.word	0x40020440
 80036e0:	40020458 	.word	0x40020458
 80036e4:	40020470 	.word	0x40020470
 80036e8:	40020488 	.word	0x40020488
 80036ec:	400204a0 	.word	0x400204a0
 80036f0:	400204b8 	.word	0x400204b8
 80036f4:	58025408 	.word	0x58025408
 80036f8:	5802541c 	.word	0x5802541c
 80036fc:	58025430 	.word	0x58025430
 8003700:	58025444 	.word	0x58025444
 8003704:	58025458 	.word	0x58025458
 8003708:	5802546c 	.word	0x5802546c
 800370c:	58025480 	.word	0x58025480
 8003710:	58025494 	.word	0x58025494
 8003714:	2300      	movs	r3, #0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d007      	beq.n	800372a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003724:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003728:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a6d      	ldr	r2, [pc, #436]	; (80038e4 <HAL_DMA_Abort+0x444>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d04a      	beq.n	80037ca <HAL_DMA_Abort+0x32a>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a6b      	ldr	r2, [pc, #428]	; (80038e8 <HAL_DMA_Abort+0x448>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d045      	beq.n	80037ca <HAL_DMA_Abort+0x32a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a6a      	ldr	r2, [pc, #424]	; (80038ec <HAL_DMA_Abort+0x44c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d040      	beq.n	80037ca <HAL_DMA_Abort+0x32a>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a68      	ldr	r2, [pc, #416]	; (80038f0 <HAL_DMA_Abort+0x450>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d03b      	beq.n	80037ca <HAL_DMA_Abort+0x32a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a67      	ldr	r2, [pc, #412]	; (80038f4 <HAL_DMA_Abort+0x454>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d036      	beq.n	80037ca <HAL_DMA_Abort+0x32a>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a65      	ldr	r2, [pc, #404]	; (80038f8 <HAL_DMA_Abort+0x458>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d031      	beq.n	80037ca <HAL_DMA_Abort+0x32a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a64      	ldr	r2, [pc, #400]	; (80038fc <HAL_DMA_Abort+0x45c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d02c      	beq.n	80037ca <HAL_DMA_Abort+0x32a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a62      	ldr	r2, [pc, #392]	; (8003900 <HAL_DMA_Abort+0x460>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d027      	beq.n	80037ca <HAL_DMA_Abort+0x32a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a61      	ldr	r2, [pc, #388]	; (8003904 <HAL_DMA_Abort+0x464>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d022      	beq.n	80037ca <HAL_DMA_Abort+0x32a>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a5f      	ldr	r2, [pc, #380]	; (8003908 <HAL_DMA_Abort+0x468>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d01d      	beq.n	80037ca <HAL_DMA_Abort+0x32a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a5e      	ldr	r2, [pc, #376]	; (800390c <HAL_DMA_Abort+0x46c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d018      	beq.n	80037ca <HAL_DMA_Abort+0x32a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a5c      	ldr	r2, [pc, #368]	; (8003910 <HAL_DMA_Abort+0x470>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d013      	beq.n	80037ca <HAL_DMA_Abort+0x32a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a5b      	ldr	r2, [pc, #364]	; (8003914 <HAL_DMA_Abort+0x474>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00e      	beq.n	80037ca <HAL_DMA_Abort+0x32a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a59      	ldr	r2, [pc, #356]	; (8003918 <HAL_DMA_Abort+0x478>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d009      	beq.n	80037ca <HAL_DMA_Abort+0x32a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a58      	ldr	r2, [pc, #352]	; (800391c <HAL_DMA_Abort+0x47c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d004      	beq.n	80037ca <HAL_DMA_Abort+0x32a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a56      	ldr	r2, [pc, #344]	; (8003920 <HAL_DMA_Abort+0x480>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d108      	bne.n	80037dc <HAL_DMA_Abort+0x33c>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0201 	bic.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	e007      	b.n	80037ec <HAL_DMA_Abort+0x34c>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0201 	bic.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80037ec:	e013      	b.n	8003816 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ee:	f7fd ffe5 	bl	80017bc <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b05      	cmp	r3, #5
 80037fa:	d90c      	bls.n	8003816 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2220      	movs	r2, #32
 8003800:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2203      	movs	r2, #3
 8003806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e12d      	b.n	8003a72 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1e5      	bne.n	80037ee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a2f      	ldr	r2, [pc, #188]	; (80038e4 <HAL_DMA_Abort+0x444>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d04a      	beq.n	80038c2 <HAL_DMA_Abort+0x422>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a2d      	ldr	r2, [pc, #180]	; (80038e8 <HAL_DMA_Abort+0x448>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d045      	beq.n	80038c2 <HAL_DMA_Abort+0x422>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a2c      	ldr	r2, [pc, #176]	; (80038ec <HAL_DMA_Abort+0x44c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d040      	beq.n	80038c2 <HAL_DMA_Abort+0x422>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a2a      	ldr	r2, [pc, #168]	; (80038f0 <HAL_DMA_Abort+0x450>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d03b      	beq.n	80038c2 <HAL_DMA_Abort+0x422>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a29      	ldr	r2, [pc, #164]	; (80038f4 <HAL_DMA_Abort+0x454>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d036      	beq.n	80038c2 <HAL_DMA_Abort+0x422>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a27      	ldr	r2, [pc, #156]	; (80038f8 <HAL_DMA_Abort+0x458>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d031      	beq.n	80038c2 <HAL_DMA_Abort+0x422>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a26      	ldr	r2, [pc, #152]	; (80038fc <HAL_DMA_Abort+0x45c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d02c      	beq.n	80038c2 <HAL_DMA_Abort+0x422>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a24      	ldr	r2, [pc, #144]	; (8003900 <HAL_DMA_Abort+0x460>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d027      	beq.n	80038c2 <HAL_DMA_Abort+0x422>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a23      	ldr	r2, [pc, #140]	; (8003904 <HAL_DMA_Abort+0x464>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d022      	beq.n	80038c2 <HAL_DMA_Abort+0x422>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a21      	ldr	r2, [pc, #132]	; (8003908 <HAL_DMA_Abort+0x468>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d01d      	beq.n	80038c2 <HAL_DMA_Abort+0x422>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a20      	ldr	r2, [pc, #128]	; (800390c <HAL_DMA_Abort+0x46c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d018      	beq.n	80038c2 <HAL_DMA_Abort+0x422>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <HAL_DMA_Abort+0x470>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <HAL_DMA_Abort+0x422>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <HAL_DMA_Abort+0x474>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00e      	beq.n	80038c2 <HAL_DMA_Abort+0x422>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a1b      	ldr	r2, [pc, #108]	; (8003918 <HAL_DMA_Abort+0x478>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d009      	beq.n	80038c2 <HAL_DMA_Abort+0x422>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1a      	ldr	r2, [pc, #104]	; (800391c <HAL_DMA_Abort+0x47c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d004      	beq.n	80038c2 <HAL_DMA_Abort+0x422>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a18      	ldr	r2, [pc, #96]	; (8003920 <HAL_DMA_Abort+0x480>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <HAL_DMA_Abort+0x426>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <HAL_DMA_Abort+0x428>
 80038c6:	2300      	movs	r3, #0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d02b      	beq.n	8003924 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	223f      	movs	r2, #63	; 0x3f
 80038dc:	409a      	lsls	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	609a      	str	r2, [r3, #8]
 80038e2:	e02a      	b.n	800393a <HAL_DMA_Abort+0x49a>
 80038e4:	40020010 	.word	0x40020010
 80038e8:	40020028 	.word	0x40020028
 80038ec:	40020040 	.word	0x40020040
 80038f0:	40020058 	.word	0x40020058
 80038f4:	40020070 	.word	0x40020070
 80038f8:	40020088 	.word	0x40020088
 80038fc:	400200a0 	.word	0x400200a0
 8003900:	400200b8 	.word	0x400200b8
 8003904:	40020410 	.word	0x40020410
 8003908:	40020428 	.word	0x40020428
 800390c:	40020440 	.word	0x40020440
 8003910:	40020458 	.word	0x40020458
 8003914:	40020470 	.word	0x40020470
 8003918:	40020488 	.word	0x40020488
 800391c:	400204a0 	.word	0x400204a0
 8003920:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003928:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	2201      	movs	r2, #1
 8003934:	409a      	lsls	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a4f      	ldr	r2, [pc, #316]	; (8003a7c <HAL_DMA_Abort+0x5dc>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d072      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a4d      	ldr	r2, [pc, #308]	; (8003a80 <HAL_DMA_Abort+0x5e0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d06d      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a4c      	ldr	r2, [pc, #304]	; (8003a84 <HAL_DMA_Abort+0x5e4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d068      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a4a      	ldr	r2, [pc, #296]	; (8003a88 <HAL_DMA_Abort+0x5e8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d063      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a49      	ldr	r2, [pc, #292]	; (8003a8c <HAL_DMA_Abort+0x5ec>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d05e      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a47      	ldr	r2, [pc, #284]	; (8003a90 <HAL_DMA_Abort+0x5f0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d059      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a46      	ldr	r2, [pc, #280]	; (8003a94 <HAL_DMA_Abort+0x5f4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d054      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a44      	ldr	r2, [pc, #272]	; (8003a98 <HAL_DMA_Abort+0x5f8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d04f      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a43      	ldr	r2, [pc, #268]	; (8003a9c <HAL_DMA_Abort+0x5fc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d04a      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a41      	ldr	r2, [pc, #260]	; (8003aa0 <HAL_DMA_Abort+0x600>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d045      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a40      	ldr	r2, [pc, #256]	; (8003aa4 <HAL_DMA_Abort+0x604>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d040      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a3e      	ldr	r2, [pc, #248]	; (8003aa8 <HAL_DMA_Abort+0x608>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d03b      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a3d      	ldr	r2, [pc, #244]	; (8003aac <HAL_DMA_Abort+0x60c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d036      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a3b      	ldr	r2, [pc, #236]	; (8003ab0 <HAL_DMA_Abort+0x610>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d031      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a3a      	ldr	r2, [pc, #232]	; (8003ab4 <HAL_DMA_Abort+0x614>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d02c      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a38      	ldr	r2, [pc, #224]	; (8003ab8 <HAL_DMA_Abort+0x618>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d027      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a37      	ldr	r2, [pc, #220]	; (8003abc <HAL_DMA_Abort+0x61c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d022      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a35      	ldr	r2, [pc, #212]	; (8003ac0 <HAL_DMA_Abort+0x620>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01d      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a34      	ldr	r2, [pc, #208]	; (8003ac4 <HAL_DMA_Abort+0x624>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d018      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a32      	ldr	r2, [pc, #200]	; (8003ac8 <HAL_DMA_Abort+0x628>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a31      	ldr	r2, [pc, #196]	; (8003acc <HAL_DMA_Abort+0x62c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00e      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a2f      	ldr	r2, [pc, #188]	; (8003ad0 <HAL_DMA_Abort+0x630>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d009      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a2e      	ldr	r2, [pc, #184]	; (8003ad4 <HAL_DMA_Abort+0x634>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d004      	beq.n	8003a2a <HAL_DMA_Abort+0x58a>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a2c      	ldr	r2, [pc, #176]	; (8003ad8 <HAL_DMA_Abort+0x638>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d101      	bne.n	8003a2e <HAL_DMA_Abort+0x58e>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_DMA_Abort+0x590>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d015      	beq.n	8003a60 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a3c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00c      	beq.n	8003a60 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a54:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a5e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40020010 	.word	0x40020010
 8003a80:	40020028 	.word	0x40020028
 8003a84:	40020040 	.word	0x40020040
 8003a88:	40020058 	.word	0x40020058
 8003a8c:	40020070 	.word	0x40020070
 8003a90:	40020088 	.word	0x40020088
 8003a94:	400200a0 	.word	0x400200a0
 8003a98:	400200b8 	.word	0x400200b8
 8003a9c:	40020410 	.word	0x40020410
 8003aa0:	40020428 	.word	0x40020428
 8003aa4:	40020440 	.word	0x40020440
 8003aa8:	40020458 	.word	0x40020458
 8003aac:	40020470 	.word	0x40020470
 8003ab0:	40020488 	.word	0x40020488
 8003ab4:	400204a0 	.word	0x400204a0
 8003ab8:	400204b8 	.word	0x400204b8
 8003abc:	58025408 	.word	0x58025408
 8003ac0:	5802541c 	.word	0x5802541c
 8003ac4:	58025430 	.word	0x58025430
 8003ac8:	58025444 	.word	0x58025444
 8003acc:	58025458 	.word	0x58025458
 8003ad0:	5802546c 	.word	0x5802546c
 8003ad4:	58025480 	.word	0x58025480
 8003ad8:	58025494 	.word	0x58025494

08003adc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e237      	b.n	8003f5e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d004      	beq.n	8003b04 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2280      	movs	r2, #128	; 0x80
 8003afe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e22c      	b.n	8003f5e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a5c      	ldr	r2, [pc, #368]	; (8003c7c <HAL_DMA_Abort_IT+0x1a0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d04a      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0xc8>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a5b      	ldr	r2, [pc, #364]	; (8003c80 <HAL_DMA_Abort_IT+0x1a4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d045      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0xc8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a59      	ldr	r2, [pc, #356]	; (8003c84 <HAL_DMA_Abort_IT+0x1a8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d040      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0xc8>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a58      	ldr	r2, [pc, #352]	; (8003c88 <HAL_DMA_Abort_IT+0x1ac>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d03b      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0xc8>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a56      	ldr	r2, [pc, #344]	; (8003c8c <HAL_DMA_Abort_IT+0x1b0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d036      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0xc8>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a55      	ldr	r2, [pc, #340]	; (8003c90 <HAL_DMA_Abort_IT+0x1b4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d031      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0xc8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a53      	ldr	r2, [pc, #332]	; (8003c94 <HAL_DMA_Abort_IT+0x1b8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d02c      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0xc8>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a52      	ldr	r2, [pc, #328]	; (8003c98 <HAL_DMA_Abort_IT+0x1bc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d027      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0xc8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a50      	ldr	r2, [pc, #320]	; (8003c9c <HAL_DMA_Abort_IT+0x1c0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d022      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0xc8>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a4f      	ldr	r2, [pc, #316]	; (8003ca0 <HAL_DMA_Abort_IT+0x1c4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d01d      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0xc8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a4d      	ldr	r2, [pc, #308]	; (8003ca4 <HAL_DMA_Abort_IT+0x1c8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d018      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0xc8>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a4c      	ldr	r2, [pc, #304]	; (8003ca8 <HAL_DMA_Abort_IT+0x1cc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d013      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0xc8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a4a      	ldr	r2, [pc, #296]	; (8003cac <HAL_DMA_Abort_IT+0x1d0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00e      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0xc8>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a49      	ldr	r2, [pc, #292]	; (8003cb0 <HAL_DMA_Abort_IT+0x1d4>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d009      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0xc8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a47      	ldr	r2, [pc, #284]	; (8003cb4 <HAL_DMA_Abort_IT+0x1d8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d004      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0xc8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a46      	ldr	r2, [pc, #280]	; (8003cb8 <HAL_DMA_Abort_IT+0x1dc>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d101      	bne.n	8003ba8 <HAL_DMA_Abort_IT+0xcc>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <HAL_DMA_Abort_IT+0xce>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 8086 	beq.w	8003cbc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a2f      	ldr	r2, [pc, #188]	; (8003c7c <HAL_DMA_Abort_IT+0x1a0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d04a      	beq.n	8003c58 <HAL_DMA_Abort_IT+0x17c>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2e      	ldr	r2, [pc, #184]	; (8003c80 <HAL_DMA_Abort_IT+0x1a4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d045      	beq.n	8003c58 <HAL_DMA_Abort_IT+0x17c>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a2c      	ldr	r2, [pc, #176]	; (8003c84 <HAL_DMA_Abort_IT+0x1a8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d040      	beq.n	8003c58 <HAL_DMA_Abort_IT+0x17c>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2b      	ldr	r2, [pc, #172]	; (8003c88 <HAL_DMA_Abort_IT+0x1ac>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d03b      	beq.n	8003c58 <HAL_DMA_Abort_IT+0x17c>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a29      	ldr	r2, [pc, #164]	; (8003c8c <HAL_DMA_Abort_IT+0x1b0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d036      	beq.n	8003c58 <HAL_DMA_Abort_IT+0x17c>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a28      	ldr	r2, [pc, #160]	; (8003c90 <HAL_DMA_Abort_IT+0x1b4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d031      	beq.n	8003c58 <HAL_DMA_Abort_IT+0x17c>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a26      	ldr	r2, [pc, #152]	; (8003c94 <HAL_DMA_Abort_IT+0x1b8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d02c      	beq.n	8003c58 <HAL_DMA_Abort_IT+0x17c>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a25      	ldr	r2, [pc, #148]	; (8003c98 <HAL_DMA_Abort_IT+0x1bc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d027      	beq.n	8003c58 <HAL_DMA_Abort_IT+0x17c>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a23      	ldr	r2, [pc, #140]	; (8003c9c <HAL_DMA_Abort_IT+0x1c0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d022      	beq.n	8003c58 <HAL_DMA_Abort_IT+0x17c>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a22      	ldr	r2, [pc, #136]	; (8003ca0 <HAL_DMA_Abort_IT+0x1c4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d01d      	beq.n	8003c58 <HAL_DMA_Abort_IT+0x17c>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a20      	ldr	r2, [pc, #128]	; (8003ca4 <HAL_DMA_Abort_IT+0x1c8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d018      	beq.n	8003c58 <HAL_DMA_Abort_IT+0x17c>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1f      	ldr	r2, [pc, #124]	; (8003ca8 <HAL_DMA_Abort_IT+0x1cc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d013      	beq.n	8003c58 <HAL_DMA_Abort_IT+0x17c>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1d      	ldr	r2, [pc, #116]	; (8003cac <HAL_DMA_Abort_IT+0x1d0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00e      	beq.n	8003c58 <HAL_DMA_Abort_IT+0x17c>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a1c      	ldr	r2, [pc, #112]	; (8003cb0 <HAL_DMA_Abort_IT+0x1d4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d009      	beq.n	8003c58 <HAL_DMA_Abort_IT+0x17c>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1a      	ldr	r2, [pc, #104]	; (8003cb4 <HAL_DMA_Abort_IT+0x1d8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <HAL_DMA_Abort_IT+0x17c>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a19      	ldr	r2, [pc, #100]	; (8003cb8 <HAL_DMA_Abort_IT+0x1dc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d108      	bne.n	8003c6a <HAL_DMA_Abort_IT+0x18e>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0201 	bic.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	e178      	b.n	8003f5c <HAL_DMA_Abort_IT+0x480>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0201 	bic.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	e16f      	b.n	8003f5c <HAL_DMA_Abort_IT+0x480>
 8003c7c:	40020010 	.word	0x40020010
 8003c80:	40020028 	.word	0x40020028
 8003c84:	40020040 	.word	0x40020040
 8003c88:	40020058 	.word	0x40020058
 8003c8c:	40020070 	.word	0x40020070
 8003c90:	40020088 	.word	0x40020088
 8003c94:	400200a0 	.word	0x400200a0
 8003c98:	400200b8 	.word	0x400200b8
 8003c9c:	40020410 	.word	0x40020410
 8003ca0:	40020428 	.word	0x40020428
 8003ca4:	40020440 	.word	0x40020440
 8003ca8:	40020458 	.word	0x40020458
 8003cac:	40020470 	.word	0x40020470
 8003cb0:	40020488 	.word	0x40020488
 8003cb4:	400204a0 	.word	0x400204a0
 8003cb8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 020e 	bic.w	r2, r2, #14
 8003cca:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a6c      	ldr	r2, [pc, #432]	; (8003e84 <HAL_DMA_Abort_IT+0x3a8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d04a      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x290>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a6b      	ldr	r2, [pc, #428]	; (8003e88 <HAL_DMA_Abort_IT+0x3ac>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d045      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x290>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a69      	ldr	r2, [pc, #420]	; (8003e8c <HAL_DMA_Abort_IT+0x3b0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d040      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x290>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a68      	ldr	r2, [pc, #416]	; (8003e90 <HAL_DMA_Abort_IT+0x3b4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d03b      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x290>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a66      	ldr	r2, [pc, #408]	; (8003e94 <HAL_DMA_Abort_IT+0x3b8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d036      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x290>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a65      	ldr	r2, [pc, #404]	; (8003e98 <HAL_DMA_Abort_IT+0x3bc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d031      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x290>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a63      	ldr	r2, [pc, #396]	; (8003e9c <HAL_DMA_Abort_IT+0x3c0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d02c      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x290>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a62      	ldr	r2, [pc, #392]	; (8003ea0 <HAL_DMA_Abort_IT+0x3c4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d027      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x290>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a60      	ldr	r2, [pc, #384]	; (8003ea4 <HAL_DMA_Abort_IT+0x3c8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d022      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x290>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a5f      	ldr	r2, [pc, #380]	; (8003ea8 <HAL_DMA_Abort_IT+0x3cc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d01d      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x290>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a5d      	ldr	r2, [pc, #372]	; (8003eac <HAL_DMA_Abort_IT+0x3d0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d018      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x290>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a5c      	ldr	r2, [pc, #368]	; (8003eb0 <HAL_DMA_Abort_IT+0x3d4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d013      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x290>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a5a      	ldr	r2, [pc, #360]	; (8003eb4 <HAL_DMA_Abort_IT+0x3d8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00e      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x290>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a59      	ldr	r2, [pc, #356]	; (8003eb8 <HAL_DMA_Abort_IT+0x3dc>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d009      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x290>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a57      	ldr	r2, [pc, #348]	; (8003ebc <HAL_DMA_Abort_IT+0x3e0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d004      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x290>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a56      	ldr	r2, [pc, #344]	; (8003ec0 <HAL_DMA_Abort_IT+0x3e4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d108      	bne.n	8003d7e <HAL_DMA_Abort_IT+0x2a2>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0201 	bic.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	e007      	b.n	8003d8e <HAL_DMA_Abort_IT+0x2b2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0201 	bic.w	r2, r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a3c      	ldr	r2, [pc, #240]	; (8003e84 <HAL_DMA_Abort_IT+0x3a8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d072      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a3a      	ldr	r2, [pc, #232]	; (8003e88 <HAL_DMA_Abort_IT+0x3ac>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d06d      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a39      	ldr	r2, [pc, #228]	; (8003e8c <HAL_DMA_Abort_IT+0x3b0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d068      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a37      	ldr	r2, [pc, #220]	; (8003e90 <HAL_DMA_Abort_IT+0x3b4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d063      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a36      	ldr	r2, [pc, #216]	; (8003e94 <HAL_DMA_Abort_IT+0x3b8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d05e      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a34      	ldr	r2, [pc, #208]	; (8003e98 <HAL_DMA_Abort_IT+0x3bc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d059      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a33      	ldr	r2, [pc, #204]	; (8003e9c <HAL_DMA_Abort_IT+0x3c0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d054      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a31      	ldr	r2, [pc, #196]	; (8003ea0 <HAL_DMA_Abort_IT+0x3c4>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d04f      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a30      	ldr	r2, [pc, #192]	; (8003ea4 <HAL_DMA_Abort_IT+0x3c8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d04a      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a2e      	ldr	r2, [pc, #184]	; (8003ea8 <HAL_DMA_Abort_IT+0x3cc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d045      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a2d      	ldr	r2, [pc, #180]	; (8003eac <HAL_DMA_Abort_IT+0x3d0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d040      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a2b      	ldr	r2, [pc, #172]	; (8003eb0 <HAL_DMA_Abort_IT+0x3d4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d03b      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a2a      	ldr	r2, [pc, #168]	; (8003eb4 <HAL_DMA_Abort_IT+0x3d8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d036      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a28      	ldr	r2, [pc, #160]	; (8003eb8 <HAL_DMA_Abort_IT+0x3dc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d031      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a27      	ldr	r2, [pc, #156]	; (8003ebc <HAL_DMA_Abort_IT+0x3e0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d02c      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a25      	ldr	r2, [pc, #148]	; (8003ec0 <HAL_DMA_Abort_IT+0x3e4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d027      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a24      	ldr	r2, [pc, #144]	; (8003ec4 <HAL_DMA_Abort_IT+0x3e8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d022      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a22      	ldr	r2, [pc, #136]	; (8003ec8 <HAL_DMA_Abort_IT+0x3ec>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d01d      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a21      	ldr	r2, [pc, #132]	; (8003ecc <HAL_DMA_Abort_IT+0x3f0>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d018      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1f      	ldr	r2, [pc, #124]	; (8003ed0 <HAL_DMA_Abort_IT+0x3f4>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d013      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1e      	ldr	r2, [pc, #120]	; (8003ed4 <HAL_DMA_Abort_IT+0x3f8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00e      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1c      	ldr	r2, [pc, #112]	; (8003ed8 <HAL_DMA_Abort_IT+0x3fc>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d009      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1b      	ldr	r2, [pc, #108]	; (8003edc <HAL_DMA_Abort_IT+0x400>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d004      	beq.n	8003e7e <HAL_DMA_Abort_IT+0x3a2>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <HAL_DMA_Abort_IT+0x404>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d132      	bne.n	8003ee4 <HAL_DMA_Abort_IT+0x408>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e031      	b.n	8003ee6 <HAL_DMA_Abort_IT+0x40a>
 8003e82:	bf00      	nop
 8003e84:	40020010 	.word	0x40020010
 8003e88:	40020028 	.word	0x40020028
 8003e8c:	40020040 	.word	0x40020040
 8003e90:	40020058 	.word	0x40020058
 8003e94:	40020070 	.word	0x40020070
 8003e98:	40020088 	.word	0x40020088
 8003e9c:	400200a0 	.word	0x400200a0
 8003ea0:	400200b8 	.word	0x400200b8
 8003ea4:	40020410 	.word	0x40020410
 8003ea8:	40020428 	.word	0x40020428
 8003eac:	40020440 	.word	0x40020440
 8003eb0:	40020458 	.word	0x40020458
 8003eb4:	40020470 	.word	0x40020470
 8003eb8:	40020488 	.word	0x40020488
 8003ebc:	400204a0 	.word	0x400204a0
 8003ec0:	400204b8 	.word	0x400204b8
 8003ec4:	58025408 	.word	0x58025408
 8003ec8:	5802541c 	.word	0x5802541c
 8003ecc:	58025430 	.word	0x58025430
 8003ed0:	58025444 	.word	0x58025444
 8003ed4:	58025458 	.word	0x58025458
 8003ed8:	5802546c 	.word	0x5802546c
 8003edc:	58025480 	.word	0x58025480
 8003ee0:	58025494 	.word	0x58025494
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d028      	beq.n	8003f3c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ef8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	2201      	movs	r2, #1
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f18:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00c      	beq.n	8003f3c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f30:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f3a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop

08003f68 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08a      	sub	sp, #40	; 0x28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f74:	4b67      	ldr	r3, [pc, #412]	; (8004114 <HAL_DMA_IRQHandler+0x1ac>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a67      	ldr	r2, [pc, #412]	; (8004118 <HAL_DMA_IRQHandler+0x1b0>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	0a9b      	lsrs	r3, r3, #10
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f86:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a5f      	ldr	r2, [pc, #380]	; (800411c <HAL_DMA_IRQHandler+0x1b4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d04a      	beq.n	800403a <HAL_DMA_IRQHandler+0xd2>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a5d      	ldr	r2, [pc, #372]	; (8004120 <HAL_DMA_IRQHandler+0x1b8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d045      	beq.n	800403a <HAL_DMA_IRQHandler+0xd2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a5c      	ldr	r2, [pc, #368]	; (8004124 <HAL_DMA_IRQHandler+0x1bc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d040      	beq.n	800403a <HAL_DMA_IRQHandler+0xd2>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a5a      	ldr	r2, [pc, #360]	; (8004128 <HAL_DMA_IRQHandler+0x1c0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d03b      	beq.n	800403a <HAL_DMA_IRQHandler+0xd2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a59      	ldr	r2, [pc, #356]	; (800412c <HAL_DMA_IRQHandler+0x1c4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d036      	beq.n	800403a <HAL_DMA_IRQHandler+0xd2>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a57      	ldr	r2, [pc, #348]	; (8004130 <HAL_DMA_IRQHandler+0x1c8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d031      	beq.n	800403a <HAL_DMA_IRQHandler+0xd2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a56      	ldr	r2, [pc, #344]	; (8004134 <HAL_DMA_IRQHandler+0x1cc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d02c      	beq.n	800403a <HAL_DMA_IRQHandler+0xd2>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a54      	ldr	r2, [pc, #336]	; (8004138 <HAL_DMA_IRQHandler+0x1d0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d027      	beq.n	800403a <HAL_DMA_IRQHandler+0xd2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a53      	ldr	r2, [pc, #332]	; (800413c <HAL_DMA_IRQHandler+0x1d4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d022      	beq.n	800403a <HAL_DMA_IRQHandler+0xd2>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a51      	ldr	r2, [pc, #324]	; (8004140 <HAL_DMA_IRQHandler+0x1d8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d01d      	beq.n	800403a <HAL_DMA_IRQHandler+0xd2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a50      	ldr	r2, [pc, #320]	; (8004144 <HAL_DMA_IRQHandler+0x1dc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d018      	beq.n	800403a <HAL_DMA_IRQHandler+0xd2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a4e      	ldr	r2, [pc, #312]	; (8004148 <HAL_DMA_IRQHandler+0x1e0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d013      	beq.n	800403a <HAL_DMA_IRQHandler+0xd2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a4d      	ldr	r2, [pc, #308]	; (800414c <HAL_DMA_IRQHandler+0x1e4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00e      	beq.n	800403a <HAL_DMA_IRQHandler+0xd2>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a4b      	ldr	r2, [pc, #300]	; (8004150 <HAL_DMA_IRQHandler+0x1e8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d009      	beq.n	800403a <HAL_DMA_IRQHandler+0xd2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a4a      	ldr	r2, [pc, #296]	; (8004154 <HAL_DMA_IRQHandler+0x1ec>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d004      	beq.n	800403a <HAL_DMA_IRQHandler+0xd2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a48      	ldr	r2, [pc, #288]	; (8004158 <HAL_DMA_IRQHandler+0x1f0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d101      	bne.n	800403e <HAL_DMA_IRQHandler+0xd6>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <HAL_DMA_IRQHandler+0xd8>
 800403e:	2300      	movs	r3, #0
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 842b 	beq.w	800489c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	2208      	movs	r2, #8
 8004050:	409a      	lsls	r2, r3
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	4013      	ands	r3, r2
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 80a2 	beq.w	80041a0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a2e      	ldr	r2, [pc, #184]	; (800411c <HAL_DMA_IRQHandler+0x1b4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d04a      	beq.n	80040fc <HAL_DMA_IRQHandler+0x194>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a2d      	ldr	r2, [pc, #180]	; (8004120 <HAL_DMA_IRQHandler+0x1b8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d045      	beq.n	80040fc <HAL_DMA_IRQHandler+0x194>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a2b      	ldr	r2, [pc, #172]	; (8004124 <HAL_DMA_IRQHandler+0x1bc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d040      	beq.n	80040fc <HAL_DMA_IRQHandler+0x194>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a2a      	ldr	r2, [pc, #168]	; (8004128 <HAL_DMA_IRQHandler+0x1c0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d03b      	beq.n	80040fc <HAL_DMA_IRQHandler+0x194>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a28      	ldr	r2, [pc, #160]	; (800412c <HAL_DMA_IRQHandler+0x1c4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d036      	beq.n	80040fc <HAL_DMA_IRQHandler+0x194>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a27      	ldr	r2, [pc, #156]	; (8004130 <HAL_DMA_IRQHandler+0x1c8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d031      	beq.n	80040fc <HAL_DMA_IRQHandler+0x194>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a25      	ldr	r2, [pc, #148]	; (8004134 <HAL_DMA_IRQHandler+0x1cc>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d02c      	beq.n	80040fc <HAL_DMA_IRQHandler+0x194>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a24      	ldr	r2, [pc, #144]	; (8004138 <HAL_DMA_IRQHandler+0x1d0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d027      	beq.n	80040fc <HAL_DMA_IRQHandler+0x194>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a22      	ldr	r2, [pc, #136]	; (800413c <HAL_DMA_IRQHandler+0x1d4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d022      	beq.n	80040fc <HAL_DMA_IRQHandler+0x194>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a21      	ldr	r2, [pc, #132]	; (8004140 <HAL_DMA_IRQHandler+0x1d8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d01d      	beq.n	80040fc <HAL_DMA_IRQHandler+0x194>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1f      	ldr	r2, [pc, #124]	; (8004144 <HAL_DMA_IRQHandler+0x1dc>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d018      	beq.n	80040fc <HAL_DMA_IRQHandler+0x194>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a1e      	ldr	r2, [pc, #120]	; (8004148 <HAL_DMA_IRQHandler+0x1e0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d013      	beq.n	80040fc <HAL_DMA_IRQHandler+0x194>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1c      	ldr	r2, [pc, #112]	; (800414c <HAL_DMA_IRQHandler+0x1e4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00e      	beq.n	80040fc <HAL_DMA_IRQHandler+0x194>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1b      	ldr	r2, [pc, #108]	; (8004150 <HAL_DMA_IRQHandler+0x1e8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d009      	beq.n	80040fc <HAL_DMA_IRQHandler+0x194>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a19      	ldr	r2, [pc, #100]	; (8004154 <HAL_DMA_IRQHandler+0x1ec>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d004      	beq.n	80040fc <HAL_DMA_IRQHandler+0x194>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a18      	ldr	r2, [pc, #96]	; (8004158 <HAL_DMA_IRQHandler+0x1f0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d12f      	bne.n	800415c <HAL_DMA_IRQHandler+0x1f4>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b00      	cmp	r3, #0
 8004108:	bf14      	ite	ne
 800410a:	2301      	movne	r3, #1
 800410c:	2300      	moveq	r3, #0
 800410e:	b2db      	uxtb	r3, r3
 8004110:	e02e      	b.n	8004170 <HAL_DMA_IRQHandler+0x208>
 8004112:	bf00      	nop
 8004114:	24000000 	.word	0x24000000
 8004118:	1b4e81b5 	.word	0x1b4e81b5
 800411c:	40020010 	.word	0x40020010
 8004120:	40020028 	.word	0x40020028
 8004124:	40020040 	.word	0x40020040
 8004128:	40020058 	.word	0x40020058
 800412c:	40020070 	.word	0x40020070
 8004130:	40020088 	.word	0x40020088
 8004134:	400200a0 	.word	0x400200a0
 8004138:	400200b8 	.word	0x400200b8
 800413c:	40020410 	.word	0x40020410
 8004140:	40020428 	.word	0x40020428
 8004144:	40020440 	.word	0x40020440
 8004148:	40020458 	.word	0x40020458
 800414c:	40020470 	.word	0x40020470
 8004150:	40020488 	.word	0x40020488
 8004154:	400204a0 	.word	0x400204a0
 8004158:	400204b8 	.word	0x400204b8
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	bf14      	ite	ne
 800416a:	2301      	movne	r3, #1
 800416c:	2300      	moveq	r3, #0
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d015      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0204 	bic.w	r2, r2, #4
 8004182:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	2208      	movs	r2, #8
 800418e:	409a      	lsls	r2, r3
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004198:	f043 0201 	orr.w	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	fa22 f303 	lsr.w	r3, r2, r3
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d06e      	beq.n	8004294 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a69      	ldr	r2, [pc, #420]	; (8004360 <HAL_DMA_IRQHandler+0x3f8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d04a      	beq.n	8004256 <HAL_DMA_IRQHandler+0x2ee>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a67      	ldr	r2, [pc, #412]	; (8004364 <HAL_DMA_IRQHandler+0x3fc>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d045      	beq.n	8004256 <HAL_DMA_IRQHandler+0x2ee>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a66      	ldr	r2, [pc, #408]	; (8004368 <HAL_DMA_IRQHandler+0x400>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d040      	beq.n	8004256 <HAL_DMA_IRQHandler+0x2ee>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a64      	ldr	r2, [pc, #400]	; (800436c <HAL_DMA_IRQHandler+0x404>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d03b      	beq.n	8004256 <HAL_DMA_IRQHandler+0x2ee>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a63      	ldr	r2, [pc, #396]	; (8004370 <HAL_DMA_IRQHandler+0x408>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d036      	beq.n	8004256 <HAL_DMA_IRQHandler+0x2ee>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a61      	ldr	r2, [pc, #388]	; (8004374 <HAL_DMA_IRQHandler+0x40c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d031      	beq.n	8004256 <HAL_DMA_IRQHandler+0x2ee>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a60      	ldr	r2, [pc, #384]	; (8004378 <HAL_DMA_IRQHandler+0x410>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d02c      	beq.n	8004256 <HAL_DMA_IRQHandler+0x2ee>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a5e      	ldr	r2, [pc, #376]	; (800437c <HAL_DMA_IRQHandler+0x414>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d027      	beq.n	8004256 <HAL_DMA_IRQHandler+0x2ee>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a5d      	ldr	r2, [pc, #372]	; (8004380 <HAL_DMA_IRQHandler+0x418>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d022      	beq.n	8004256 <HAL_DMA_IRQHandler+0x2ee>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a5b      	ldr	r2, [pc, #364]	; (8004384 <HAL_DMA_IRQHandler+0x41c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d01d      	beq.n	8004256 <HAL_DMA_IRQHandler+0x2ee>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a5a      	ldr	r2, [pc, #360]	; (8004388 <HAL_DMA_IRQHandler+0x420>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d018      	beq.n	8004256 <HAL_DMA_IRQHandler+0x2ee>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a58      	ldr	r2, [pc, #352]	; (800438c <HAL_DMA_IRQHandler+0x424>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <HAL_DMA_IRQHandler+0x2ee>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a57      	ldr	r2, [pc, #348]	; (8004390 <HAL_DMA_IRQHandler+0x428>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00e      	beq.n	8004256 <HAL_DMA_IRQHandler+0x2ee>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a55      	ldr	r2, [pc, #340]	; (8004394 <HAL_DMA_IRQHandler+0x42c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d009      	beq.n	8004256 <HAL_DMA_IRQHandler+0x2ee>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a54      	ldr	r2, [pc, #336]	; (8004398 <HAL_DMA_IRQHandler+0x430>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <HAL_DMA_IRQHandler+0x2ee>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a52      	ldr	r2, [pc, #328]	; (800439c <HAL_DMA_IRQHandler+0x434>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d10a      	bne.n	800426c <HAL_DMA_IRQHandler+0x304>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004260:	2b00      	cmp	r3, #0
 8004262:	bf14      	ite	ne
 8004264:	2301      	movne	r3, #1
 8004266:	2300      	moveq	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	e003      	b.n	8004274 <HAL_DMA_IRQHandler+0x30c>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2300      	movs	r3, #0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00d      	beq.n	8004294 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427c:	f003 031f 	and.w	r3, r3, #31
 8004280:	2201      	movs	r2, #1
 8004282:	409a      	lsls	r2, r3
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428c:	f043 0202 	orr.w	r2, r3, #2
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004298:	f003 031f 	and.w	r3, r3, #31
 800429c:	2204      	movs	r2, #4
 800429e:	409a      	lsls	r2, r3
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 808f 	beq.w	80043c8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a2c      	ldr	r2, [pc, #176]	; (8004360 <HAL_DMA_IRQHandler+0x3f8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d04a      	beq.n	800434a <HAL_DMA_IRQHandler+0x3e2>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a2a      	ldr	r2, [pc, #168]	; (8004364 <HAL_DMA_IRQHandler+0x3fc>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d045      	beq.n	800434a <HAL_DMA_IRQHandler+0x3e2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a29      	ldr	r2, [pc, #164]	; (8004368 <HAL_DMA_IRQHandler+0x400>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d040      	beq.n	800434a <HAL_DMA_IRQHandler+0x3e2>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a27      	ldr	r2, [pc, #156]	; (800436c <HAL_DMA_IRQHandler+0x404>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d03b      	beq.n	800434a <HAL_DMA_IRQHandler+0x3e2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a26      	ldr	r2, [pc, #152]	; (8004370 <HAL_DMA_IRQHandler+0x408>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d036      	beq.n	800434a <HAL_DMA_IRQHandler+0x3e2>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a24      	ldr	r2, [pc, #144]	; (8004374 <HAL_DMA_IRQHandler+0x40c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d031      	beq.n	800434a <HAL_DMA_IRQHandler+0x3e2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a23      	ldr	r2, [pc, #140]	; (8004378 <HAL_DMA_IRQHandler+0x410>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d02c      	beq.n	800434a <HAL_DMA_IRQHandler+0x3e2>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a21      	ldr	r2, [pc, #132]	; (800437c <HAL_DMA_IRQHandler+0x414>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d027      	beq.n	800434a <HAL_DMA_IRQHandler+0x3e2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a20      	ldr	r2, [pc, #128]	; (8004380 <HAL_DMA_IRQHandler+0x418>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d022      	beq.n	800434a <HAL_DMA_IRQHandler+0x3e2>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1e      	ldr	r2, [pc, #120]	; (8004384 <HAL_DMA_IRQHandler+0x41c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d01d      	beq.n	800434a <HAL_DMA_IRQHandler+0x3e2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1d      	ldr	r2, [pc, #116]	; (8004388 <HAL_DMA_IRQHandler+0x420>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d018      	beq.n	800434a <HAL_DMA_IRQHandler+0x3e2>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a1b      	ldr	r2, [pc, #108]	; (800438c <HAL_DMA_IRQHandler+0x424>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d013      	beq.n	800434a <HAL_DMA_IRQHandler+0x3e2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a1a      	ldr	r2, [pc, #104]	; (8004390 <HAL_DMA_IRQHandler+0x428>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d00e      	beq.n	800434a <HAL_DMA_IRQHandler+0x3e2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a18      	ldr	r2, [pc, #96]	; (8004394 <HAL_DMA_IRQHandler+0x42c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d009      	beq.n	800434a <HAL_DMA_IRQHandler+0x3e2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a17      	ldr	r2, [pc, #92]	; (8004398 <HAL_DMA_IRQHandler+0x430>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d004      	beq.n	800434a <HAL_DMA_IRQHandler+0x3e2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a15      	ldr	r2, [pc, #84]	; (800439c <HAL_DMA_IRQHandler+0x434>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d12a      	bne.n	80043a0 <HAL_DMA_IRQHandler+0x438>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	bf14      	ite	ne
 8004358:	2301      	movne	r3, #1
 800435a:	2300      	moveq	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	e023      	b.n	80043a8 <HAL_DMA_IRQHandler+0x440>
 8004360:	40020010 	.word	0x40020010
 8004364:	40020028 	.word	0x40020028
 8004368:	40020040 	.word	0x40020040
 800436c:	40020058 	.word	0x40020058
 8004370:	40020070 	.word	0x40020070
 8004374:	40020088 	.word	0x40020088
 8004378:	400200a0 	.word	0x400200a0
 800437c:	400200b8 	.word	0x400200b8
 8004380:	40020410 	.word	0x40020410
 8004384:	40020428 	.word	0x40020428
 8004388:	40020440 	.word	0x40020440
 800438c:	40020458 	.word	0x40020458
 8004390:	40020470 	.word	0x40020470
 8004394:	40020488 	.word	0x40020488
 8004398:	400204a0 	.word	0x400204a0
 800439c:	400204b8 	.word	0x400204b8
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2300      	movs	r3, #0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00d      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	2204      	movs	r2, #4
 80043b6:	409a      	lsls	r2, r3
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c0:	f043 0204 	orr.w	r2, r3, #4
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	2210      	movs	r2, #16
 80043d2:	409a      	lsls	r2, r3
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 80a6 	beq.w	800452a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a85      	ldr	r2, [pc, #532]	; (80045f8 <HAL_DMA_IRQHandler+0x690>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d04a      	beq.n	800447e <HAL_DMA_IRQHandler+0x516>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a83      	ldr	r2, [pc, #524]	; (80045fc <HAL_DMA_IRQHandler+0x694>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d045      	beq.n	800447e <HAL_DMA_IRQHandler+0x516>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a82      	ldr	r2, [pc, #520]	; (8004600 <HAL_DMA_IRQHandler+0x698>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d040      	beq.n	800447e <HAL_DMA_IRQHandler+0x516>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a80      	ldr	r2, [pc, #512]	; (8004604 <HAL_DMA_IRQHandler+0x69c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d03b      	beq.n	800447e <HAL_DMA_IRQHandler+0x516>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a7f      	ldr	r2, [pc, #508]	; (8004608 <HAL_DMA_IRQHandler+0x6a0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d036      	beq.n	800447e <HAL_DMA_IRQHandler+0x516>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a7d      	ldr	r2, [pc, #500]	; (800460c <HAL_DMA_IRQHandler+0x6a4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d031      	beq.n	800447e <HAL_DMA_IRQHandler+0x516>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a7c      	ldr	r2, [pc, #496]	; (8004610 <HAL_DMA_IRQHandler+0x6a8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d02c      	beq.n	800447e <HAL_DMA_IRQHandler+0x516>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a7a      	ldr	r2, [pc, #488]	; (8004614 <HAL_DMA_IRQHandler+0x6ac>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d027      	beq.n	800447e <HAL_DMA_IRQHandler+0x516>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a79      	ldr	r2, [pc, #484]	; (8004618 <HAL_DMA_IRQHandler+0x6b0>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d022      	beq.n	800447e <HAL_DMA_IRQHandler+0x516>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a77      	ldr	r2, [pc, #476]	; (800461c <HAL_DMA_IRQHandler+0x6b4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d01d      	beq.n	800447e <HAL_DMA_IRQHandler+0x516>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a76      	ldr	r2, [pc, #472]	; (8004620 <HAL_DMA_IRQHandler+0x6b8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d018      	beq.n	800447e <HAL_DMA_IRQHandler+0x516>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a74      	ldr	r2, [pc, #464]	; (8004624 <HAL_DMA_IRQHandler+0x6bc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d013      	beq.n	800447e <HAL_DMA_IRQHandler+0x516>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a73      	ldr	r2, [pc, #460]	; (8004628 <HAL_DMA_IRQHandler+0x6c0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00e      	beq.n	800447e <HAL_DMA_IRQHandler+0x516>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a71      	ldr	r2, [pc, #452]	; (800462c <HAL_DMA_IRQHandler+0x6c4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d009      	beq.n	800447e <HAL_DMA_IRQHandler+0x516>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a70      	ldr	r2, [pc, #448]	; (8004630 <HAL_DMA_IRQHandler+0x6c8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <HAL_DMA_IRQHandler+0x516>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a6e      	ldr	r2, [pc, #440]	; (8004634 <HAL_DMA_IRQHandler+0x6cc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d10a      	bne.n	8004494 <HAL_DMA_IRQHandler+0x52c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	bf14      	ite	ne
 800448c:	2301      	movne	r3, #1
 800448e:	2300      	moveq	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	e009      	b.n	80044a8 <HAL_DMA_IRQHandler+0x540>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	bf14      	ite	ne
 80044a2:	2301      	movne	r3, #1
 80044a4:	2300      	moveq	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d03e      	beq.n	800452a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	2210      	movs	r2, #16
 80044b6:	409a      	lsls	r2, r3
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d018      	beq.n	80044fc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d108      	bne.n	80044ea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d024      	beq.n	800452a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	4798      	blx	r3
 80044e8:	e01f      	b.n	800452a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d01b      	beq.n	800452a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	4798      	blx	r3
 80044fa:	e016      	b.n	800452a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004506:	2b00      	cmp	r3, #0
 8004508:	d107      	bne.n	800451a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0208 	bic.w	r2, r2, #8
 8004518:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452e:	f003 031f 	and.w	r3, r3, #31
 8004532:	2220      	movs	r2, #32
 8004534:	409a      	lsls	r2, r3
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	4013      	ands	r3, r2
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 8110 	beq.w	8004760 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a2c      	ldr	r2, [pc, #176]	; (80045f8 <HAL_DMA_IRQHandler+0x690>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d04a      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x678>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a2b      	ldr	r2, [pc, #172]	; (80045fc <HAL_DMA_IRQHandler+0x694>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d045      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x678>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a29      	ldr	r2, [pc, #164]	; (8004600 <HAL_DMA_IRQHandler+0x698>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d040      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x678>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a28      	ldr	r2, [pc, #160]	; (8004604 <HAL_DMA_IRQHandler+0x69c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d03b      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x678>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a26      	ldr	r2, [pc, #152]	; (8004608 <HAL_DMA_IRQHandler+0x6a0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d036      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x678>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a25      	ldr	r2, [pc, #148]	; (800460c <HAL_DMA_IRQHandler+0x6a4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d031      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x678>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a23      	ldr	r2, [pc, #140]	; (8004610 <HAL_DMA_IRQHandler+0x6a8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d02c      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x678>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a22      	ldr	r2, [pc, #136]	; (8004614 <HAL_DMA_IRQHandler+0x6ac>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d027      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x678>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a20      	ldr	r2, [pc, #128]	; (8004618 <HAL_DMA_IRQHandler+0x6b0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d022      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x678>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1f      	ldr	r2, [pc, #124]	; (800461c <HAL_DMA_IRQHandler+0x6b4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d01d      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x678>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a1d      	ldr	r2, [pc, #116]	; (8004620 <HAL_DMA_IRQHandler+0x6b8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d018      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x678>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a1c      	ldr	r2, [pc, #112]	; (8004624 <HAL_DMA_IRQHandler+0x6bc>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d013      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x678>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1a      	ldr	r2, [pc, #104]	; (8004628 <HAL_DMA_IRQHandler+0x6c0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00e      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x678>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a19      	ldr	r2, [pc, #100]	; (800462c <HAL_DMA_IRQHandler+0x6c4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d009      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x678>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a17      	ldr	r2, [pc, #92]	; (8004630 <HAL_DMA_IRQHandler+0x6c8>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d004      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x678>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a16      	ldr	r2, [pc, #88]	; (8004634 <HAL_DMA_IRQHandler+0x6cc>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d12b      	bne.n	8004638 <HAL_DMA_IRQHandler+0x6d0>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	bf14      	ite	ne
 80045ee:	2301      	movne	r3, #1
 80045f0:	2300      	moveq	r3, #0
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	e02a      	b.n	800464c <HAL_DMA_IRQHandler+0x6e4>
 80045f6:	bf00      	nop
 80045f8:	40020010 	.word	0x40020010
 80045fc:	40020028 	.word	0x40020028
 8004600:	40020040 	.word	0x40020040
 8004604:	40020058 	.word	0x40020058
 8004608:	40020070 	.word	0x40020070
 800460c:	40020088 	.word	0x40020088
 8004610:	400200a0 	.word	0x400200a0
 8004614:	400200b8 	.word	0x400200b8
 8004618:	40020410 	.word	0x40020410
 800461c:	40020428 	.word	0x40020428
 8004620:	40020440 	.word	0x40020440
 8004624:	40020458 	.word	0x40020458
 8004628:	40020470 	.word	0x40020470
 800462c:	40020488 	.word	0x40020488
 8004630:	400204a0 	.word	0x400204a0
 8004634:	400204b8 	.word	0x400204b8
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	bf14      	ite	ne
 8004646:	2301      	movne	r3, #1
 8004648:	2300      	moveq	r3, #0
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 8087 	beq.w	8004760 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004656:	f003 031f 	and.w	r3, r3, #31
 800465a:	2220      	movs	r2, #32
 800465c:	409a      	lsls	r2, r3
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b04      	cmp	r3, #4
 800466c:	d139      	bne.n	80046e2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0216 	bic.w	r2, r2, #22
 800467c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695a      	ldr	r2, [r3, #20]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800468c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	2b00      	cmp	r3, #0
 8004694:	d103      	bne.n	800469e <HAL_DMA_IRQHandler+0x736>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0208 	bic.w	r2, r2, #8
 80046ac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b2:	f003 031f 	and.w	r3, r3, #31
 80046b6:	223f      	movs	r2, #63	; 0x3f
 80046b8:	409a      	lsls	r2, r3
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 8382 	beq.w	8004ddc <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	4798      	blx	r3
          }
          return;
 80046e0:	e37c      	b.n	8004ddc <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d018      	beq.n	8004722 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d108      	bne.n	8004710 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	2b00      	cmp	r3, #0
 8004704:	d02c      	beq.n	8004760 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	4798      	blx	r3
 800470e:	e027      	b.n	8004760 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004714:	2b00      	cmp	r3, #0
 8004716:	d023      	beq.n	8004760 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	4798      	blx	r3
 8004720:	e01e      	b.n	8004760 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10f      	bne.n	8004750 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0210 	bic.w	r2, r2, #16
 800473e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 833e 	beq.w	8004de6 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 8088 	beq.w	8004888 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2204      	movs	r2, #4
 800477c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a89      	ldr	r2, [pc, #548]	; (80049ac <HAL_DMA_IRQHandler+0xa44>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d04a      	beq.n	8004820 <HAL_DMA_IRQHandler+0x8b8>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a88      	ldr	r2, [pc, #544]	; (80049b0 <HAL_DMA_IRQHandler+0xa48>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d045      	beq.n	8004820 <HAL_DMA_IRQHandler+0x8b8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a86      	ldr	r2, [pc, #536]	; (80049b4 <HAL_DMA_IRQHandler+0xa4c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d040      	beq.n	8004820 <HAL_DMA_IRQHandler+0x8b8>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a85      	ldr	r2, [pc, #532]	; (80049b8 <HAL_DMA_IRQHandler+0xa50>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d03b      	beq.n	8004820 <HAL_DMA_IRQHandler+0x8b8>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a83      	ldr	r2, [pc, #524]	; (80049bc <HAL_DMA_IRQHandler+0xa54>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d036      	beq.n	8004820 <HAL_DMA_IRQHandler+0x8b8>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a82      	ldr	r2, [pc, #520]	; (80049c0 <HAL_DMA_IRQHandler+0xa58>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d031      	beq.n	8004820 <HAL_DMA_IRQHandler+0x8b8>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a80      	ldr	r2, [pc, #512]	; (80049c4 <HAL_DMA_IRQHandler+0xa5c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d02c      	beq.n	8004820 <HAL_DMA_IRQHandler+0x8b8>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a7f      	ldr	r2, [pc, #508]	; (80049c8 <HAL_DMA_IRQHandler+0xa60>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d027      	beq.n	8004820 <HAL_DMA_IRQHandler+0x8b8>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a7d      	ldr	r2, [pc, #500]	; (80049cc <HAL_DMA_IRQHandler+0xa64>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d022      	beq.n	8004820 <HAL_DMA_IRQHandler+0x8b8>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a7c      	ldr	r2, [pc, #496]	; (80049d0 <HAL_DMA_IRQHandler+0xa68>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d01d      	beq.n	8004820 <HAL_DMA_IRQHandler+0x8b8>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a7a      	ldr	r2, [pc, #488]	; (80049d4 <HAL_DMA_IRQHandler+0xa6c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d018      	beq.n	8004820 <HAL_DMA_IRQHandler+0x8b8>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a79      	ldr	r2, [pc, #484]	; (80049d8 <HAL_DMA_IRQHandler+0xa70>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d013      	beq.n	8004820 <HAL_DMA_IRQHandler+0x8b8>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a77      	ldr	r2, [pc, #476]	; (80049dc <HAL_DMA_IRQHandler+0xa74>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00e      	beq.n	8004820 <HAL_DMA_IRQHandler+0x8b8>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a76      	ldr	r2, [pc, #472]	; (80049e0 <HAL_DMA_IRQHandler+0xa78>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d009      	beq.n	8004820 <HAL_DMA_IRQHandler+0x8b8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a74      	ldr	r2, [pc, #464]	; (80049e4 <HAL_DMA_IRQHandler+0xa7c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d004      	beq.n	8004820 <HAL_DMA_IRQHandler+0x8b8>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a73      	ldr	r2, [pc, #460]	; (80049e8 <HAL_DMA_IRQHandler+0xa80>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d108      	bne.n	8004832 <HAL_DMA_IRQHandler+0x8ca>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0201 	bic.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e007      	b.n	8004842 <HAL_DMA_IRQHandler+0x8da>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0201 	bic.w	r2, r2, #1
 8004840:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3301      	adds	r3, #1
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484a:	429a      	cmp	r2, r3
 800484c:	d307      	bcc.n	800485e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1f2      	bne.n	8004842 <HAL_DMA_IRQHandler+0x8da>
 800485c:	e000      	b.n	8004860 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800485e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2203      	movs	r2, #3
 8004872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004876:	e003      	b.n	8004880 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 82aa 	beq.w	8004de6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	4798      	blx	r3
 800489a:	e2a4      	b.n	8004de6 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a52      	ldr	r2, [pc, #328]	; (80049ec <HAL_DMA_IRQHandler+0xa84>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d04a      	beq.n	800493c <HAL_DMA_IRQHandler+0x9d4>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a51      	ldr	r2, [pc, #324]	; (80049f0 <HAL_DMA_IRQHandler+0xa88>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d045      	beq.n	800493c <HAL_DMA_IRQHandler+0x9d4>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a4f      	ldr	r2, [pc, #316]	; (80049f4 <HAL_DMA_IRQHandler+0xa8c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d040      	beq.n	800493c <HAL_DMA_IRQHandler+0x9d4>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a4e      	ldr	r2, [pc, #312]	; (80049f8 <HAL_DMA_IRQHandler+0xa90>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d03b      	beq.n	800493c <HAL_DMA_IRQHandler+0x9d4>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a4c      	ldr	r2, [pc, #304]	; (80049fc <HAL_DMA_IRQHandler+0xa94>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d036      	beq.n	800493c <HAL_DMA_IRQHandler+0x9d4>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a4b      	ldr	r2, [pc, #300]	; (8004a00 <HAL_DMA_IRQHandler+0xa98>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d031      	beq.n	800493c <HAL_DMA_IRQHandler+0x9d4>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a49      	ldr	r2, [pc, #292]	; (8004a04 <HAL_DMA_IRQHandler+0xa9c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d02c      	beq.n	800493c <HAL_DMA_IRQHandler+0x9d4>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a48      	ldr	r2, [pc, #288]	; (8004a08 <HAL_DMA_IRQHandler+0xaa0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d027      	beq.n	800493c <HAL_DMA_IRQHandler+0x9d4>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a46      	ldr	r2, [pc, #280]	; (8004a0c <HAL_DMA_IRQHandler+0xaa4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d022      	beq.n	800493c <HAL_DMA_IRQHandler+0x9d4>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a45      	ldr	r2, [pc, #276]	; (8004a10 <HAL_DMA_IRQHandler+0xaa8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d01d      	beq.n	800493c <HAL_DMA_IRQHandler+0x9d4>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a43      	ldr	r2, [pc, #268]	; (8004a14 <HAL_DMA_IRQHandler+0xaac>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d018      	beq.n	800493c <HAL_DMA_IRQHandler+0x9d4>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a42      	ldr	r2, [pc, #264]	; (8004a18 <HAL_DMA_IRQHandler+0xab0>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d013      	beq.n	800493c <HAL_DMA_IRQHandler+0x9d4>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a40      	ldr	r2, [pc, #256]	; (8004a1c <HAL_DMA_IRQHandler+0xab4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00e      	beq.n	800493c <HAL_DMA_IRQHandler+0x9d4>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a3f      	ldr	r2, [pc, #252]	; (8004a20 <HAL_DMA_IRQHandler+0xab8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d009      	beq.n	800493c <HAL_DMA_IRQHandler+0x9d4>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a3d      	ldr	r2, [pc, #244]	; (8004a24 <HAL_DMA_IRQHandler+0xabc>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d004      	beq.n	800493c <HAL_DMA_IRQHandler+0x9d4>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a3c      	ldr	r2, [pc, #240]	; (8004a28 <HAL_DMA_IRQHandler+0xac0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d101      	bne.n	8004940 <HAL_DMA_IRQHandler+0x9d8>
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <HAL_DMA_IRQHandler+0x9da>
 8004940:	2300      	movs	r3, #0
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 824f 	beq.w	8004de6 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004954:	f003 031f 	and.w	r3, r3, #31
 8004958:	2204      	movs	r2, #4
 800495a:	409a      	lsls	r2, r3
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	4013      	ands	r3, r2
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 80dd 	beq.w	8004b20 <HAL_DMA_IRQHandler+0xbb8>
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 80d7 	beq.w	8004b20 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004976:	f003 031f 	and.w	r3, r3, #31
 800497a:	2204      	movs	r2, #4
 800497c:	409a      	lsls	r2, r3
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d059      	beq.n	8004a40 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d14a      	bne.n	8004a2c <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 8220 	beq.w	8004de0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049a8:	e21a      	b.n	8004de0 <HAL_DMA_IRQHandler+0xe78>
 80049aa:	bf00      	nop
 80049ac:	40020010 	.word	0x40020010
 80049b0:	40020028 	.word	0x40020028
 80049b4:	40020040 	.word	0x40020040
 80049b8:	40020058 	.word	0x40020058
 80049bc:	40020070 	.word	0x40020070
 80049c0:	40020088 	.word	0x40020088
 80049c4:	400200a0 	.word	0x400200a0
 80049c8:	400200b8 	.word	0x400200b8
 80049cc:	40020410 	.word	0x40020410
 80049d0:	40020428 	.word	0x40020428
 80049d4:	40020440 	.word	0x40020440
 80049d8:	40020458 	.word	0x40020458
 80049dc:	40020470 	.word	0x40020470
 80049e0:	40020488 	.word	0x40020488
 80049e4:	400204a0 	.word	0x400204a0
 80049e8:	400204b8 	.word	0x400204b8
 80049ec:	48022c08 	.word	0x48022c08
 80049f0:	48022c1c 	.word	0x48022c1c
 80049f4:	48022c30 	.word	0x48022c30
 80049f8:	48022c44 	.word	0x48022c44
 80049fc:	48022c58 	.word	0x48022c58
 8004a00:	48022c6c 	.word	0x48022c6c
 8004a04:	48022c80 	.word	0x48022c80
 8004a08:	48022c94 	.word	0x48022c94
 8004a0c:	58025408 	.word	0x58025408
 8004a10:	5802541c 	.word	0x5802541c
 8004a14:	58025430 	.word	0x58025430
 8004a18:	58025444 	.word	0x58025444
 8004a1c:	58025458 	.word	0x58025458
 8004a20:	5802546c 	.word	0x5802546c
 8004a24:	58025480 	.word	0x58025480
 8004a28:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 81d5 	beq.w	8004de0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a3e:	e1cf      	b.n	8004de0 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f003 0320 	and.w	r3, r3, #32
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d160      	bne.n	8004b0c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a7f      	ldr	r2, [pc, #508]	; (8004c4c <HAL_DMA_IRQHandler+0xce4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d04a      	beq.n	8004aea <HAL_DMA_IRQHandler+0xb82>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a7d      	ldr	r2, [pc, #500]	; (8004c50 <HAL_DMA_IRQHandler+0xce8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d045      	beq.n	8004aea <HAL_DMA_IRQHandler+0xb82>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a7c      	ldr	r2, [pc, #496]	; (8004c54 <HAL_DMA_IRQHandler+0xcec>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d040      	beq.n	8004aea <HAL_DMA_IRQHandler+0xb82>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a7a      	ldr	r2, [pc, #488]	; (8004c58 <HAL_DMA_IRQHandler+0xcf0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d03b      	beq.n	8004aea <HAL_DMA_IRQHandler+0xb82>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a79      	ldr	r2, [pc, #484]	; (8004c5c <HAL_DMA_IRQHandler+0xcf4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d036      	beq.n	8004aea <HAL_DMA_IRQHandler+0xb82>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a77      	ldr	r2, [pc, #476]	; (8004c60 <HAL_DMA_IRQHandler+0xcf8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d031      	beq.n	8004aea <HAL_DMA_IRQHandler+0xb82>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a76      	ldr	r2, [pc, #472]	; (8004c64 <HAL_DMA_IRQHandler+0xcfc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d02c      	beq.n	8004aea <HAL_DMA_IRQHandler+0xb82>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a74      	ldr	r2, [pc, #464]	; (8004c68 <HAL_DMA_IRQHandler+0xd00>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d027      	beq.n	8004aea <HAL_DMA_IRQHandler+0xb82>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a73      	ldr	r2, [pc, #460]	; (8004c6c <HAL_DMA_IRQHandler+0xd04>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d022      	beq.n	8004aea <HAL_DMA_IRQHandler+0xb82>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a71      	ldr	r2, [pc, #452]	; (8004c70 <HAL_DMA_IRQHandler+0xd08>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d01d      	beq.n	8004aea <HAL_DMA_IRQHandler+0xb82>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a70      	ldr	r2, [pc, #448]	; (8004c74 <HAL_DMA_IRQHandler+0xd0c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d018      	beq.n	8004aea <HAL_DMA_IRQHandler+0xb82>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a6e      	ldr	r2, [pc, #440]	; (8004c78 <HAL_DMA_IRQHandler+0xd10>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d013      	beq.n	8004aea <HAL_DMA_IRQHandler+0xb82>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a6d      	ldr	r2, [pc, #436]	; (8004c7c <HAL_DMA_IRQHandler+0xd14>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00e      	beq.n	8004aea <HAL_DMA_IRQHandler+0xb82>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a6b      	ldr	r2, [pc, #428]	; (8004c80 <HAL_DMA_IRQHandler+0xd18>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d009      	beq.n	8004aea <HAL_DMA_IRQHandler+0xb82>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a6a      	ldr	r2, [pc, #424]	; (8004c84 <HAL_DMA_IRQHandler+0xd1c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d004      	beq.n	8004aea <HAL_DMA_IRQHandler+0xb82>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a68      	ldr	r2, [pc, #416]	; (8004c88 <HAL_DMA_IRQHandler+0xd20>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d108      	bne.n	8004afc <HAL_DMA_IRQHandler+0xb94>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0208 	bic.w	r2, r2, #8
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	e007      	b.n	8004b0c <HAL_DMA_IRQHandler+0xba4>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0204 	bic.w	r2, r2, #4
 8004b0a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 8165 	beq.w	8004de0 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b1e:	e15f      	b.n	8004de0 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b24:	f003 031f 	and.w	r3, r3, #31
 8004b28:	2202      	movs	r2, #2
 8004b2a:	409a      	lsls	r2, r3
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 80c5 	beq.w	8004cc0 <HAL_DMA_IRQHandler+0xd58>
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 80bf 	beq.w	8004cc0 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b46:	f003 031f 	and.w	r3, r3, #31
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	409a      	lsls	r2, r3
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d018      	beq.n	8004b8e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d109      	bne.n	8004b7a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 813a 	beq.w	8004de4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b78:	e134      	b.n	8004de4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 8130 	beq.w	8004de4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b8c:	e12a      	b.n	8004de4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f040 8089 	bne.w	8004cac <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a2b      	ldr	r2, [pc, #172]	; (8004c4c <HAL_DMA_IRQHandler+0xce4>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d04a      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xcd2>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a29      	ldr	r2, [pc, #164]	; (8004c50 <HAL_DMA_IRQHandler+0xce8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d045      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xcd2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a28      	ldr	r2, [pc, #160]	; (8004c54 <HAL_DMA_IRQHandler+0xcec>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d040      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xcd2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a26      	ldr	r2, [pc, #152]	; (8004c58 <HAL_DMA_IRQHandler+0xcf0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d03b      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xcd2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a25      	ldr	r2, [pc, #148]	; (8004c5c <HAL_DMA_IRQHandler+0xcf4>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d036      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xcd2>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a23      	ldr	r2, [pc, #140]	; (8004c60 <HAL_DMA_IRQHandler+0xcf8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d031      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xcd2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a22      	ldr	r2, [pc, #136]	; (8004c64 <HAL_DMA_IRQHandler+0xcfc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d02c      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xcd2>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a20      	ldr	r2, [pc, #128]	; (8004c68 <HAL_DMA_IRQHandler+0xd00>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d027      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xcd2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a1f      	ldr	r2, [pc, #124]	; (8004c6c <HAL_DMA_IRQHandler+0xd04>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d022      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xcd2>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1d      	ldr	r2, [pc, #116]	; (8004c70 <HAL_DMA_IRQHandler+0xd08>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d01d      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xcd2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1c      	ldr	r2, [pc, #112]	; (8004c74 <HAL_DMA_IRQHandler+0xd0c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d018      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xcd2>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1a      	ldr	r2, [pc, #104]	; (8004c78 <HAL_DMA_IRQHandler+0xd10>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d013      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xcd2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a19      	ldr	r2, [pc, #100]	; (8004c7c <HAL_DMA_IRQHandler+0xd14>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d00e      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xcd2>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a17      	ldr	r2, [pc, #92]	; (8004c80 <HAL_DMA_IRQHandler+0xd18>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d009      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xcd2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a16      	ldr	r2, [pc, #88]	; (8004c84 <HAL_DMA_IRQHandler+0xd1c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d004      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xcd2>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a14      	ldr	r2, [pc, #80]	; (8004c88 <HAL_DMA_IRQHandler+0xd20>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d128      	bne.n	8004c8c <HAL_DMA_IRQHandler+0xd24>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0214 	bic.w	r2, r2, #20
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	e027      	b.n	8004c9c <HAL_DMA_IRQHandler+0xd34>
 8004c4c:	40020010 	.word	0x40020010
 8004c50:	40020028 	.word	0x40020028
 8004c54:	40020040 	.word	0x40020040
 8004c58:	40020058 	.word	0x40020058
 8004c5c:	40020070 	.word	0x40020070
 8004c60:	40020088 	.word	0x40020088
 8004c64:	400200a0 	.word	0x400200a0
 8004c68:	400200b8 	.word	0x400200b8
 8004c6c:	40020410 	.word	0x40020410
 8004c70:	40020428 	.word	0x40020428
 8004c74:	40020440 	.word	0x40020440
 8004c78:	40020458 	.word	0x40020458
 8004c7c:	40020470 	.word	0x40020470
 8004c80:	40020488 	.word	0x40020488
 8004c84:	400204a0 	.word	0x400204a0
 8004c88:	400204b8 	.word	0x400204b8
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 020a 	bic.w	r2, r2, #10
 8004c9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8097 	beq.w	8004de4 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cbe:	e091      	b.n	8004de4 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc4:	f003 031f 	and.w	r3, r3, #31
 8004cc8:	2208      	movs	r2, #8
 8004cca:	409a      	lsls	r2, r3
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8088 	beq.w	8004de6 <HAL_DMA_IRQHandler+0xe7e>
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 8082 	beq.w	8004de6 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a41      	ldr	r2, [pc, #260]	; (8004dec <HAL_DMA_IRQHandler+0xe84>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d04a      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xe1a>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a3f      	ldr	r2, [pc, #252]	; (8004df0 <HAL_DMA_IRQHandler+0xe88>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d045      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xe1a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a3e      	ldr	r2, [pc, #248]	; (8004df4 <HAL_DMA_IRQHandler+0xe8c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d040      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xe1a>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a3c      	ldr	r2, [pc, #240]	; (8004df8 <HAL_DMA_IRQHandler+0xe90>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d03b      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xe1a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a3b      	ldr	r2, [pc, #236]	; (8004dfc <HAL_DMA_IRQHandler+0xe94>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d036      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xe1a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a39      	ldr	r2, [pc, #228]	; (8004e00 <HAL_DMA_IRQHandler+0xe98>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d031      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xe1a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a38      	ldr	r2, [pc, #224]	; (8004e04 <HAL_DMA_IRQHandler+0xe9c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d02c      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xe1a>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a36      	ldr	r2, [pc, #216]	; (8004e08 <HAL_DMA_IRQHandler+0xea0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d027      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xe1a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a35      	ldr	r2, [pc, #212]	; (8004e0c <HAL_DMA_IRQHandler+0xea4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d022      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xe1a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a33      	ldr	r2, [pc, #204]	; (8004e10 <HAL_DMA_IRQHandler+0xea8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d01d      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xe1a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a32      	ldr	r2, [pc, #200]	; (8004e14 <HAL_DMA_IRQHandler+0xeac>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d018      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xe1a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a30      	ldr	r2, [pc, #192]	; (8004e18 <HAL_DMA_IRQHandler+0xeb0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d013      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xe1a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a2f      	ldr	r2, [pc, #188]	; (8004e1c <HAL_DMA_IRQHandler+0xeb4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00e      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xe1a>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a2d      	ldr	r2, [pc, #180]	; (8004e20 <HAL_DMA_IRQHandler+0xeb8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d009      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xe1a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a2c      	ldr	r2, [pc, #176]	; (8004e24 <HAL_DMA_IRQHandler+0xebc>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d004      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xe1a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a2a      	ldr	r2, [pc, #168]	; (8004e28 <HAL_DMA_IRQHandler+0xec0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d108      	bne.n	8004d94 <HAL_DMA_IRQHandler+0xe2c>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 021c 	bic.w	r2, r2, #28
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	e007      	b.n	8004da4 <HAL_DMA_IRQHandler+0xe3c>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 020e 	bic.w	r2, r2, #14
 8004da2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da8:	f003 031f 	and.w	r3, r3, #31
 8004dac:	2201      	movs	r2, #1
 8004dae:	409a      	lsls	r2, r3
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d009      	beq.n	8004de6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	4798      	blx	r3
 8004dda:	e004      	b.n	8004de6 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004ddc:	bf00      	nop
 8004dde:	e002      	b.n	8004de6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004de0:	bf00      	nop
 8004de2:	e000      	b.n	8004de6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004de4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004de6:	3728      	adds	r7, #40	; 0x28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40020010 	.word	0x40020010
 8004df0:	40020028 	.word	0x40020028
 8004df4:	40020040 	.word	0x40020040
 8004df8:	40020058 	.word	0x40020058
 8004dfc:	40020070 	.word	0x40020070
 8004e00:	40020088 	.word	0x40020088
 8004e04:	400200a0 	.word	0x400200a0
 8004e08:	400200b8 	.word	0x400200b8
 8004e0c:	40020410 	.word	0x40020410
 8004e10:	40020428 	.word	0x40020428
 8004e14:	40020440 	.word	0x40020440
 8004e18:	40020458 	.word	0x40020458
 8004e1c:	40020470 	.word	0x40020470
 8004e20:	40020488 	.word	0x40020488
 8004e24:	400204a0 	.word	0x400204a0
 8004e28:	400204b8 	.word	0x400204b8

08004e2c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e44:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a7f      	ldr	r2, [pc, #508]	; (8005048 <DMA_SetConfig+0x21c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d072      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a7d      	ldr	r2, [pc, #500]	; (800504c <DMA_SetConfig+0x220>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d06d      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a7c      	ldr	r2, [pc, #496]	; (8005050 <DMA_SetConfig+0x224>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d068      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a7a      	ldr	r2, [pc, #488]	; (8005054 <DMA_SetConfig+0x228>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d063      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a79      	ldr	r2, [pc, #484]	; (8005058 <DMA_SetConfig+0x22c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d05e      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a77      	ldr	r2, [pc, #476]	; (800505c <DMA_SetConfig+0x230>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d059      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a76      	ldr	r2, [pc, #472]	; (8005060 <DMA_SetConfig+0x234>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d054      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a74      	ldr	r2, [pc, #464]	; (8005064 <DMA_SetConfig+0x238>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d04f      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a73      	ldr	r2, [pc, #460]	; (8005068 <DMA_SetConfig+0x23c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d04a      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a71      	ldr	r2, [pc, #452]	; (800506c <DMA_SetConfig+0x240>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d045      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a70      	ldr	r2, [pc, #448]	; (8005070 <DMA_SetConfig+0x244>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d040      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a6e      	ldr	r2, [pc, #440]	; (8005074 <DMA_SetConfig+0x248>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d03b      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a6d      	ldr	r2, [pc, #436]	; (8005078 <DMA_SetConfig+0x24c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d036      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a6b      	ldr	r2, [pc, #428]	; (800507c <DMA_SetConfig+0x250>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d031      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a6a      	ldr	r2, [pc, #424]	; (8005080 <DMA_SetConfig+0x254>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d02c      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a68      	ldr	r2, [pc, #416]	; (8005084 <DMA_SetConfig+0x258>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d027      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a67      	ldr	r2, [pc, #412]	; (8005088 <DMA_SetConfig+0x25c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d022      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a65      	ldr	r2, [pc, #404]	; (800508c <DMA_SetConfig+0x260>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d01d      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a64      	ldr	r2, [pc, #400]	; (8005090 <DMA_SetConfig+0x264>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d018      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a62      	ldr	r2, [pc, #392]	; (8005094 <DMA_SetConfig+0x268>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d013      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a61      	ldr	r2, [pc, #388]	; (8005098 <DMA_SetConfig+0x26c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00e      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a5f      	ldr	r2, [pc, #380]	; (800509c <DMA_SetConfig+0x270>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d009      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a5e      	ldr	r2, [pc, #376]	; (80050a0 <DMA_SetConfig+0x274>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d004      	beq.n	8004f36 <DMA_SetConfig+0x10a>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a5c      	ldr	r2, [pc, #368]	; (80050a4 <DMA_SetConfig+0x278>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d101      	bne.n	8004f3a <DMA_SetConfig+0x10e>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <DMA_SetConfig+0x110>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00d      	beq.n	8004f5c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f48:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d004      	beq.n	8004f5c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f5a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a39      	ldr	r2, [pc, #228]	; (8005048 <DMA_SetConfig+0x21c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d04a      	beq.n	8004ffc <DMA_SetConfig+0x1d0>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a38      	ldr	r2, [pc, #224]	; (800504c <DMA_SetConfig+0x220>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d045      	beq.n	8004ffc <DMA_SetConfig+0x1d0>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a36      	ldr	r2, [pc, #216]	; (8005050 <DMA_SetConfig+0x224>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d040      	beq.n	8004ffc <DMA_SetConfig+0x1d0>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a35      	ldr	r2, [pc, #212]	; (8005054 <DMA_SetConfig+0x228>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d03b      	beq.n	8004ffc <DMA_SetConfig+0x1d0>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a33      	ldr	r2, [pc, #204]	; (8005058 <DMA_SetConfig+0x22c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d036      	beq.n	8004ffc <DMA_SetConfig+0x1d0>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a32      	ldr	r2, [pc, #200]	; (800505c <DMA_SetConfig+0x230>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d031      	beq.n	8004ffc <DMA_SetConfig+0x1d0>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a30      	ldr	r2, [pc, #192]	; (8005060 <DMA_SetConfig+0x234>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d02c      	beq.n	8004ffc <DMA_SetConfig+0x1d0>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a2f      	ldr	r2, [pc, #188]	; (8005064 <DMA_SetConfig+0x238>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d027      	beq.n	8004ffc <DMA_SetConfig+0x1d0>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a2d      	ldr	r2, [pc, #180]	; (8005068 <DMA_SetConfig+0x23c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d022      	beq.n	8004ffc <DMA_SetConfig+0x1d0>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a2c      	ldr	r2, [pc, #176]	; (800506c <DMA_SetConfig+0x240>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d01d      	beq.n	8004ffc <DMA_SetConfig+0x1d0>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a2a      	ldr	r2, [pc, #168]	; (8005070 <DMA_SetConfig+0x244>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d018      	beq.n	8004ffc <DMA_SetConfig+0x1d0>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a29      	ldr	r2, [pc, #164]	; (8005074 <DMA_SetConfig+0x248>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d013      	beq.n	8004ffc <DMA_SetConfig+0x1d0>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a27      	ldr	r2, [pc, #156]	; (8005078 <DMA_SetConfig+0x24c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00e      	beq.n	8004ffc <DMA_SetConfig+0x1d0>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a26      	ldr	r2, [pc, #152]	; (800507c <DMA_SetConfig+0x250>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d009      	beq.n	8004ffc <DMA_SetConfig+0x1d0>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a24      	ldr	r2, [pc, #144]	; (8005080 <DMA_SetConfig+0x254>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d004      	beq.n	8004ffc <DMA_SetConfig+0x1d0>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a23      	ldr	r2, [pc, #140]	; (8005084 <DMA_SetConfig+0x258>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d101      	bne.n	8005000 <DMA_SetConfig+0x1d4>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e000      	b.n	8005002 <DMA_SetConfig+0x1d6>
 8005000:	2300      	movs	r3, #0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d059      	beq.n	80050ba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500a:	f003 031f 	and.w	r3, r3, #31
 800500e:	223f      	movs	r2, #63	; 0x3f
 8005010:	409a      	lsls	r2, r3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005024:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	2b40      	cmp	r3, #64	; 0x40
 8005034:	d138      	bne.n	80050a8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005046:	e0ae      	b.n	80051a6 <DMA_SetConfig+0x37a>
 8005048:	40020010 	.word	0x40020010
 800504c:	40020028 	.word	0x40020028
 8005050:	40020040 	.word	0x40020040
 8005054:	40020058 	.word	0x40020058
 8005058:	40020070 	.word	0x40020070
 800505c:	40020088 	.word	0x40020088
 8005060:	400200a0 	.word	0x400200a0
 8005064:	400200b8 	.word	0x400200b8
 8005068:	40020410 	.word	0x40020410
 800506c:	40020428 	.word	0x40020428
 8005070:	40020440 	.word	0x40020440
 8005074:	40020458 	.word	0x40020458
 8005078:	40020470 	.word	0x40020470
 800507c:	40020488 	.word	0x40020488
 8005080:	400204a0 	.word	0x400204a0
 8005084:	400204b8 	.word	0x400204b8
 8005088:	58025408 	.word	0x58025408
 800508c:	5802541c 	.word	0x5802541c
 8005090:	58025430 	.word	0x58025430
 8005094:	58025444 	.word	0x58025444
 8005098:	58025458 	.word	0x58025458
 800509c:	5802546c 	.word	0x5802546c
 80050a0:	58025480 	.word	0x58025480
 80050a4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	60da      	str	r2, [r3, #12]
}
 80050b8:	e075      	b.n	80051a6 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a3d      	ldr	r2, [pc, #244]	; (80051b4 <DMA_SetConfig+0x388>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d04a      	beq.n	800515a <DMA_SetConfig+0x32e>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a3b      	ldr	r2, [pc, #236]	; (80051b8 <DMA_SetConfig+0x38c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d045      	beq.n	800515a <DMA_SetConfig+0x32e>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a3a      	ldr	r2, [pc, #232]	; (80051bc <DMA_SetConfig+0x390>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d040      	beq.n	800515a <DMA_SetConfig+0x32e>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a38      	ldr	r2, [pc, #224]	; (80051c0 <DMA_SetConfig+0x394>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d03b      	beq.n	800515a <DMA_SetConfig+0x32e>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a37      	ldr	r2, [pc, #220]	; (80051c4 <DMA_SetConfig+0x398>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d036      	beq.n	800515a <DMA_SetConfig+0x32e>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a35      	ldr	r2, [pc, #212]	; (80051c8 <DMA_SetConfig+0x39c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d031      	beq.n	800515a <DMA_SetConfig+0x32e>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a34      	ldr	r2, [pc, #208]	; (80051cc <DMA_SetConfig+0x3a0>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d02c      	beq.n	800515a <DMA_SetConfig+0x32e>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a32      	ldr	r2, [pc, #200]	; (80051d0 <DMA_SetConfig+0x3a4>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d027      	beq.n	800515a <DMA_SetConfig+0x32e>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a31      	ldr	r2, [pc, #196]	; (80051d4 <DMA_SetConfig+0x3a8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d022      	beq.n	800515a <DMA_SetConfig+0x32e>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a2f      	ldr	r2, [pc, #188]	; (80051d8 <DMA_SetConfig+0x3ac>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d01d      	beq.n	800515a <DMA_SetConfig+0x32e>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a2e      	ldr	r2, [pc, #184]	; (80051dc <DMA_SetConfig+0x3b0>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d018      	beq.n	800515a <DMA_SetConfig+0x32e>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a2c      	ldr	r2, [pc, #176]	; (80051e0 <DMA_SetConfig+0x3b4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d013      	beq.n	800515a <DMA_SetConfig+0x32e>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a2b      	ldr	r2, [pc, #172]	; (80051e4 <DMA_SetConfig+0x3b8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d00e      	beq.n	800515a <DMA_SetConfig+0x32e>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a29      	ldr	r2, [pc, #164]	; (80051e8 <DMA_SetConfig+0x3bc>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d009      	beq.n	800515a <DMA_SetConfig+0x32e>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a28      	ldr	r2, [pc, #160]	; (80051ec <DMA_SetConfig+0x3c0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d004      	beq.n	800515a <DMA_SetConfig+0x32e>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a26      	ldr	r2, [pc, #152]	; (80051f0 <DMA_SetConfig+0x3c4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d101      	bne.n	800515e <DMA_SetConfig+0x332>
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <DMA_SetConfig+0x334>
 800515e:	2300      	movs	r3, #0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d020      	beq.n	80051a6 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005168:	f003 031f 	and.w	r3, r3, #31
 800516c:	2201      	movs	r2, #1
 800516e:	409a      	lsls	r2, r3
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2b40      	cmp	r3, #64	; 0x40
 8005182:	d108      	bne.n	8005196 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	60da      	str	r2, [r3, #12]
}
 8005194:	e007      	b.n	80051a6 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	60da      	str	r2, [r3, #12]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	48022c08 	.word	0x48022c08
 80051b8:	48022c1c 	.word	0x48022c1c
 80051bc:	48022c30 	.word	0x48022c30
 80051c0:	48022c44 	.word	0x48022c44
 80051c4:	48022c58 	.word	0x48022c58
 80051c8:	48022c6c 	.word	0x48022c6c
 80051cc:	48022c80 	.word	0x48022c80
 80051d0:	48022c94 	.word	0x48022c94
 80051d4:	58025408 	.word	0x58025408
 80051d8:	5802541c 	.word	0x5802541c
 80051dc:	58025430 	.word	0x58025430
 80051e0:	58025444 	.word	0x58025444
 80051e4:	58025458 	.word	0x58025458
 80051e8:	5802546c 	.word	0x5802546c
 80051ec:	58025480 	.word	0x58025480
 80051f0:	58025494 	.word	0x58025494

080051f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a42      	ldr	r2, [pc, #264]	; (800530c <DMA_CalcBaseAndBitshift+0x118>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d04a      	beq.n	800529c <DMA_CalcBaseAndBitshift+0xa8>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a41      	ldr	r2, [pc, #260]	; (8005310 <DMA_CalcBaseAndBitshift+0x11c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d045      	beq.n	800529c <DMA_CalcBaseAndBitshift+0xa8>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a3f      	ldr	r2, [pc, #252]	; (8005314 <DMA_CalcBaseAndBitshift+0x120>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d040      	beq.n	800529c <DMA_CalcBaseAndBitshift+0xa8>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a3e      	ldr	r2, [pc, #248]	; (8005318 <DMA_CalcBaseAndBitshift+0x124>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d03b      	beq.n	800529c <DMA_CalcBaseAndBitshift+0xa8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a3c      	ldr	r2, [pc, #240]	; (800531c <DMA_CalcBaseAndBitshift+0x128>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d036      	beq.n	800529c <DMA_CalcBaseAndBitshift+0xa8>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a3b      	ldr	r2, [pc, #236]	; (8005320 <DMA_CalcBaseAndBitshift+0x12c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d031      	beq.n	800529c <DMA_CalcBaseAndBitshift+0xa8>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a39      	ldr	r2, [pc, #228]	; (8005324 <DMA_CalcBaseAndBitshift+0x130>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d02c      	beq.n	800529c <DMA_CalcBaseAndBitshift+0xa8>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a38      	ldr	r2, [pc, #224]	; (8005328 <DMA_CalcBaseAndBitshift+0x134>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d027      	beq.n	800529c <DMA_CalcBaseAndBitshift+0xa8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a36      	ldr	r2, [pc, #216]	; (800532c <DMA_CalcBaseAndBitshift+0x138>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d022      	beq.n	800529c <DMA_CalcBaseAndBitshift+0xa8>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a35      	ldr	r2, [pc, #212]	; (8005330 <DMA_CalcBaseAndBitshift+0x13c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d01d      	beq.n	800529c <DMA_CalcBaseAndBitshift+0xa8>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a33      	ldr	r2, [pc, #204]	; (8005334 <DMA_CalcBaseAndBitshift+0x140>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d018      	beq.n	800529c <DMA_CalcBaseAndBitshift+0xa8>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a32      	ldr	r2, [pc, #200]	; (8005338 <DMA_CalcBaseAndBitshift+0x144>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d013      	beq.n	800529c <DMA_CalcBaseAndBitshift+0xa8>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a30      	ldr	r2, [pc, #192]	; (800533c <DMA_CalcBaseAndBitshift+0x148>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00e      	beq.n	800529c <DMA_CalcBaseAndBitshift+0xa8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a2f      	ldr	r2, [pc, #188]	; (8005340 <DMA_CalcBaseAndBitshift+0x14c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d009      	beq.n	800529c <DMA_CalcBaseAndBitshift+0xa8>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a2d      	ldr	r2, [pc, #180]	; (8005344 <DMA_CalcBaseAndBitshift+0x150>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d004      	beq.n	800529c <DMA_CalcBaseAndBitshift+0xa8>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a2c      	ldr	r2, [pc, #176]	; (8005348 <DMA_CalcBaseAndBitshift+0x154>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d101      	bne.n	80052a0 <DMA_CalcBaseAndBitshift+0xac>
 800529c:	2301      	movs	r3, #1
 800529e:	e000      	b.n	80052a2 <DMA_CalcBaseAndBitshift+0xae>
 80052a0:	2300      	movs	r3, #0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d024      	beq.n	80052f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	3b10      	subs	r3, #16
 80052ae:	4a27      	ldr	r2, [pc, #156]	; (800534c <DMA_CalcBaseAndBitshift+0x158>)
 80052b0:	fba2 2303 	umull	r2, r3, r2, r3
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	4a24      	ldr	r2, [pc, #144]	; (8005350 <DMA_CalcBaseAndBitshift+0x15c>)
 80052c0:	5cd3      	ldrb	r3, [r2, r3]
 80052c2:	461a      	mov	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	d908      	bls.n	80052e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	4b1f      	ldr	r3, [pc, #124]	; (8005354 <DMA_CalcBaseAndBitshift+0x160>)
 80052d6:	4013      	ands	r3, r2
 80052d8:	1d1a      	adds	r2, r3, #4
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	659a      	str	r2, [r3, #88]	; 0x58
 80052de:	e00d      	b.n	80052fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	461a      	mov	r2, r3
 80052e6:	4b1b      	ldr	r3, [pc, #108]	; (8005354 <DMA_CalcBaseAndBitshift+0x160>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6593      	str	r3, [r2, #88]	; 0x58
 80052ee:	e005      	b.n	80052fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	40020010 	.word	0x40020010
 8005310:	40020028 	.word	0x40020028
 8005314:	40020040 	.word	0x40020040
 8005318:	40020058 	.word	0x40020058
 800531c:	40020070 	.word	0x40020070
 8005320:	40020088 	.word	0x40020088
 8005324:	400200a0 	.word	0x400200a0
 8005328:	400200b8 	.word	0x400200b8
 800532c:	40020410 	.word	0x40020410
 8005330:	40020428 	.word	0x40020428
 8005334:	40020440 	.word	0x40020440
 8005338:	40020458 	.word	0x40020458
 800533c:	40020470 	.word	0x40020470
 8005340:	40020488 	.word	0x40020488
 8005344:	400204a0 	.word	0x400204a0
 8005348:	400204b8 	.word	0x400204b8
 800534c:	aaaaaaab 	.word	0xaaaaaaab
 8005350:	0800cb08 	.word	0x0800cb08
 8005354:	fffffc00 	.word	0xfffffc00

08005358 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005360:	2300      	movs	r3, #0
 8005362:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d120      	bne.n	80053ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005370:	2b03      	cmp	r3, #3
 8005372:	d858      	bhi.n	8005426 <DMA_CheckFifoParam+0xce>
 8005374:	a201      	add	r2, pc, #4	; (adr r2, 800537c <DMA_CheckFifoParam+0x24>)
 8005376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537a:	bf00      	nop
 800537c:	0800538d 	.word	0x0800538d
 8005380:	0800539f 	.word	0x0800539f
 8005384:	0800538d 	.word	0x0800538d
 8005388:	08005427 	.word	0x08005427
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d048      	beq.n	800542a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800539c:	e045      	b.n	800542a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053a6:	d142      	bne.n	800542e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053ac:	e03f      	b.n	800542e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b6:	d123      	bne.n	8005400 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d838      	bhi.n	8005432 <DMA_CheckFifoParam+0xda>
 80053c0:	a201      	add	r2, pc, #4	; (adr r2, 80053c8 <DMA_CheckFifoParam+0x70>)
 80053c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c6:	bf00      	nop
 80053c8:	080053d9 	.word	0x080053d9
 80053cc:	080053df 	.word	0x080053df
 80053d0:	080053d9 	.word	0x080053d9
 80053d4:	080053f1 	.word	0x080053f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	73fb      	strb	r3, [r7, #15]
        break;
 80053dc:	e030      	b.n	8005440 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d025      	beq.n	8005436 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053ee:	e022      	b.n	8005436 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053f8:	d11f      	bne.n	800543a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053fe:	e01c      	b.n	800543a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005404:	2b02      	cmp	r3, #2
 8005406:	d902      	bls.n	800540e <DMA_CheckFifoParam+0xb6>
 8005408:	2b03      	cmp	r3, #3
 800540a:	d003      	beq.n	8005414 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800540c:	e018      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	73fb      	strb	r3, [r7, #15]
        break;
 8005412:	e015      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005418:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00e      	beq.n	800543e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	73fb      	strb	r3, [r7, #15]
    break;
 8005424:	e00b      	b.n	800543e <DMA_CheckFifoParam+0xe6>
        break;
 8005426:	bf00      	nop
 8005428:	e00a      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
        break;
 800542a:	bf00      	nop
 800542c:	e008      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
        break;
 800542e:	bf00      	nop
 8005430:	e006      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
        break;
 8005432:	bf00      	nop
 8005434:	e004      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
        break;
 8005436:	bf00      	nop
 8005438:	e002      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
        break;
 800543a:	bf00      	nop
 800543c:	e000      	b.n	8005440 <DMA_CheckFifoParam+0xe8>
    break;
 800543e:	bf00      	nop
    }
  }

  return status;
 8005440:	7bfb      	ldrb	r3, [r7, #15]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop

08005450 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a38      	ldr	r2, [pc, #224]	; (8005544 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d022      	beq.n	80054ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a36      	ldr	r2, [pc, #216]	; (8005548 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d01d      	beq.n	80054ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a35      	ldr	r2, [pc, #212]	; (800554c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d018      	beq.n	80054ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a33      	ldr	r2, [pc, #204]	; (8005550 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d013      	beq.n	80054ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a32      	ldr	r2, [pc, #200]	; (8005554 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00e      	beq.n	80054ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a30      	ldr	r2, [pc, #192]	; (8005558 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d009      	beq.n	80054ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a2f      	ldr	r2, [pc, #188]	; (800555c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d004      	beq.n	80054ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a2d      	ldr	r2, [pc, #180]	; (8005560 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d101      	bne.n	80054b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80054b2:	2300      	movs	r3, #0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01a      	beq.n	80054ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	3b08      	subs	r3, #8
 80054c0:	4a28      	ldr	r2, [pc, #160]	; (8005564 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80054c2:	fba2 2303 	umull	r2, r3, r2, r3
 80054c6:	091b      	lsrs	r3, r3, #4
 80054c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4b26      	ldr	r3, [pc, #152]	; (8005568 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80054ce:	4413      	add	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	461a      	mov	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a24      	ldr	r2, [pc, #144]	; (800556c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80054dc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f003 031f 	and.w	r3, r3, #31
 80054e4:	2201      	movs	r2, #1
 80054e6:	409a      	lsls	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80054ec:	e024      	b.n	8005538 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	3b10      	subs	r3, #16
 80054f6:	4a1e      	ldr	r2, [pc, #120]	; (8005570 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80054f8:	fba2 2303 	umull	r2, r3, r2, r3
 80054fc:	091b      	lsrs	r3, r3, #4
 80054fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4a1c      	ldr	r2, [pc, #112]	; (8005574 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d806      	bhi.n	8005516 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4a1b      	ldr	r2, [pc, #108]	; (8005578 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d902      	bls.n	8005516 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3308      	adds	r3, #8
 8005514:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4b18      	ldr	r3, [pc, #96]	; (800557c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800551a:	4413      	add	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	461a      	mov	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a16      	ldr	r2, [pc, #88]	; (8005580 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005528:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f003 031f 	and.w	r3, r3, #31
 8005530:	2201      	movs	r2, #1
 8005532:	409a      	lsls	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005538:	bf00      	nop
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	58025408 	.word	0x58025408
 8005548:	5802541c 	.word	0x5802541c
 800554c:	58025430 	.word	0x58025430
 8005550:	58025444 	.word	0x58025444
 8005554:	58025458 	.word	0x58025458
 8005558:	5802546c 	.word	0x5802546c
 800555c:	58025480 	.word	0x58025480
 8005560:	58025494 	.word	0x58025494
 8005564:	cccccccd 	.word	0xcccccccd
 8005568:	16009600 	.word	0x16009600
 800556c:	58025880 	.word	0x58025880
 8005570:	aaaaaaab 	.word	0xaaaaaaab
 8005574:	400204b8 	.word	0x400204b8
 8005578:	4002040f 	.word	0x4002040f
 800557c:	10008200 	.word	0x10008200
 8005580:	40020880 	.word	0x40020880

08005584 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	b2db      	uxtb	r3, r3
 8005592:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d04a      	beq.n	8005630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b08      	cmp	r3, #8
 800559e:	d847      	bhi.n	8005630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a25      	ldr	r2, [pc, #148]	; (800563c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d022      	beq.n	80055f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a24      	ldr	r2, [pc, #144]	; (8005640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d01d      	beq.n	80055f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a22      	ldr	r2, [pc, #136]	; (8005644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d018      	beq.n	80055f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a21      	ldr	r2, [pc, #132]	; (8005648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d013      	beq.n	80055f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a1f      	ldr	r2, [pc, #124]	; (800564c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00e      	beq.n	80055f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a1e      	ldr	r2, [pc, #120]	; (8005650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d009      	beq.n	80055f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1c      	ldr	r2, [pc, #112]	; (8005654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d004      	beq.n	80055f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1b      	ldr	r2, [pc, #108]	; (8005658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d101      	bne.n	80055f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80055f0:	2301      	movs	r3, #1
 80055f2:	e000      	b.n	80055f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80055f4:	2300      	movs	r3, #0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4b17      	ldr	r3, [pc, #92]	; (800565c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	461a      	mov	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a15      	ldr	r2, [pc, #84]	; (8005660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800560c:	671a      	str	r2, [r3, #112]	; 0x70
 800560e:	e009      	b.n	8005624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4b14      	ldr	r3, [pc, #80]	; (8005664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005614:	4413      	add	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	461a      	mov	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a11      	ldr	r2, [pc, #68]	; (8005668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005622:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	3b01      	subs	r3, #1
 8005628:	2201      	movs	r2, #1
 800562a:	409a      	lsls	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005630:	bf00      	nop
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	58025408 	.word	0x58025408
 8005640:	5802541c 	.word	0x5802541c
 8005644:	58025430 	.word	0x58025430
 8005648:	58025444 	.word	0x58025444
 800564c:	58025458 	.word	0x58025458
 8005650:	5802546c 	.word	0x5802546c
 8005654:	58025480 	.word	0x58025480
 8005658:	58025494 	.word	0x58025494
 800565c:	1600963f 	.word	0x1600963f
 8005660:	58025940 	.word	0x58025940
 8005664:	1000823f 	.word	0x1000823f
 8005668:	40020940 	.word	0x40020940

0800566c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800566c:	b480      	push	{r7}
 800566e:	b089      	sub	sp, #36	; 0x24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005676:	2300      	movs	r3, #0
 8005678:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800567a:	4b89      	ldr	r3, [pc, #548]	; (80058a0 <HAL_GPIO_Init+0x234>)
 800567c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800567e:	e194      	b.n	80059aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	2101      	movs	r1, #1
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	fa01 f303 	lsl.w	r3, r1, r3
 800568c:	4013      	ands	r3, r2
 800568e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 8186 	beq.w	80059a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f003 0303 	and.w	r3, r3, #3
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d005      	beq.n	80056b0 <HAL_GPIO_Init+0x44>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f003 0303 	and.w	r3, r3, #3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d130      	bne.n	8005712 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	2203      	movs	r2, #3
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	43db      	mvns	r3, r3
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	4013      	ands	r3, r2
 80056c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056e6:	2201      	movs	r2, #1
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	43db      	mvns	r3, r3
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	4013      	ands	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	091b      	lsrs	r3, r3, #4
 80056fc:	f003 0201 	and.w	r2, r3, #1
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	fa02 f303 	lsl.w	r3, r2, r3
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	4313      	orrs	r3, r2
 800570a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	2b03      	cmp	r3, #3
 800571c:	d017      	beq.n	800574e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	2203      	movs	r2, #3
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	43db      	mvns	r3, r3
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	4013      	ands	r3, r2
 8005734:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	fa02 f303 	lsl.w	r3, r2, r3
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	4313      	orrs	r3, r2
 8005746:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d123      	bne.n	80057a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	08da      	lsrs	r2, r3, #3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3208      	adds	r2, #8
 8005762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	220f      	movs	r2, #15
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	43db      	mvns	r3, r3
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	4013      	ands	r3, r2
 800577c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	691a      	ldr	r2, [r3, #16]
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	4313      	orrs	r3, r2
 8005792:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	08da      	lsrs	r2, r3, #3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3208      	adds	r2, #8
 800579c:	69b9      	ldr	r1, [r7, #24]
 800579e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	2203      	movs	r2, #3
 80057ae:	fa02 f303 	lsl.w	r3, r2, r3
 80057b2:	43db      	mvns	r3, r3
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	4013      	ands	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f003 0203 	and.w	r2, r3, #3
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 80e0 	beq.w	80059a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057e4:	4b2f      	ldr	r3, [pc, #188]	; (80058a4 <HAL_GPIO_Init+0x238>)
 80057e6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80057ea:	4a2e      	ldr	r2, [pc, #184]	; (80058a4 <HAL_GPIO_Init+0x238>)
 80057ec:	f043 0302 	orr.w	r3, r3, #2
 80057f0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80057f4:	4b2b      	ldr	r3, [pc, #172]	; (80058a4 <HAL_GPIO_Init+0x238>)
 80057f6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005802:	4a29      	ldr	r2, [pc, #164]	; (80058a8 <HAL_GPIO_Init+0x23c>)
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	089b      	lsrs	r3, r3, #2
 8005808:	3302      	adds	r3, #2
 800580a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800580e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	220f      	movs	r2, #15
 800581a:	fa02 f303 	lsl.w	r3, r2, r3
 800581e:	43db      	mvns	r3, r3
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	4013      	ands	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a20      	ldr	r2, [pc, #128]	; (80058ac <HAL_GPIO_Init+0x240>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d052      	beq.n	80058d4 <HAL_GPIO_Init+0x268>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a1f      	ldr	r2, [pc, #124]	; (80058b0 <HAL_GPIO_Init+0x244>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d031      	beq.n	800589a <HAL_GPIO_Init+0x22e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a1e      	ldr	r2, [pc, #120]	; (80058b4 <HAL_GPIO_Init+0x248>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d02b      	beq.n	8005896 <HAL_GPIO_Init+0x22a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a1d      	ldr	r2, [pc, #116]	; (80058b8 <HAL_GPIO_Init+0x24c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d025      	beq.n	8005892 <HAL_GPIO_Init+0x226>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a1c      	ldr	r2, [pc, #112]	; (80058bc <HAL_GPIO_Init+0x250>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d01f      	beq.n	800588e <HAL_GPIO_Init+0x222>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a1b      	ldr	r2, [pc, #108]	; (80058c0 <HAL_GPIO_Init+0x254>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d019      	beq.n	800588a <HAL_GPIO_Init+0x21e>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a1a      	ldr	r2, [pc, #104]	; (80058c4 <HAL_GPIO_Init+0x258>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d013      	beq.n	8005886 <HAL_GPIO_Init+0x21a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a19      	ldr	r2, [pc, #100]	; (80058c8 <HAL_GPIO_Init+0x25c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00d      	beq.n	8005882 <HAL_GPIO_Init+0x216>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a18      	ldr	r2, [pc, #96]	; (80058cc <HAL_GPIO_Init+0x260>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d007      	beq.n	800587e <HAL_GPIO_Init+0x212>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a17      	ldr	r2, [pc, #92]	; (80058d0 <HAL_GPIO_Init+0x264>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d101      	bne.n	800587a <HAL_GPIO_Init+0x20e>
 8005876:	2309      	movs	r3, #9
 8005878:	e02d      	b.n	80058d6 <HAL_GPIO_Init+0x26a>
 800587a:	230a      	movs	r3, #10
 800587c:	e02b      	b.n	80058d6 <HAL_GPIO_Init+0x26a>
 800587e:	2308      	movs	r3, #8
 8005880:	e029      	b.n	80058d6 <HAL_GPIO_Init+0x26a>
 8005882:	2307      	movs	r3, #7
 8005884:	e027      	b.n	80058d6 <HAL_GPIO_Init+0x26a>
 8005886:	2306      	movs	r3, #6
 8005888:	e025      	b.n	80058d6 <HAL_GPIO_Init+0x26a>
 800588a:	2305      	movs	r3, #5
 800588c:	e023      	b.n	80058d6 <HAL_GPIO_Init+0x26a>
 800588e:	2304      	movs	r3, #4
 8005890:	e021      	b.n	80058d6 <HAL_GPIO_Init+0x26a>
 8005892:	2303      	movs	r3, #3
 8005894:	e01f      	b.n	80058d6 <HAL_GPIO_Init+0x26a>
 8005896:	2302      	movs	r3, #2
 8005898:	e01d      	b.n	80058d6 <HAL_GPIO_Init+0x26a>
 800589a:	2301      	movs	r3, #1
 800589c:	e01b      	b.n	80058d6 <HAL_GPIO_Init+0x26a>
 800589e:	bf00      	nop
 80058a0:	58000080 	.word	0x58000080
 80058a4:	58024400 	.word	0x58024400
 80058a8:	58000400 	.word	0x58000400
 80058ac:	58020000 	.word	0x58020000
 80058b0:	58020400 	.word	0x58020400
 80058b4:	58020800 	.word	0x58020800
 80058b8:	58020c00 	.word	0x58020c00
 80058bc:	58021000 	.word	0x58021000
 80058c0:	58021400 	.word	0x58021400
 80058c4:	58021800 	.word	0x58021800
 80058c8:	58021c00 	.word	0x58021c00
 80058cc:	58022000 	.word	0x58022000
 80058d0:	58022400 	.word	0x58022400
 80058d4:	2300      	movs	r3, #0
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	f002 0203 	and.w	r2, r2, #3
 80058dc:	0092      	lsls	r2, r2, #2
 80058de:	4093      	lsls	r3, r2
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058e6:	4938      	ldr	r1, [pc, #224]	; (80059c8 <HAL_GPIO_Init+0x35c>)
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	089b      	lsrs	r3, r3, #2
 80058ec:	3302      	adds	r3, #2
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	43db      	mvns	r3, r3
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	4013      	ands	r3, r2
 8005904:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	4313      	orrs	r3, r2
 8005918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800591a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	43db      	mvns	r3, r3
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	4013      	ands	r3, r2
 8005932:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	4313      	orrs	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005948:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	43db      	mvns	r3, r3
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	4013      	ands	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	43db      	mvns	r3, r3
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	4013      	ands	r3, r2
 8005988:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	4313      	orrs	r3, r2
 800599c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	3301      	adds	r3, #1
 80059a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	fa22 f303 	lsr.w	r3, r2, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f47f ae63 	bne.w	8005680 <HAL_GPIO_Init+0x14>
  }
}
 80059ba:	bf00      	nop
 80059bc:	bf00      	nop
 80059be:	3724      	adds	r7, #36	; 0x24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	58000400 	.word	0x58000400

080059cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	807b      	strh	r3, [r7, #2]
 80059d8:	4613      	mov	r3, r2
 80059da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059dc:	787b      	ldrb	r3, [r7, #1]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059e2:	887a      	ldrh	r2, [r7, #2]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80059e8:	e003      	b.n	80059f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80059ea:	887b      	ldrh	r3, [r7, #2]
 80059ec:	041a      	lsls	r2, r3, #16
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	619a      	str	r2, [r3, #24]
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
	...

08005a00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005a08:	4b29      	ldr	r3, [pc, #164]	; (8005ab0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	2b06      	cmp	r3, #6
 8005a12:	d00a      	beq.n	8005a2a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005a14:	4b26      	ldr	r3, [pc, #152]	; (8005ab0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d001      	beq.n	8005a26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e040      	b.n	8005aa8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	e03e      	b.n	8005aa8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005a2a:	4b21      	ldr	r3, [pc, #132]	; (8005ab0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005a32:	491f      	ldr	r1, [pc, #124]	; (8005ab0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005a3a:	f7fb febf 	bl	80017bc <HAL_GetTick>
 8005a3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a40:	e009      	b.n	8005a56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005a42:	f7fb febb 	bl	80017bc <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a50:	d901      	bls.n	8005a56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e028      	b.n	8005aa8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a56:	4b16      	ldr	r3, [pc, #88]	; (8005ab0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a62:	d1ee      	bne.n	8005a42 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b1e      	cmp	r3, #30
 8005a68:	d008      	beq.n	8005a7c <HAL_PWREx_ConfigSupply+0x7c>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8005a6e:	d005      	beq.n	8005a7c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b1d      	cmp	r3, #29
 8005a74:	d002      	beq.n	8005a7c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b2d      	cmp	r3, #45	; 0x2d
 8005a7a:	d114      	bne.n	8005aa6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005a7c:	f7fb fe9e 	bl	80017bc <HAL_GetTick>
 8005a80:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005a82:	e009      	b.n	8005a98 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005a84:	f7fb fe9a 	bl	80017bc <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a92:	d901      	bls.n	8005a98 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e007      	b.n	8005aa8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005a98:	4b05      	ldr	r3, [pc, #20]	; (8005ab0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa4:	d1ee      	bne.n	8005a84 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	58024800 	.word	0x58024800

08005ab4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b08c      	sub	sp, #48	; 0x30
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d102      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f000 bc1f 	b.w	8006306 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 80b3 	beq.w	8005c3c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ad6:	4b95      	ldr	r3, [pc, #596]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ae0:	4b92      	ldr	r3, [pc, #584]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae8:	2b10      	cmp	r3, #16
 8005aea:	d007      	beq.n	8005afc <HAL_RCC_OscConfig+0x48>
 8005aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aee:	2b18      	cmp	r3, #24
 8005af0:	d112      	bne.n	8005b18 <HAL_RCC_OscConfig+0x64>
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	f003 0303 	and.w	r3, r3, #3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d10d      	bne.n	8005b18 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005afc:	4b8b      	ldr	r3, [pc, #556]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 8098 	beq.w	8005c3a <HAL_RCC_OscConfig+0x186>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f040 8093 	bne.w	8005c3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e3f6      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b20:	d106      	bne.n	8005b30 <HAL_RCC_OscConfig+0x7c>
 8005b22:	4b82      	ldr	r3, [pc, #520]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a81      	ldr	r2, [pc, #516]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	e058      	b.n	8005be2 <HAL_RCC_OscConfig+0x12e>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d112      	bne.n	8005b5e <HAL_RCC_OscConfig+0xaa>
 8005b38:	4b7c      	ldr	r3, [pc, #496]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a7b      	ldr	r2, [pc, #492]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	4b79      	ldr	r3, [pc, #484]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a78      	ldr	r2, [pc, #480]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005b4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b4e:	6013      	str	r3, [r2, #0]
 8005b50:	4b76      	ldr	r3, [pc, #472]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a75      	ldr	r2, [pc, #468]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	e041      	b.n	8005be2 <HAL_RCC_OscConfig+0x12e>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b66:	d112      	bne.n	8005b8e <HAL_RCC_OscConfig+0xda>
 8005b68:	4b70      	ldr	r3, [pc, #448]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a6f      	ldr	r2, [pc, #444]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005b6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	4b6d      	ldr	r3, [pc, #436]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a6c      	ldr	r2, [pc, #432]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005b7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	4b6a      	ldr	r3, [pc, #424]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a69      	ldr	r2, [pc, #420]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b8a:	6013      	str	r3, [r2, #0]
 8005b8c:	e029      	b.n	8005be2 <HAL_RCC_OscConfig+0x12e>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005b96:	d112      	bne.n	8005bbe <HAL_RCC_OscConfig+0x10a>
 8005b98:	4b64      	ldr	r3, [pc, #400]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a63      	ldr	r2, [pc, #396]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005b9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	4b61      	ldr	r3, [pc, #388]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a60      	ldr	r2, [pc, #384]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	4b5e      	ldr	r3, [pc, #376]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a5d      	ldr	r2, [pc, #372]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	e011      	b.n	8005be2 <HAL_RCC_OscConfig+0x12e>
 8005bbe:	4b5b      	ldr	r3, [pc, #364]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a5a      	ldr	r2, [pc, #360]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	4b58      	ldr	r3, [pc, #352]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a57      	ldr	r2, [pc, #348]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005bd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	4b55      	ldr	r3, [pc, #340]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a54      	ldr	r2, [pc, #336]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005bdc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005be0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d013      	beq.n	8005c12 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bea:	f7fb fde7 	bl	80017bc <HAL_GetTick>
 8005bee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bf0:	e008      	b.n	8005c04 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bf2:	f7fb fde3 	bl	80017bc <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b64      	cmp	r3, #100	; 0x64
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e380      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c04:	4b49      	ldr	r3, [pc, #292]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0f0      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x13e>
 8005c10:	e014      	b.n	8005c3c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c12:	f7fb fdd3 	bl	80017bc <HAL_GetTick>
 8005c16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c18:	e008      	b.n	8005c2c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c1a:	f7fb fdcf 	bl	80017bc <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	2b64      	cmp	r3, #100	; 0x64
 8005c26:	d901      	bls.n	8005c2c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e36c      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c2c:	4b3f      	ldr	r3, [pc, #252]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1f0      	bne.n	8005c1a <HAL_RCC_OscConfig+0x166>
 8005c38:	e000      	b.n	8005c3c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c3a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 808c 	beq.w	8005d62 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c4a:	4b38      	ldr	r3, [pc, #224]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c52:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c54:	4b35      	ldr	r3, [pc, #212]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c58:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d007      	beq.n	8005c70 <HAL_RCC_OscConfig+0x1bc>
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	2b18      	cmp	r3, #24
 8005c64:	d137      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x222>
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	f003 0303 	and.w	r3, r3, #3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d132      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c70:	4b2e      	ldr	r3, [pc, #184]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <HAL_RCC_OscConfig+0x1d4>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e33e      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c88:	4b28      	ldr	r3, [pc, #160]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f023 0219 	bic.w	r2, r3, #25
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	4925      	ldr	r1, [pc, #148]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9a:	f7fb fd8f 	bl	80017bc <HAL_GetTick>
 8005c9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ca2:	f7fb fd8b 	bl	80017bc <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e328      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cb4:	4b1d      	ldr	r3, [pc, #116]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0f0      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc0:	4b1a      	ldr	r3, [pc, #104]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	061b      	lsls	r3, r3, #24
 8005cce:	4917      	ldr	r1, [pc, #92]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cd4:	e045      	b.n	8005d62 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d028      	beq.n	8005d30 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005cde:	4b13      	ldr	r3, [pc, #76]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f023 0219 	bic.w	r2, r3, #25
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	4910      	ldr	r1, [pc, #64]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf0:	f7fb fd64 	bl	80017bc <HAL_GetTick>
 8005cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cf8:	f7fb fd60 	bl	80017bc <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e2fd      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d0a:	4b08      	ldr	r3, [pc, #32]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0f0      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d16:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	061b      	lsls	r3, r3, #24
 8005d24:	4901      	ldr	r1, [pc, #4]	; (8005d2c <HAL_RCC_OscConfig+0x278>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	604b      	str	r3, [r1, #4]
 8005d2a:	e01a      	b.n	8005d62 <HAL_RCC_OscConfig+0x2ae>
 8005d2c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d30:	4b97      	ldr	r3, [pc, #604]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a96      	ldr	r2, [pc, #600]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005d36:	f023 0301 	bic.w	r3, r3, #1
 8005d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3c:	f7fb fd3e 	bl	80017bc <HAL_GetTick>
 8005d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d44:	f7fb fd3a 	bl	80017bc <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e2d7      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d56:	4b8e      	ldr	r3, [pc, #568]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0304 	and.w	r3, r3, #4
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1f0      	bne.n	8005d44 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0310 	and.w	r3, r3, #16
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d06a      	beq.n	8005e44 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d6e:	4b88      	ldr	r3, [pc, #544]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d76:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d78:	4b85      	ldr	r3, [pc, #532]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	d007      	beq.n	8005d94 <HAL_RCC_OscConfig+0x2e0>
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	2b18      	cmp	r3, #24
 8005d88:	d11b      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x30e>
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f003 0303 	and.w	r3, r3, #3
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d116      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d94:	4b7e      	ldr	r3, [pc, #504]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d005      	beq.n	8005dac <HAL_RCC_OscConfig+0x2f8>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	2b80      	cmp	r3, #128	; 0x80
 8005da6:	d001      	beq.n	8005dac <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e2ac      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005dac:	4b78      	ldr	r3, [pc, #480]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	061b      	lsls	r3, r3, #24
 8005dba:	4975      	ldr	r1, [pc, #468]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005dc0:	e040      	b.n	8005e44 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d023      	beq.n	8005e12 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005dca:	4b71      	ldr	r3, [pc, #452]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a70      	ldr	r2, [pc, #448]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd6:	f7fb fcf1 	bl	80017bc <HAL_GetTick>
 8005dda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ddc:	e008      	b.n	8005df0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005dde:	f7fb fced 	bl	80017bc <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d901      	bls.n	8005df0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e28a      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005df0:	4b67      	ldr	r3, [pc, #412]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0f0      	beq.n	8005dde <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005dfc:	4b64      	ldr	r3, [pc, #400]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	061b      	lsls	r3, r3, #24
 8005e0a:	4961      	ldr	r1, [pc, #388]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	60cb      	str	r3, [r1, #12]
 8005e10:	e018      	b.n	8005e44 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005e12:	4b5f      	ldr	r3, [pc, #380]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a5e      	ldr	r2, [pc, #376]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005e18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1e:	f7fb fccd 	bl	80017bc <HAL_GetTick>
 8005e22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e24:	e008      	b.n	8005e38 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e26:	f7fb fcc9 	bl	80017bc <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d901      	bls.n	8005e38 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e266      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e38:	4b55      	ldr	r3, [pc, #340]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1f0      	bne.n	8005e26 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0308 	and.w	r3, r3, #8
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d036      	beq.n	8005ebe <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d019      	beq.n	8005e8c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e58:	4b4d      	ldr	r3, [pc, #308]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e5c:	4a4c      	ldr	r2, [pc, #304]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005e5e:	f043 0301 	orr.w	r3, r3, #1
 8005e62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e64:	f7fb fcaa 	bl	80017bc <HAL_GetTick>
 8005e68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e6a:	e008      	b.n	8005e7e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e6c:	f7fb fca6 	bl	80017bc <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e243      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e7e:	4b44      	ldr	r3, [pc, #272]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0f0      	beq.n	8005e6c <HAL_RCC_OscConfig+0x3b8>
 8005e8a:	e018      	b.n	8005ebe <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e8c:	4b40      	ldr	r3, [pc, #256]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e90:	4a3f      	ldr	r2, [pc, #252]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005e92:	f023 0301 	bic.w	r3, r3, #1
 8005e96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e98:	f7fb fc90 	bl	80017bc <HAL_GetTick>
 8005e9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ea0:	f7fb fc8c 	bl	80017bc <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e229      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005eb2:	4b37      	ldr	r3, [pc, #220]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1f0      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d036      	beq.n	8005f38 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d019      	beq.n	8005f06 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ed2:	4b2f      	ldr	r3, [pc, #188]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a2e      	ldr	r2, [pc, #184]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005ed8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005edc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ede:	f7fb fc6d 	bl	80017bc <HAL_GetTick>
 8005ee2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ee4:	e008      	b.n	8005ef8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ee6:	f7fb fc69 	bl	80017bc <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e206      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ef8:	4b25      	ldr	r3, [pc, #148]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0f0      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x432>
 8005f04:	e018      	b.n	8005f38 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f06:	4b22      	ldr	r3, [pc, #136]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a21      	ldr	r2, [pc, #132]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005f0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f12:	f7fb fc53 	bl	80017bc <HAL_GetTick>
 8005f16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f18:	e008      	b.n	8005f2c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f1a:	f7fb fc4f 	bl	80017bc <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d901      	bls.n	8005f2c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e1ec      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f2c:	4b18      	ldr	r3, [pc, #96]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1f0      	bne.n	8005f1a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 80af 	beq.w	80060a4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f46:	4b13      	ldr	r3, [pc, #76]	; (8005f94 <HAL_RCC_OscConfig+0x4e0>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a12      	ldr	r2, [pc, #72]	; (8005f94 <HAL_RCC_OscConfig+0x4e0>)
 8005f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f52:	f7fb fc33 	bl	80017bc <HAL_GetTick>
 8005f56:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f58:	e008      	b.n	8005f6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f5a:	f7fb fc2f 	bl	80017bc <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b64      	cmp	r3, #100	; 0x64
 8005f66:	d901      	bls.n	8005f6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e1cc      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f6c:	4b09      	ldr	r3, [pc, #36]	; (8005f94 <HAL_RCC_OscConfig+0x4e0>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0f0      	beq.n	8005f5a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d10b      	bne.n	8005f98 <HAL_RCC_OscConfig+0x4e4>
 8005f80:	4b03      	ldr	r3, [pc, #12]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f84:	4a02      	ldr	r2, [pc, #8]	; (8005f90 <HAL_RCC_OscConfig+0x4dc>)
 8005f86:	f043 0301 	orr.w	r3, r3, #1
 8005f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f8c:	e05b      	b.n	8006046 <HAL_RCC_OscConfig+0x592>
 8005f8e:	bf00      	nop
 8005f90:	58024400 	.word	0x58024400
 8005f94:	58024800 	.word	0x58024800
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d112      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x512>
 8005fa0:	4b9d      	ldr	r3, [pc, #628]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8005fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa4:	4a9c      	ldr	r2, [pc, #624]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8005fa6:	f023 0301 	bic.w	r3, r3, #1
 8005faa:	6713      	str	r3, [r2, #112]	; 0x70
 8005fac:	4b9a      	ldr	r3, [pc, #616]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8005fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb0:	4a99      	ldr	r2, [pc, #612]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8005fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb8:	4b97      	ldr	r3, [pc, #604]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8005fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fbc:	4a96      	ldr	r2, [pc, #600]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8005fbe:	f023 0304 	bic.w	r3, r3, #4
 8005fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fc4:	e03f      	b.n	8006046 <HAL_RCC_OscConfig+0x592>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	2b05      	cmp	r3, #5
 8005fcc:	d112      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x540>
 8005fce:	4b92      	ldr	r3, [pc, #584]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8005fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd2:	4a91      	ldr	r2, [pc, #580]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8005fd4:	f043 0304 	orr.w	r3, r3, #4
 8005fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8005fda:	4b8f      	ldr	r3, [pc, #572]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8005fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fde:	4a8e      	ldr	r2, [pc, #568]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8005fe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe6:	4b8c      	ldr	r3, [pc, #560]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8005fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fea:	4a8b      	ldr	r2, [pc, #556]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8005fec:	f043 0301 	orr.w	r3, r3, #1
 8005ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ff2:	e028      	b.n	8006046 <HAL_RCC_OscConfig+0x592>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	2b85      	cmp	r3, #133	; 0x85
 8005ffa:	d112      	bne.n	8006022 <HAL_RCC_OscConfig+0x56e>
 8005ffc:	4b86      	ldr	r3, [pc, #536]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8005ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006000:	4a85      	ldr	r2, [pc, #532]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8006002:	f043 0304 	orr.w	r3, r3, #4
 8006006:	6713      	str	r3, [r2, #112]	; 0x70
 8006008:	4b83      	ldr	r3, [pc, #524]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 800600a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600c:	4a82      	ldr	r2, [pc, #520]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 800600e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006012:	6713      	str	r3, [r2, #112]	; 0x70
 8006014:	4b80      	ldr	r3, [pc, #512]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8006016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006018:	4a7f      	ldr	r2, [pc, #508]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 800601a:	f043 0301 	orr.w	r3, r3, #1
 800601e:	6713      	str	r3, [r2, #112]	; 0x70
 8006020:	e011      	b.n	8006046 <HAL_RCC_OscConfig+0x592>
 8006022:	4b7d      	ldr	r3, [pc, #500]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8006024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006026:	4a7c      	ldr	r2, [pc, #496]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8006028:	f023 0301 	bic.w	r3, r3, #1
 800602c:	6713      	str	r3, [r2, #112]	; 0x70
 800602e:	4b7a      	ldr	r3, [pc, #488]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8006030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006032:	4a79      	ldr	r2, [pc, #484]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8006034:	f023 0304 	bic.w	r3, r3, #4
 8006038:	6713      	str	r3, [r2, #112]	; 0x70
 800603a:	4b77      	ldr	r3, [pc, #476]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 800603c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603e:	4a76      	ldr	r2, [pc, #472]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8006040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006044:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d015      	beq.n	800607a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800604e:	f7fb fbb5 	bl	80017bc <HAL_GetTick>
 8006052:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006054:	e00a      	b.n	800606c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006056:	f7fb fbb1 	bl	80017bc <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	f241 3288 	movw	r2, #5000	; 0x1388
 8006064:	4293      	cmp	r3, r2
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e14c      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800606c:	4b6a      	ldr	r3, [pc, #424]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 800606e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0ee      	beq.n	8006056 <HAL_RCC_OscConfig+0x5a2>
 8006078:	e014      	b.n	80060a4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800607a:	f7fb fb9f 	bl	80017bc <HAL_GetTick>
 800607e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006080:	e00a      	b.n	8006098 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006082:	f7fb fb9b 	bl	80017bc <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006090:	4293      	cmp	r3, r2
 8006092:	d901      	bls.n	8006098 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e136      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006098:	4b5f      	ldr	r3, [pc, #380]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 800609a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1ee      	bne.n	8006082 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 812b 	beq.w	8006304 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80060ae:	4b5a      	ldr	r3, [pc, #360]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060b6:	2b18      	cmp	r3, #24
 80060b8:	f000 80bb 	beq.w	8006232 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	f040 8095 	bne.w	80061f0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c6:	4b54      	ldr	r3, [pc, #336]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a53      	ldr	r2, [pc, #332]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 80060cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d2:	f7fb fb73 	bl	80017bc <HAL_GetTick>
 80060d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060d8:	e008      	b.n	80060ec <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060da:	f7fb fb6f 	bl	80017bc <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e10c      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060ec:	4b4a      	ldr	r3, [pc, #296]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1f0      	bne.n	80060da <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060f8:	4b47      	ldr	r3, [pc, #284]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 80060fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060fc:	4b47      	ldr	r3, [pc, #284]	; (800621c <HAL_RCC_OscConfig+0x768>)
 80060fe:	4013      	ands	r3, r2
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006108:	0112      	lsls	r2, r2, #4
 800610a:	430a      	orrs	r2, r1
 800610c:	4942      	ldr	r1, [pc, #264]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 800610e:	4313      	orrs	r3, r2
 8006110:	628b      	str	r3, [r1, #40]	; 0x28
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006116:	3b01      	subs	r3, #1
 8006118:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006120:	3b01      	subs	r3, #1
 8006122:	025b      	lsls	r3, r3, #9
 8006124:	b29b      	uxth	r3, r3
 8006126:	431a      	orrs	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612c:	3b01      	subs	r3, #1
 800612e:	041b      	lsls	r3, r3, #16
 8006130:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006134:	431a      	orrs	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613a:	3b01      	subs	r3, #1
 800613c:	061b      	lsls	r3, r3, #24
 800613e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006142:	4935      	ldr	r1, [pc, #212]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8006144:	4313      	orrs	r3, r2
 8006146:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006148:	4b33      	ldr	r3, [pc, #204]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	4a32      	ldr	r2, [pc, #200]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 800614e:	f023 0301 	bic.w	r3, r3, #1
 8006152:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006154:	4b30      	ldr	r3, [pc, #192]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8006156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006158:	4b31      	ldr	r3, [pc, #196]	; (8006220 <HAL_RCC_OscConfig+0x76c>)
 800615a:	4013      	ands	r3, r2
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006160:	00d2      	lsls	r2, r2, #3
 8006162:	492d      	ldr	r1, [pc, #180]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8006164:	4313      	orrs	r3, r2
 8006166:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006168:	4b2b      	ldr	r3, [pc, #172]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	f023 020c 	bic.w	r2, r3, #12
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	4928      	ldr	r1, [pc, #160]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8006176:	4313      	orrs	r3, r2
 8006178:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800617a:	4b27      	ldr	r3, [pc, #156]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 800617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617e:	f023 0202 	bic.w	r2, r3, #2
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006186:	4924      	ldr	r1, [pc, #144]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8006188:	4313      	orrs	r3, r2
 800618a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800618c:	4b22      	ldr	r3, [pc, #136]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	4a21      	ldr	r2, [pc, #132]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 8006192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006196:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006198:	4b1f      	ldr	r3, [pc, #124]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 800619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619c:	4a1e      	ldr	r2, [pc, #120]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 800619e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80061a4:	4b1c      	ldr	r3, [pc, #112]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	4a1b      	ldr	r2, [pc, #108]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 80061aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80061b0:	4b19      	ldr	r3, [pc, #100]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	4a18      	ldr	r2, [pc, #96]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 80061b6:	f043 0301 	orr.w	r3, r3, #1
 80061ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061bc:	4b16      	ldr	r3, [pc, #88]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a15      	ldr	r2, [pc, #84]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 80061c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c8:	f7fb faf8 	bl	80017bc <HAL_GetTick>
 80061cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061ce:	e008      	b.n	80061e2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061d0:	f7fb faf4 	bl	80017bc <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d901      	bls.n	80061e2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e091      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061e2:	4b0d      	ldr	r3, [pc, #52]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0f0      	beq.n	80061d0 <HAL_RCC_OscConfig+0x71c>
 80061ee:	e089      	b.n	8006304 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061f0:	4b09      	ldr	r3, [pc, #36]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a08      	ldr	r2, [pc, #32]	; (8006218 <HAL_RCC_OscConfig+0x764>)
 80061f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fc:	f7fb fade 	bl	80017bc <HAL_GetTick>
 8006200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006202:	e00f      	b.n	8006224 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006204:	f7fb fada 	bl	80017bc <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d908      	bls.n	8006224 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e077      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
 8006216:	bf00      	nop
 8006218:	58024400 	.word	0x58024400
 800621c:	fffffc0c 	.word	0xfffffc0c
 8006220:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006224:	4b3a      	ldr	r3, [pc, #232]	; (8006310 <HAL_RCC_OscConfig+0x85c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e9      	bne.n	8006204 <HAL_RCC_OscConfig+0x750>
 8006230:	e068      	b.n	8006304 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006232:	4b37      	ldr	r3, [pc, #220]	; (8006310 <HAL_RCC_OscConfig+0x85c>)
 8006234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006236:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006238:	4b35      	ldr	r3, [pc, #212]	; (8006310 <HAL_RCC_OscConfig+0x85c>)
 800623a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	2b01      	cmp	r3, #1
 8006244:	d031      	beq.n	80062aa <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f003 0203 	and.w	r2, r3, #3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006250:	429a      	cmp	r2, r3
 8006252:	d12a      	bne.n	80062aa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	091b      	lsrs	r3, r3, #4
 8006258:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006260:	429a      	cmp	r2, r3
 8006262:	d122      	bne.n	80062aa <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006270:	429a      	cmp	r2, r3
 8006272:	d11a      	bne.n	80062aa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	0a5b      	lsrs	r3, r3, #9
 8006278:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006280:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006282:	429a      	cmp	r2, r3
 8006284:	d111      	bne.n	80062aa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	0c1b      	lsrs	r3, r3, #16
 800628a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006292:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006294:	429a      	cmp	r2, r3
 8006296:	d108      	bne.n	80062aa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	0e1b      	lsrs	r3, r3, #24
 800629c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d001      	beq.n	80062ae <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e02b      	b.n	8006306 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80062ae:	4b18      	ldr	r3, [pc, #96]	; (8006310 <HAL_RCC_OscConfig+0x85c>)
 80062b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b2:	08db      	lsrs	r3, r3, #3
 80062b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062b8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d01f      	beq.n	8006304 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80062c4:	4b12      	ldr	r3, [pc, #72]	; (8006310 <HAL_RCC_OscConfig+0x85c>)
 80062c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c8:	4a11      	ldr	r2, [pc, #68]	; (8006310 <HAL_RCC_OscConfig+0x85c>)
 80062ca:	f023 0301 	bic.w	r3, r3, #1
 80062ce:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80062d0:	f7fb fa74 	bl	80017bc <HAL_GetTick>
 80062d4:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80062d6:	bf00      	nop
 80062d8:	f7fb fa70 	bl	80017bc <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d0f9      	beq.n	80062d8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80062e4:	4b0a      	ldr	r3, [pc, #40]	; (8006310 <HAL_RCC_OscConfig+0x85c>)
 80062e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062e8:	4b0a      	ldr	r3, [pc, #40]	; (8006314 <HAL_RCC_OscConfig+0x860>)
 80062ea:	4013      	ands	r3, r2
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80062f0:	00d2      	lsls	r2, r2, #3
 80062f2:	4907      	ldr	r1, [pc, #28]	; (8006310 <HAL_RCC_OscConfig+0x85c>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80062f8:	4b05      	ldr	r3, [pc, #20]	; (8006310 <HAL_RCC_OscConfig+0x85c>)
 80062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fc:	4a04      	ldr	r2, [pc, #16]	; (8006310 <HAL_RCC_OscConfig+0x85c>)
 80062fe:	f043 0301 	orr.w	r3, r3, #1
 8006302:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3730      	adds	r7, #48	; 0x30
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	58024400 	.word	0x58024400
 8006314:	ffff0007 	.word	0xffff0007

08006318 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e19c      	b.n	8006666 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800632c:	4b8a      	ldr	r3, [pc, #552]	; (8006558 <HAL_RCC_ClockConfig+0x240>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 030f 	and.w	r3, r3, #15
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d910      	bls.n	800635c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633a:	4b87      	ldr	r3, [pc, #540]	; (8006558 <HAL_RCC_ClockConfig+0x240>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f023 020f 	bic.w	r2, r3, #15
 8006342:	4985      	ldr	r1, [pc, #532]	; (8006558 <HAL_RCC_ClockConfig+0x240>)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	4313      	orrs	r3, r2
 8006348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800634a:	4b83      	ldr	r3, [pc, #524]	; (8006558 <HAL_RCC_ClockConfig+0x240>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 030f 	and.w	r3, r3, #15
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d001      	beq.n	800635c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e184      	b.n	8006666 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d010      	beq.n	800638a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691a      	ldr	r2, [r3, #16]
 800636c:	4b7b      	ldr	r3, [pc, #492]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006374:	429a      	cmp	r2, r3
 8006376:	d908      	bls.n	800638a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006378:	4b78      	ldr	r3, [pc, #480]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	4975      	ldr	r1, [pc, #468]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 8006386:	4313      	orrs	r3, r2
 8006388:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d010      	beq.n	80063b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	695a      	ldr	r2, [r3, #20]
 800639a:	4b70      	ldr	r3, [pc, #448]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d908      	bls.n	80063b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80063a6:	4b6d      	ldr	r3, [pc, #436]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	496a      	ldr	r1, [pc, #424]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0310 	and.w	r3, r3, #16
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d010      	beq.n	80063e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	699a      	ldr	r2, [r3, #24]
 80063c8:	4b64      	ldr	r3, [pc, #400]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d908      	bls.n	80063e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80063d4:	4b61      	ldr	r3, [pc, #388]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	495e      	ldr	r1, [pc, #376]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d010      	beq.n	8006414 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69da      	ldr	r2, [r3, #28]
 80063f6:	4b59      	ldr	r3, [pc, #356]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063fe:	429a      	cmp	r2, r3
 8006400:	d908      	bls.n	8006414 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006402:	4b56      	ldr	r3, [pc, #344]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	4953      	ldr	r1, [pc, #332]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 8006410:	4313      	orrs	r3, r2
 8006412:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d010      	beq.n	8006442 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	4b4d      	ldr	r3, [pc, #308]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	429a      	cmp	r2, r3
 800642e:	d908      	bls.n	8006442 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006430:	4b4a      	ldr	r3, [pc, #296]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	f023 020f 	bic.w	r2, r3, #15
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	4947      	ldr	r1, [pc, #284]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 800643e:	4313      	orrs	r3, r2
 8006440:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d055      	beq.n	80064fa <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800644e:	4b43      	ldr	r3, [pc, #268]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	4940      	ldr	r1, [pc, #256]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 800645c:	4313      	orrs	r3, r2
 800645e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	2b02      	cmp	r3, #2
 8006466:	d107      	bne.n	8006478 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006468:	4b3c      	ldr	r3, [pc, #240]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d121      	bne.n	80064b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e0f6      	b.n	8006666 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	2b03      	cmp	r3, #3
 800647e:	d107      	bne.n	8006490 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006480:	4b36      	ldr	r3, [pc, #216]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d115      	bne.n	80064b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e0ea      	b.n	8006666 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d107      	bne.n	80064a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006498:	4b30      	ldr	r3, [pc, #192]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d109      	bne.n	80064b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e0de      	b.n	8006666 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064a8:	4b2c      	ldr	r3, [pc, #176]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e0d6      	b.n	8006666 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064b8:	4b28      	ldr	r3, [pc, #160]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	f023 0207 	bic.w	r2, r3, #7
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	4925      	ldr	r1, [pc, #148]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ca:	f7fb f977 	bl	80017bc <HAL_GetTick>
 80064ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064d0:	e00a      	b.n	80064e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064d2:	f7fb f973 	bl	80017bc <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e0be      	b.n	8006666 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e8:	4b1c      	ldr	r3, [pc, #112]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	00db      	lsls	r3, r3, #3
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d1eb      	bne.n	80064d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d010      	beq.n	8006528 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68da      	ldr	r2, [r3, #12]
 800650a:	4b14      	ldr	r3, [pc, #80]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	429a      	cmp	r2, r3
 8006514:	d208      	bcs.n	8006528 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006516:	4b11      	ldr	r3, [pc, #68]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	f023 020f 	bic.w	r2, r3, #15
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	490e      	ldr	r1, [pc, #56]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 8006524:	4313      	orrs	r3, r2
 8006526:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006528:	4b0b      	ldr	r3, [pc, #44]	; (8006558 <HAL_RCC_ClockConfig+0x240>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 030f 	and.w	r3, r3, #15
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d214      	bcs.n	8006560 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006536:	4b08      	ldr	r3, [pc, #32]	; (8006558 <HAL_RCC_ClockConfig+0x240>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f023 020f 	bic.w	r2, r3, #15
 800653e:	4906      	ldr	r1, [pc, #24]	; (8006558 <HAL_RCC_ClockConfig+0x240>)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	4313      	orrs	r3, r2
 8006544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006546:	4b04      	ldr	r3, [pc, #16]	; (8006558 <HAL_RCC_ClockConfig+0x240>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 030f 	and.w	r3, r3, #15
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	429a      	cmp	r2, r3
 8006552:	d005      	beq.n	8006560 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e086      	b.n	8006666 <HAL_RCC_ClockConfig+0x34e>
 8006558:	52002000 	.word	0x52002000
 800655c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	d010      	beq.n	800658e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691a      	ldr	r2, [r3, #16]
 8006570:	4b3f      	ldr	r3, [pc, #252]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006578:	429a      	cmp	r2, r3
 800657a:	d208      	bcs.n	800658e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800657c:	4b3c      	ldr	r3, [pc, #240]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	4939      	ldr	r1, [pc, #228]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 800658a:	4313      	orrs	r3, r2
 800658c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0308 	and.w	r3, r3, #8
 8006596:	2b00      	cmp	r3, #0
 8006598:	d010      	beq.n	80065bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	695a      	ldr	r2, [r3, #20]
 800659e:	4b34      	ldr	r3, [pc, #208]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d208      	bcs.n	80065bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065aa:	4b31      	ldr	r3, [pc, #196]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	492e      	ldr	r1, [pc, #184]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0310 	and.w	r3, r3, #16
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d010      	beq.n	80065ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	699a      	ldr	r2, [r3, #24]
 80065cc:	4b28      	ldr	r3, [pc, #160]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d208      	bcs.n	80065ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065d8:	4b25      	ldr	r3, [pc, #148]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	4922      	ldr	r1, [pc, #136]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d010      	beq.n	8006618 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69da      	ldr	r2, [r3, #28]
 80065fa:	4b1d      	ldr	r3, [pc, #116]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006602:	429a      	cmp	r2, r3
 8006604:	d208      	bcs.n	8006618 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006606:	4b1a      	ldr	r3, [pc, #104]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	4917      	ldr	r1, [pc, #92]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 8006614:	4313      	orrs	r3, r2
 8006616:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006618:	f000 f834 	bl	8006684 <HAL_RCC_GetSysClockFreq>
 800661c:	4602      	mov	r2, r0
 800661e:	4b14      	ldr	r3, [pc, #80]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	0a1b      	lsrs	r3, r3, #8
 8006624:	f003 030f 	and.w	r3, r3, #15
 8006628:	4912      	ldr	r1, [pc, #72]	; (8006674 <HAL_RCC_ClockConfig+0x35c>)
 800662a:	5ccb      	ldrb	r3, [r1, r3]
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	fa22 f303 	lsr.w	r3, r2, r3
 8006634:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006636:	4b0e      	ldr	r3, [pc, #56]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	4a0d      	ldr	r2, [pc, #52]	; (8006674 <HAL_RCC_ClockConfig+0x35c>)
 8006640:	5cd3      	ldrb	r3, [r2, r3]
 8006642:	f003 031f 	and.w	r3, r3, #31
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	fa22 f303 	lsr.w	r3, r2, r3
 800664c:	4a0a      	ldr	r2, [pc, #40]	; (8006678 <HAL_RCC_ClockConfig+0x360>)
 800664e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006650:	4a0a      	ldr	r2, [pc, #40]	; (800667c <HAL_RCC_ClockConfig+0x364>)
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006656:	4b0a      	ldr	r3, [pc, #40]	; (8006680 <HAL_RCC_ClockConfig+0x368>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4618      	mov	r0, r3
 800665c:	f7fb f864 	bl	8001728 <HAL_InitTick>
 8006660:	4603      	mov	r3, r0
 8006662:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006664:	7bfb      	ldrb	r3, [r7, #15]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	58024400 	.word	0x58024400
 8006674:	0800caf8 	.word	0x0800caf8
 8006678:	24000004 	.word	0x24000004
 800667c:	24000000 	.word	0x24000000
 8006680:	24000008 	.word	0x24000008

08006684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006684:	b480      	push	{r7}
 8006686:	b089      	sub	sp, #36	; 0x24
 8006688:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800668a:	4bb3      	ldr	r3, [pc, #716]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006692:	2b18      	cmp	r3, #24
 8006694:	f200 8155 	bhi.w	8006942 <HAL_RCC_GetSysClockFreq+0x2be>
 8006698:	a201      	add	r2, pc, #4	; (adr r2, 80066a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800669a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669e:	bf00      	nop
 80066a0:	08006705 	.word	0x08006705
 80066a4:	08006943 	.word	0x08006943
 80066a8:	08006943 	.word	0x08006943
 80066ac:	08006943 	.word	0x08006943
 80066b0:	08006943 	.word	0x08006943
 80066b4:	08006943 	.word	0x08006943
 80066b8:	08006943 	.word	0x08006943
 80066bc:	08006943 	.word	0x08006943
 80066c0:	0800672b 	.word	0x0800672b
 80066c4:	08006943 	.word	0x08006943
 80066c8:	08006943 	.word	0x08006943
 80066cc:	08006943 	.word	0x08006943
 80066d0:	08006943 	.word	0x08006943
 80066d4:	08006943 	.word	0x08006943
 80066d8:	08006943 	.word	0x08006943
 80066dc:	08006943 	.word	0x08006943
 80066e0:	08006731 	.word	0x08006731
 80066e4:	08006943 	.word	0x08006943
 80066e8:	08006943 	.word	0x08006943
 80066ec:	08006943 	.word	0x08006943
 80066f0:	08006943 	.word	0x08006943
 80066f4:	08006943 	.word	0x08006943
 80066f8:	08006943 	.word	0x08006943
 80066fc:	08006943 	.word	0x08006943
 8006700:	08006737 	.word	0x08006737
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006704:	4b94      	ldr	r3, [pc, #592]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0320 	and.w	r3, r3, #32
 800670c:	2b00      	cmp	r3, #0
 800670e:	d009      	beq.n	8006724 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006710:	4b91      	ldr	r3, [pc, #580]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	08db      	lsrs	r3, r3, #3
 8006716:	f003 0303 	and.w	r3, r3, #3
 800671a:	4a90      	ldr	r2, [pc, #576]	; (800695c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800671c:	fa22 f303 	lsr.w	r3, r2, r3
 8006720:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006722:	e111      	b.n	8006948 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006724:	4b8d      	ldr	r3, [pc, #564]	; (800695c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006726:	61bb      	str	r3, [r7, #24]
      break;
 8006728:	e10e      	b.n	8006948 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800672a:	4b8d      	ldr	r3, [pc, #564]	; (8006960 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800672c:	61bb      	str	r3, [r7, #24]
      break;
 800672e:	e10b      	b.n	8006948 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006730:	4b8c      	ldr	r3, [pc, #560]	; (8006964 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006732:	61bb      	str	r3, [r7, #24]
      break;
 8006734:	e108      	b.n	8006948 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006736:	4b88      	ldr	r3, [pc, #544]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673a:	f003 0303 	and.w	r3, r3, #3
 800673e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006740:	4b85      	ldr	r3, [pc, #532]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006744:	091b      	lsrs	r3, r3, #4
 8006746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800674a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800674c:	4b82      	ldr	r3, [pc, #520]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006756:	4b80      	ldr	r3, [pc, #512]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675a:	08db      	lsrs	r3, r3, #3
 800675c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	fb02 f303 	mul.w	r3, r2, r3
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80e1 	beq.w	800693c <HAL_RCC_GetSysClockFreq+0x2b8>
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2b02      	cmp	r3, #2
 800677e:	f000 8083 	beq.w	8006888 <HAL_RCC_GetSysClockFreq+0x204>
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b02      	cmp	r3, #2
 8006786:	f200 80a1 	bhi.w	80068cc <HAL_RCC_GetSysClockFreq+0x248>
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <HAL_RCC_GetSysClockFreq+0x114>
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d056      	beq.n	8006844 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006796:	e099      	b.n	80068cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006798:	4b6f      	ldr	r3, [pc, #444]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0320 	and.w	r3, r3, #32
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d02d      	beq.n	8006800 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067a4:	4b6c      	ldr	r3, [pc, #432]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	08db      	lsrs	r3, r3, #3
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	4a6b      	ldr	r2, [pc, #428]	; (800695c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067b0:	fa22 f303 	lsr.w	r3, r2, r3
 80067b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	ee07 3a90 	vmov	s15, r3
 80067bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	ee07 3a90 	vmov	s15, r3
 80067c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ce:	4b62      	ldr	r3, [pc, #392]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d6:	ee07 3a90 	vmov	s15, r3
 80067da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067de:	ed97 6a02 	vldr	s12, [r7, #8]
 80067e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006968 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80067fe:	e087      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	ee07 3a90 	vmov	s15, r3
 8006806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800696c <HAL_RCC_GetSysClockFreq+0x2e8>
 800680e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006812:	4b51      	ldr	r3, [pc, #324]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800681a:	ee07 3a90 	vmov	s15, r3
 800681e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006822:	ed97 6a02 	vldr	s12, [r7, #8]
 8006826:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006968 <HAL_RCC_GetSysClockFreq+0x2e4>
 800682a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800682e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800683a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800683e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006842:	e065      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	ee07 3a90 	vmov	s15, r3
 800684a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800684e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006970 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006856:	4b40      	ldr	r3, [pc, #256]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800685e:	ee07 3a90 	vmov	s15, r3
 8006862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006866:	ed97 6a02 	vldr	s12, [r7, #8]
 800686a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006968 <HAL_RCC_GetSysClockFreq+0x2e4>
 800686e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800687a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800687e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006882:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006886:	e043      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	ee07 3a90 	vmov	s15, r3
 800688e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006892:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006974 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800689a:	4b2f      	ldr	r3, [pc, #188]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800689c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a2:	ee07 3a90 	vmov	s15, r3
 80068a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80068ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006968 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068ca:	e021      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	ee07 3a90 	vmov	s15, r3
 80068d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006970 <HAL_RCC_GetSysClockFreq+0x2ec>
 80068da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068de:	4b1e      	ldr	r3, [pc, #120]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e6:	ee07 3a90 	vmov	s15, r3
 80068ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80068f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006968 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800690a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800690e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006910:	4b11      	ldr	r3, [pc, #68]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	0a5b      	lsrs	r3, r3, #9
 8006916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800691a:	3301      	adds	r3, #1
 800691c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	ee07 3a90 	vmov	s15, r3
 8006924:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006928:	edd7 6a07 	vldr	s13, [r7, #28]
 800692c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006934:	ee17 3a90 	vmov	r3, s15
 8006938:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800693a:	e005      	b.n	8006948 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	61bb      	str	r3, [r7, #24]
      break;
 8006940:	e002      	b.n	8006948 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006942:	4b07      	ldr	r3, [pc, #28]	; (8006960 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006944:	61bb      	str	r3, [r7, #24]
      break;
 8006946:	bf00      	nop
  }

  return sysclockfreq;
 8006948:	69bb      	ldr	r3, [r7, #24]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3724      	adds	r7, #36	; 0x24
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	58024400 	.word	0x58024400
 800695c:	03d09000 	.word	0x03d09000
 8006960:	003d0900 	.word	0x003d0900
 8006964:	007a1200 	.word	0x007a1200
 8006968:	46000000 	.word	0x46000000
 800696c:	4c742400 	.word	0x4c742400
 8006970:	4a742400 	.word	0x4a742400
 8006974:	4af42400 	.word	0x4af42400

08006978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800697e:	f7ff fe81 	bl	8006684 <HAL_RCC_GetSysClockFreq>
 8006982:	4602      	mov	r2, r0
 8006984:	4b10      	ldr	r3, [pc, #64]	; (80069c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	0a1b      	lsrs	r3, r3, #8
 800698a:	f003 030f 	and.w	r3, r3, #15
 800698e:	490f      	ldr	r1, [pc, #60]	; (80069cc <HAL_RCC_GetHCLKFreq+0x54>)
 8006990:	5ccb      	ldrb	r3, [r1, r3]
 8006992:	f003 031f 	and.w	r3, r3, #31
 8006996:	fa22 f303 	lsr.w	r3, r2, r3
 800699a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800699c:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	4a09      	ldr	r2, [pc, #36]	; (80069cc <HAL_RCC_GetHCLKFreq+0x54>)
 80069a6:	5cd3      	ldrb	r3, [r2, r3]
 80069a8:	f003 031f 	and.w	r3, r3, #31
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	fa22 f303 	lsr.w	r3, r2, r3
 80069b2:	4a07      	ldr	r2, [pc, #28]	; (80069d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80069b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069b6:	4a07      	ldr	r2, [pc, #28]	; (80069d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80069bc:	4b04      	ldr	r3, [pc, #16]	; (80069d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80069be:	681b      	ldr	r3, [r3, #0]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	58024400 	.word	0x58024400
 80069cc:	0800caf8 	.word	0x0800caf8
 80069d0:	24000004 	.word	0x24000004
 80069d4:	24000000 	.word	0x24000000

080069d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80069dc:	f7ff ffcc 	bl	8006978 <HAL_RCC_GetHCLKFreq>
 80069e0:	4602      	mov	r2, r0
 80069e2:	4b06      	ldr	r3, [pc, #24]	; (80069fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	091b      	lsrs	r3, r3, #4
 80069e8:	f003 0307 	and.w	r3, r3, #7
 80069ec:	4904      	ldr	r1, [pc, #16]	; (8006a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80069ee:	5ccb      	ldrb	r3, [r1, r3]
 80069f0:	f003 031f 	and.w	r3, r3, #31
 80069f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	58024400 	.word	0x58024400
 8006a00:	0800caf8 	.word	0x0800caf8

08006a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006a08:	f7ff ffb6 	bl	8006978 <HAL_RCC_GetHCLKFreq>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	4b06      	ldr	r3, [pc, #24]	; (8006a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	0a1b      	lsrs	r3, r3, #8
 8006a14:	f003 0307 	and.w	r3, r3, #7
 8006a18:	4904      	ldr	r1, [pc, #16]	; (8006a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a1a:	5ccb      	ldrb	r3, [r1, r3]
 8006a1c:	f003 031f 	and.w	r3, r3, #31
 8006a20:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	58024400 	.word	0x58024400
 8006a2c:	0800caf8 	.word	0x0800caf8

08006a30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a34:	b0c8      	sub	sp, #288	; 0x120
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a42:	2300      	movs	r3, #0
 8006a44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006a54:	2500      	movs	r5, #0
 8006a56:	ea54 0305 	orrs.w	r3, r4, r5
 8006a5a:	d049      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a66:	d02f      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006a68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a6c:	d828      	bhi.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a72:	d01a      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006a74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a78:	d822      	bhi.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a82:	d007      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006a84:	e01c      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a86:	4ba7      	ldr	r3, [pc, #668]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8a:	4aa6      	ldr	r2, [pc, #664]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a92:	e01a      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a98:	3308      	adds	r3, #8
 8006a9a:	2102      	movs	r1, #2
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f002 fa6d 	bl	8008f7c <RCCEx_PLL2_Config>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006aa8:	e00f      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aae:	3328      	adds	r3, #40	; 0x28
 8006ab0:	2102      	movs	r1, #2
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f002 fb14 	bl	80090e0 <RCCEx_PLL3_Config>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006abe:	e004      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006ac6:	e000      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10a      	bne.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ad2:	4b94      	ldr	r3, [pc, #592]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ae0:	4a90      	ldr	r2, [pc, #576]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ae2:	430b      	orrs	r3, r1
 8006ae4:	6513      	str	r3, [r2, #80]	; 0x50
 8006ae6:	e003      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006aec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006afc:	f04f 0900 	mov.w	r9, #0
 8006b00:	ea58 0309 	orrs.w	r3, r8, r9
 8006b04:	d047      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d82a      	bhi.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006b10:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b16:	bf00      	nop
 8006b18:	08006b2d 	.word	0x08006b2d
 8006b1c:	08006b3b 	.word	0x08006b3b
 8006b20:	08006b51 	.word	0x08006b51
 8006b24:	08006b6f 	.word	0x08006b6f
 8006b28:	08006b6f 	.word	0x08006b6f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b2c:	4b7d      	ldr	r3, [pc, #500]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	4a7c      	ldr	r2, [pc, #496]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b38:	e01a      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b3e:	3308      	adds	r3, #8
 8006b40:	2100      	movs	r1, #0
 8006b42:	4618      	mov	r0, r3
 8006b44:	f002 fa1a 	bl	8008f7c <RCCEx_PLL2_Config>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b4e:	e00f      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b54:	3328      	adds	r3, #40	; 0x28
 8006b56:	2100      	movs	r1, #0
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f002 fac1 	bl	80090e0 <RCCEx_PLL3_Config>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b64:	e004      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006b6c:	e000      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10a      	bne.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b78:	4b6a      	ldr	r3, [pc, #424]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b7c:	f023 0107 	bic.w	r1, r3, #7
 8006b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b86:	4a67      	ldr	r2, [pc, #412]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	6513      	str	r3, [r2, #80]	; 0x50
 8006b8c:	e003      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b92:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006ba2:	f04f 0b00 	mov.w	fp, #0
 8006ba6:	ea5a 030b 	orrs.w	r3, sl, fp
 8006baa:	d054      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006bb6:	d036      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006bb8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006bbc:	d82f      	bhi.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bc2:	d032      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bc8:	d829      	bhi.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006bca:	2bc0      	cmp	r3, #192	; 0xc0
 8006bcc:	d02f      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006bce:	2bc0      	cmp	r3, #192	; 0xc0
 8006bd0:	d825      	bhi.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006bd2:	2b80      	cmp	r3, #128	; 0x80
 8006bd4:	d018      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006bd6:	2b80      	cmp	r3, #128	; 0x80
 8006bd8:	d821      	bhi.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006bde:	2b40      	cmp	r3, #64	; 0x40
 8006be0:	d007      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8006be2:	e01c      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006be4:	4b4f      	ldr	r3, [pc, #316]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	4a4e      	ldr	r2, [pc, #312]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006bf0:	e01e      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bf6:	3308      	adds	r3, #8
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f002 f9be 	bl	8008f7c <RCCEx_PLL2_Config>
 8006c00:	4603      	mov	r3, r0
 8006c02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006c06:	e013      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c0c:	3328      	adds	r3, #40	; 0x28
 8006c0e:	2100      	movs	r1, #0
 8006c10:	4618      	mov	r0, r3
 8006c12:	f002 fa65 	bl	80090e0 <RCCEx_PLL3_Config>
 8006c16:	4603      	mov	r3, r0
 8006c18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006c1c:	e008      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006c24:	e004      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006c26:	bf00      	nop
 8006c28:	e002      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006c2a:	bf00      	nop
 8006c2c:	e000      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006c2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10a      	bne.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006c38:	4b3a      	ldr	r3, [pc, #232]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c3c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c46:	4a37      	ldr	r2, [pc, #220]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	6513      	str	r3, [r2, #80]	; 0x50
 8006c4c:	e003      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c52:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006c62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c66:	2300      	movs	r3, #0
 8006c68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006c6c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006c70:	460b      	mov	r3, r1
 8006c72:	4313      	orrs	r3, r2
 8006c74:	d05c      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8006c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c7c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006c80:	d03b      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006c82:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006c86:	d834      	bhi.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c8c:	d037      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8006c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c92:	d82e      	bhi.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006c94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006c98:	d033      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006c9a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006c9e:	d828      	bhi.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ca4:	d01a      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006caa:	d822      	bhi.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb4:	d007      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006cb6:	e01c      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cb8:	4b1a      	ldr	r3, [pc, #104]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbc:	4a19      	ldr	r2, [pc, #100]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006cc4:	e01e      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cca:	3308      	adds	r3, #8
 8006ccc:	2100      	movs	r1, #0
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f002 f954 	bl	8008f7c <RCCEx_PLL2_Config>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006cda:	e013      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ce0:	3328      	adds	r3, #40	; 0x28
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f002 f9fb 	bl	80090e0 <RCCEx_PLL3_Config>
 8006cea:	4603      	mov	r3, r0
 8006cec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006cf0:	e008      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006cf8:	e004      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006cfa:	bf00      	nop
 8006cfc:	e002      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006cfe:	bf00      	nop
 8006d00:	e000      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10d      	bne.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006d0c:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d10:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8006d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d1a:	4a02      	ldr	r2, [pc, #8]	; (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	6513      	str	r3, [r2, #80]	; 0x50
 8006d20:	e006      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8006d22:	bf00      	nop
 8006d24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006d3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d40:	2300      	movs	r3, #0
 8006d42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d46:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	d03a      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d56:	2b30      	cmp	r3, #48	; 0x30
 8006d58:	d01f      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006d5a:	2b30      	cmp	r3, #48	; 0x30
 8006d5c:	d819      	bhi.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d00c      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	d815      	bhi.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d019      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006d6a:	2b10      	cmp	r3, #16
 8006d6c:	d111      	bne.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d6e:	4bae      	ldr	r3, [pc, #696]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d72:	4aad      	ldr	r2, [pc, #692]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006d7a:	e011      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d80:	3308      	adds	r3, #8
 8006d82:	2102      	movs	r1, #2
 8006d84:	4618      	mov	r0, r3
 8006d86:	f002 f8f9 	bl	8008f7c <RCCEx_PLL2_Config>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006d90:	e006      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006d98:	e002      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006d9a:	bf00      	nop
 8006d9c:	e000      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006da0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10a      	bne.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006da8:	4b9f      	ldr	r3, [pc, #636]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db6:	4a9c      	ldr	r2, [pc, #624]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006db8:	430b      	orrs	r3, r1
 8006dba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dbc:	e003      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dbe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006dc2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dce:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006dd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ddc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006de0:	460b      	mov	r3, r1
 8006de2:	4313      	orrs	r3, r2
 8006de4:	d051      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006df0:	d035      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006df6:	d82e      	bhi.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006df8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006dfc:	d031      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8006dfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e02:	d828      	bhi.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e08:	d01a      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e0e:	d822      	bhi.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e18:	d007      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006e1a:	e01c      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e1c:	4b82      	ldr	r3, [pc, #520]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e20:	4a81      	ldr	r2, [pc, #516]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e28:	e01c      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e2e:	3308      	adds	r3, #8
 8006e30:	2100      	movs	r1, #0
 8006e32:	4618      	mov	r0, r3
 8006e34:	f002 f8a2 	bl	8008f7c <RCCEx_PLL2_Config>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e3e:	e011      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e44:	3328      	adds	r3, #40	; 0x28
 8006e46:	2100      	movs	r1, #0
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f002 f949 	bl	80090e0 <RCCEx_PLL3_Config>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e54:	e006      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006e5c:	e002      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006e5e:	bf00      	nop
 8006e60:	e000      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10a      	bne.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e6c:	4b6e      	ldr	r3, [pc, #440]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e70:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e7a:	4a6b      	ldr	r2, [pc, #428]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e7c:	430b      	orrs	r3, r1
 8006e7e:	6513      	str	r3, [r2, #80]	; 0x50
 8006e80:	e003      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e86:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e92:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006e96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ea0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	d053      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006eb4:	d033      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006eb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006eba:	d82c      	bhi.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006ebc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ec0:	d02f      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8006ec2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ec6:	d826      	bhi.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006ec8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ecc:	d02b      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ece:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ed2:	d820      	bhi.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006ed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ed8:	d012      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006eda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ede:	d81a      	bhi.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d022      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8006ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee8:	d115      	bne.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eee:	3308      	adds	r3, #8
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f002 f842 	bl	8008f7c <RCCEx_PLL2_Config>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006efe:	e015      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f04:	3328      	adds	r3, #40	; 0x28
 8006f06:	2101      	movs	r1, #1
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f002 f8e9 	bl	80090e0 <RCCEx_PLL3_Config>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f14:	e00a      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006f1c:	e006      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006f1e:	bf00      	nop
 8006f20:	e004      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006f22:	bf00      	nop
 8006f24:	e002      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006f26:	bf00      	nop
 8006f28:	e000      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10a      	bne.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006f34:	4b3c      	ldr	r3, [pc, #240]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f38:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f42:	4a39      	ldr	r2, [pc, #228]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f44:	430b      	orrs	r3, r1
 8006f46:	6513      	str	r3, [r2, #80]	; 0x50
 8006f48:	e003      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f4e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006f5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f62:	2300      	movs	r3, #0
 8006f64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f68:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	d060      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f7a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006f7e:	d039      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8006f80:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006f84:	d832      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f8a:	d035      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f90:	d82c      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f96:	d031      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9c:	d826      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006f9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006fa2:	d02d      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006fa4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006fa8:	d820      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006faa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fae:	d012      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fb4:	d81a      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d024      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fbe:	d115      	bne.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fc4:	3308      	adds	r3, #8
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f001 ffd7 	bl	8008f7c <RCCEx_PLL2_Config>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006fd4:	e017      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fda:	3328      	adds	r3, #40	; 0x28
 8006fdc:	2101      	movs	r1, #1
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f002 f87e 	bl	80090e0 <RCCEx_PLL3_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006fea:	e00c      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006ff2:	e008      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ff4:	bf00      	nop
 8006ff6:	e006      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ff8:	bf00      	nop
 8006ffa:	e004      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ffc:	bf00      	nop
 8006ffe:	e002      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007000:	bf00      	nop
 8007002:	e000      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007006:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10e      	bne.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800700e:	4b06      	ldr	r3, [pc, #24]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007012:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800701a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800701e:	4a02      	ldr	r2, [pc, #8]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007020:	430b      	orrs	r3, r1
 8007022:	6593      	str	r3, [r2, #88]	; 0x58
 8007024:	e006      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007026:	bf00      	nop
 8007028:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800702c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007030:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007040:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007044:	2300      	movs	r3, #0
 8007046:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800704a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800704e:	460b      	mov	r3, r1
 8007050:	4313      	orrs	r3, r2
 8007052:	d037      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800705a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800705e:	d00e      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007064:	d816      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d018      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800706a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800706e:	d111      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007070:	4bc4      	ldr	r3, [pc, #784]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007074:	4ac3      	ldr	r2, [pc, #780]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800707a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800707c:	e00f      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800707e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007082:	3308      	adds	r3, #8
 8007084:	2101      	movs	r1, #1
 8007086:	4618      	mov	r0, r3
 8007088:	f001 ff78 	bl	8008f7c <RCCEx_PLL2_Config>
 800708c:	4603      	mov	r3, r0
 800708e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007092:	e004      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800709a:	e000      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800709c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800709e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10a      	bne.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80070a6:	4bb7      	ldr	r3, [pc, #732]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070aa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80070ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070b4:	4ab3      	ldr	r2, [pc, #716]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070b6:	430b      	orrs	r3, r1
 80070b8:	6513      	str	r3, [r2, #80]	; 0x50
 80070ba:	e003      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80070c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80070c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070cc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80070d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070d4:	2300      	movs	r3, #0
 80070d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80070da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80070de:	460b      	mov	r3, r1
 80070e0:	4313      	orrs	r3, r2
 80070e2:	d039      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80070e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d81c      	bhi.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80070ee:	a201      	add	r2, pc, #4	; (adr r2, 80070f4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80070f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f4:	08007131 	.word	0x08007131
 80070f8:	08007105 	.word	0x08007105
 80070fc:	08007113 	.word	0x08007113
 8007100:	08007131 	.word	0x08007131
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007104:	4b9f      	ldr	r3, [pc, #636]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007108:	4a9e      	ldr	r2, [pc, #632]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800710a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800710e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007110:	e00f      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007112:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007116:	3308      	adds	r3, #8
 8007118:	2102      	movs	r1, #2
 800711a:	4618      	mov	r0, r3
 800711c:	f001 ff2e 	bl	8008f7c <RCCEx_PLL2_Config>
 8007120:	4603      	mov	r3, r0
 8007122:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007126:	e004      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800712e:	e000      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007132:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10a      	bne.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800713a:	4b92      	ldr	r3, [pc, #584]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800713c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800713e:	f023 0103 	bic.w	r1, r3, #3
 8007142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007148:	4a8e      	ldr	r2, [pc, #568]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800714a:	430b      	orrs	r3, r1
 800714c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800714e:	e003      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007150:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007154:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800715c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007160:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007164:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007168:	2300      	movs	r3, #0
 800716a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800716e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007172:	460b      	mov	r3, r1
 8007174:	4313      	orrs	r3, r2
 8007176:	f000 8099 	beq.w	80072ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800717a:	4b83      	ldr	r3, [pc, #524]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a82      	ldr	r2, [pc, #520]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007184:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007186:	f7fa fb19 	bl	80017bc <HAL_GetTick>
 800718a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800718e:	e00b      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007190:	f7fa fb14 	bl	80017bc <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	2b64      	cmp	r3, #100	; 0x64
 800719e:	d903      	bls.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80071a6:	e005      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071a8:	4b77      	ldr	r3, [pc, #476]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d0ed      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80071b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d173      	bne.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80071bc:	4b71      	ldr	r3, [pc, #452]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80071c8:	4053      	eors	r3, r2
 80071ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d015      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071d2:	4b6c      	ldr	r3, [pc, #432]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071de:	4b69      	ldr	r3, [pc, #420]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e2:	4a68      	ldr	r2, [pc, #416]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071e8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071ea:	4b66      	ldr	r3, [pc, #408]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ee:	4a65      	ldr	r2, [pc, #404]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071f4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80071f6:	4a63      	ldr	r2, [pc, #396]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80071fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007202:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800720a:	d118      	bne.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800720c:	f7fa fad6 	bl	80017bc <HAL_GetTick>
 8007210:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007214:	e00d      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007216:	f7fa fad1 	bl	80017bc <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007220:	1ad2      	subs	r2, r2, r3
 8007222:	f241 3388 	movw	r3, #5000	; 0x1388
 8007226:	429a      	cmp	r2, r3
 8007228:	d903      	bls.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8007230:	e005      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007232:	4b54      	ldr	r3, [pc, #336]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007236:	f003 0302 	and.w	r3, r3, #2
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0eb      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800723e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007242:	2b00      	cmp	r3, #0
 8007244:	d129      	bne.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007246:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800724a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800724e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007256:	d10e      	bne.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007258:	4b4a      	ldr	r3, [pc, #296]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007264:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007268:	091a      	lsrs	r2, r3, #4
 800726a:	4b48      	ldr	r3, [pc, #288]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800726c:	4013      	ands	r3, r2
 800726e:	4a45      	ldr	r2, [pc, #276]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007270:	430b      	orrs	r3, r1
 8007272:	6113      	str	r3, [r2, #16]
 8007274:	e005      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007276:	4b43      	ldr	r3, [pc, #268]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	4a42      	ldr	r2, [pc, #264]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800727c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007280:	6113      	str	r3, [r2, #16]
 8007282:	4b40      	ldr	r3, [pc, #256]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007284:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800728a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800728e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007292:	4a3c      	ldr	r2, [pc, #240]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007294:	430b      	orrs	r3, r1
 8007296:	6713      	str	r3, [r2, #112]	; 0x70
 8007298:	e008      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800729a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800729e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80072a2:	e003      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80072a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80072ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b4:	f002 0301 	and.w	r3, r2, #1
 80072b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072bc:	2300      	movs	r3, #0
 80072be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f000 8090 	beq.w	80073ee <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80072ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072d6:	2b28      	cmp	r3, #40	; 0x28
 80072d8:	d870      	bhi.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80072da:	a201      	add	r2, pc, #4	; (adr r2, 80072e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80072dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e0:	080073c5 	.word	0x080073c5
 80072e4:	080073bd 	.word	0x080073bd
 80072e8:	080073bd 	.word	0x080073bd
 80072ec:	080073bd 	.word	0x080073bd
 80072f0:	080073bd 	.word	0x080073bd
 80072f4:	080073bd 	.word	0x080073bd
 80072f8:	080073bd 	.word	0x080073bd
 80072fc:	080073bd 	.word	0x080073bd
 8007300:	08007391 	.word	0x08007391
 8007304:	080073bd 	.word	0x080073bd
 8007308:	080073bd 	.word	0x080073bd
 800730c:	080073bd 	.word	0x080073bd
 8007310:	080073bd 	.word	0x080073bd
 8007314:	080073bd 	.word	0x080073bd
 8007318:	080073bd 	.word	0x080073bd
 800731c:	080073bd 	.word	0x080073bd
 8007320:	080073a7 	.word	0x080073a7
 8007324:	080073bd 	.word	0x080073bd
 8007328:	080073bd 	.word	0x080073bd
 800732c:	080073bd 	.word	0x080073bd
 8007330:	080073bd 	.word	0x080073bd
 8007334:	080073bd 	.word	0x080073bd
 8007338:	080073bd 	.word	0x080073bd
 800733c:	080073bd 	.word	0x080073bd
 8007340:	080073c5 	.word	0x080073c5
 8007344:	080073bd 	.word	0x080073bd
 8007348:	080073bd 	.word	0x080073bd
 800734c:	080073bd 	.word	0x080073bd
 8007350:	080073bd 	.word	0x080073bd
 8007354:	080073bd 	.word	0x080073bd
 8007358:	080073bd 	.word	0x080073bd
 800735c:	080073bd 	.word	0x080073bd
 8007360:	080073c5 	.word	0x080073c5
 8007364:	080073bd 	.word	0x080073bd
 8007368:	080073bd 	.word	0x080073bd
 800736c:	080073bd 	.word	0x080073bd
 8007370:	080073bd 	.word	0x080073bd
 8007374:	080073bd 	.word	0x080073bd
 8007378:	080073bd 	.word	0x080073bd
 800737c:	080073bd 	.word	0x080073bd
 8007380:	080073c5 	.word	0x080073c5
 8007384:	58024400 	.word	0x58024400
 8007388:	58024800 	.word	0x58024800
 800738c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007390:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007394:	3308      	adds	r3, #8
 8007396:	2101      	movs	r1, #1
 8007398:	4618      	mov	r0, r3
 800739a:	f001 fdef 	bl	8008f7c <RCCEx_PLL2_Config>
 800739e:	4603      	mov	r3, r0
 80073a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073a4:	e00f      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073aa:	3328      	adds	r3, #40	; 0x28
 80073ac:	2101      	movs	r1, #1
 80073ae:	4618      	mov	r0, r3
 80073b0:	f001 fe96 	bl	80090e0 <RCCEx_PLL3_Config>
 80073b4:	4603      	mov	r3, r0
 80073b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073ba:	e004      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80073c2:	e000      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80073c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10b      	bne.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80073ce:	4bc0      	ldr	r3, [pc, #768]	; (80076d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80073d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80073d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073de:	4abc      	ldr	r2, [pc, #752]	; (80076d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80073e0:	430b      	orrs	r3, r1
 80073e2:	6553      	str	r3, [r2, #84]	; 0x54
 80073e4:	e003      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80073ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80073ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	f002 0302 	and.w	r3, r2, #2
 80073fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073fe:	2300      	movs	r3, #0
 8007400:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007404:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007408:	460b      	mov	r3, r1
 800740a:	4313      	orrs	r3, r2
 800740c:	d043      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800740e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007416:	2b05      	cmp	r3, #5
 8007418:	d824      	bhi.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800741a:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	0800746d 	.word	0x0800746d
 8007424:	08007439 	.word	0x08007439
 8007428:	0800744f 	.word	0x0800744f
 800742c:	0800746d 	.word	0x0800746d
 8007430:	0800746d 	.word	0x0800746d
 8007434:	0800746d 	.word	0x0800746d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007438:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800743c:	3308      	adds	r3, #8
 800743e:	2101      	movs	r1, #1
 8007440:	4618      	mov	r0, r3
 8007442:	f001 fd9b 	bl	8008f7c <RCCEx_PLL2_Config>
 8007446:	4603      	mov	r3, r0
 8007448:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800744c:	e00f      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800744e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007452:	3328      	adds	r3, #40	; 0x28
 8007454:	2101      	movs	r1, #1
 8007456:	4618      	mov	r0, r3
 8007458:	f001 fe42 	bl	80090e0 <RCCEx_PLL3_Config>
 800745c:	4603      	mov	r3, r0
 800745e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007462:	e004      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800746a:	e000      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800746c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800746e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10b      	bne.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007476:	4b96      	ldr	r3, [pc, #600]	; (80076d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800747a:	f023 0107 	bic.w	r1, r3, #7
 800747e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007486:	4a92      	ldr	r2, [pc, #584]	; (80076d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007488:	430b      	orrs	r3, r1
 800748a:	6553      	str	r3, [r2, #84]	; 0x54
 800748c:	e003      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800748e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007492:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	f002 0304 	and.w	r3, r2, #4
 80074a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074a6:	2300      	movs	r3, #0
 80074a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074ac:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80074b0:	460b      	mov	r3, r1
 80074b2:	4313      	orrs	r3, r2
 80074b4:	d043      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80074b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074be:	2b05      	cmp	r3, #5
 80074c0:	d824      	bhi.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80074c2:	a201      	add	r2, pc, #4	; (adr r2, 80074c8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80074c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c8:	08007515 	.word	0x08007515
 80074cc:	080074e1 	.word	0x080074e1
 80074d0:	080074f7 	.word	0x080074f7
 80074d4:	08007515 	.word	0x08007515
 80074d8:	08007515 	.word	0x08007515
 80074dc:	08007515 	.word	0x08007515
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074e4:	3308      	adds	r3, #8
 80074e6:	2101      	movs	r1, #1
 80074e8:	4618      	mov	r0, r3
 80074ea:	f001 fd47 	bl	8008f7c <RCCEx_PLL2_Config>
 80074ee:	4603      	mov	r3, r0
 80074f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80074f4:	e00f      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074fa:	3328      	adds	r3, #40	; 0x28
 80074fc:	2101      	movs	r1, #1
 80074fe:	4618      	mov	r0, r3
 8007500:	f001 fdee 	bl	80090e0 <RCCEx_PLL3_Config>
 8007504:	4603      	mov	r3, r0
 8007506:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800750a:	e004      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007512:	e000      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007516:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10b      	bne.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800751e:	4b6c      	ldr	r3, [pc, #432]	; (80076d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007522:	f023 0107 	bic.w	r1, r3, #7
 8007526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800752a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800752e:	4a68      	ldr	r2, [pc, #416]	; (80076d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007530:	430b      	orrs	r3, r1
 8007532:	6593      	str	r3, [r2, #88]	; 0x58
 8007534:	e003      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007536:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800753a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800753e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007546:	f002 0320 	and.w	r3, r2, #32
 800754a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800754e:	2300      	movs	r3, #0
 8007550:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007554:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007558:	460b      	mov	r3, r1
 800755a:	4313      	orrs	r3, r2
 800755c:	d055      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800755e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007562:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007566:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800756a:	d033      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800756c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007570:	d82c      	bhi.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007576:	d02f      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800757c:	d826      	bhi.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800757e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007582:	d02b      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007584:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007588:	d820      	bhi.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800758a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800758e:	d012      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007594:	d81a      	bhi.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d022      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800759a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800759e:	d115      	bne.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075a4:	3308      	adds	r3, #8
 80075a6:	2100      	movs	r1, #0
 80075a8:	4618      	mov	r0, r3
 80075aa:	f001 fce7 	bl	8008f7c <RCCEx_PLL2_Config>
 80075ae:	4603      	mov	r3, r0
 80075b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075b4:	e015      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075ba:	3328      	adds	r3, #40	; 0x28
 80075bc:	2102      	movs	r1, #2
 80075be:	4618      	mov	r0, r3
 80075c0:	f001 fd8e 	bl	80090e0 <RCCEx_PLL3_Config>
 80075c4:	4603      	mov	r3, r0
 80075c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075ca:	e00a      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80075d2:	e006      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80075d4:	bf00      	nop
 80075d6:	e004      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80075d8:	bf00      	nop
 80075da:	e002      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80075dc:	bf00      	nop
 80075de:	e000      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80075e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10b      	bne.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075ea:	4b39      	ldr	r3, [pc, #228]	; (80076d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80075ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ee:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80075f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075fa:	4a35      	ldr	r2, [pc, #212]	; (80076d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80075fc:	430b      	orrs	r3, r1
 80075fe:	6553      	str	r3, [r2, #84]	; 0x54
 8007600:	e003      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007602:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007606:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800760a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800760e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007612:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800761a:	2300      	movs	r3, #0
 800761c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007620:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007624:	460b      	mov	r3, r1
 8007626:	4313      	orrs	r3, r2
 8007628:	d058      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800762a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800762e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007632:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007636:	d033      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007638:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800763c:	d82c      	bhi.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800763e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007642:	d02f      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007648:	d826      	bhi.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800764a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800764e:	d02b      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007650:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007654:	d820      	bhi.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800765a:	d012      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800765c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007660:	d81a      	bhi.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007662:	2b00      	cmp	r3, #0
 8007664:	d022      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800766a:	d115      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800766c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007670:	3308      	adds	r3, #8
 8007672:	2100      	movs	r1, #0
 8007674:	4618      	mov	r0, r3
 8007676:	f001 fc81 	bl	8008f7c <RCCEx_PLL2_Config>
 800767a:	4603      	mov	r3, r0
 800767c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007680:	e015      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007682:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007686:	3328      	adds	r3, #40	; 0x28
 8007688:	2102      	movs	r1, #2
 800768a:	4618      	mov	r0, r3
 800768c:	f001 fd28 	bl	80090e0 <RCCEx_PLL3_Config>
 8007690:	4603      	mov	r3, r0
 8007692:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007696:	e00a      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800769e:	e006      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80076a0:	bf00      	nop
 80076a2:	e004      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80076a4:	bf00      	nop
 80076a6:	e002      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80076a8:	bf00      	nop
 80076aa:	e000      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80076ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10e      	bne.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076b6:	4b06      	ldr	r3, [pc, #24]	; (80076d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80076b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ba:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80076be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80076c6:	4a02      	ldr	r2, [pc, #8]	; (80076d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80076c8:	430b      	orrs	r3, r1
 80076ca:	6593      	str	r3, [r2, #88]	; 0x58
 80076cc:	e006      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80076ce:	bf00      	nop
 80076d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80076d8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80076dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80076e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076ec:	2300      	movs	r3, #0
 80076ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076f2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80076f6:	460b      	mov	r3, r1
 80076f8:	4313      	orrs	r3, r2
 80076fa:	d055      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80076fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007700:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007704:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007708:	d033      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800770a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800770e:	d82c      	bhi.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007714:	d02f      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800771a:	d826      	bhi.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800771c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007720:	d02b      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007722:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007726:	d820      	bhi.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800772c:	d012      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800772e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007732:	d81a      	bhi.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007734:	2b00      	cmp	r3, #0
 8007736:	d022      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800773c:	d115      	bne.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800773e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007742:	3308      	adds	r3, #8
 8007744:	2100      	movs	r1, #0
 8007746:	4618      	mov	r0, r3
 8007748:	f001 fc18 	bl	8008f7c <RCCEx_PLL2_Config>
 800774c:	4603      	mov	r3, r0
 800774e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007752:	e015      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007758:	3328      	adds	r3, #40	; 0x28
 800775a:	2102      	movs	r1, #2
 800775c:	4618      	mov	r0, r3
 800775e:	f001 fcbf 	bl	80090e0 <RCCEx_PLL3_Config>
 8007762:	4603      	mov	r3, r0
 8007764:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007768:	e00a      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007770:	e006      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007772:	bf00      	nop
 8007774:	e004      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007776:	bf00      	nop
 8007778:	e002      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800777a:	bf00      	nop
 800777c:	e000      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800777e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007780:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10b      	bne.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007788:	4ba1      	ldr	r3, [pc, #644]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800778a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800778c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007794:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007798:	4a9d      	ldr	r2, [pc, #628]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800779a:	430b      	orrs	r3, r1
 800779c:	6593      	str	r3, [r2, #88]	; 0x58
 800779e:	e003      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80077a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80077a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b0:	f002 0308 	and.w	r3, r2, #8
 80077b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077b8:	2300      	movs	r3, #0
 80077ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80077be:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80077c2:	460b      	mov	r3, r1
 80077c4:	4313      	orrs	r3, r2
 80077c6:	d01e      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80077c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d4:	d10c      	bne.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80077d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077da:	3328      	adds	r3, #40	; 0x28
 80077dc:	2102      	movs	r1, #2
 80077de:	4618      	mov	r0, r3
 80077e0:	f001 fc7e 	bl	80090e0 <RCCEx_PLL3_Config>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80077f0:	4b87      	ldr	r3, [pc, #540]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80077f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007800:	4a83      	ldr	r2, [pc, #524]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007802:	430b      	orrs	r3, r1
 8007804:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800780a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780e:	f002 0310 	and.w	r3, r2, #16
 8007812:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007816:	2300      	movs	r3, #0
 8007818:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800781c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007820:	460b      	mov	r3, r1
 8007822:	4313      	orrs	r3, r2
 8007824:	d01e      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007826:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800782a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800782e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007832:	d10c      	bne.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007838:	3328      	adds	r3, #40	; 0x28
 800783a:	2102      	movs	r1, #2
 800783c:	4618      	mov	r0, r3
 800783e:	f001 fc4f 	bl	80090e0 <RCCEx_PLL3_Config>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800784e:	4b70      	ldr	r3, [pc, #448]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007852:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007856:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800785a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800785e:	4a6c      	ldr	r2, [pc, #432]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007860:	430b      	orrs	r3, r1
 8007862:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007874:	2300      	movs	r3, #0
 8007876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800787a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800787e:	460b      	mov	r3, r1
 8007880:	4313      	orrs	r3, r2
 8007882:	d03e      	beq.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007888:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800788c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007890:	d022      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8007892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007896:	d81b      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007898:	2b00      	cmp	r3, #0
 800789a:	d003      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800789c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078a0:	d00b      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80078a2:	e015      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078a8:	3308      	adds	r3, #8
 80078aa:	2100      	movs	r1, #0
 80078ac:	4618      	mov	r0, r3
 80078ae:	f001 fb65 	bl	8008f7c <RCCEx_PLL2_Config>
 80078b2:	4603      	mov	r3, r0
 80078b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078b8:	e00f      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078be:	3328      	adds	r3, #40	; 0x28
 80078c0:	2102      	movs	r1, #2
 80078c2:	4618      	mov	r0, r3
 80078c4:	f001 fc0c 	bl	80090e0 <RCCEx_PLL3_Config>
 80078c8:	4603      	mov	r3, r0
 80078ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078ce:	e004      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80078d6:	e000      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80078d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10b      	bne.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078e2:	4b4b      	ldr	r3, [pc, #300]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80078e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80078ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80078f2:	4a47      	ldr	r2, [pc, #284]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80078f4:	430b      	orrs	r3, r1
 80078f6:	6593      	str	r3, [r2, #88]	; 0x58
 80078f8:	e003      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80078fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800790e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007910:	2300      	movs	r3, #0
 8007912:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007914:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007918:	460b      	mov	r3, r1
 800791a:	4313      	orrs	r3, r2
 800791c:	d03b      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800791e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007926:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800792a:	d01f      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800792c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007930:	d818      	bhi.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007936:	d003      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8007938:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800793c:	d007      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800793e:	e011      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007940:	4b33      	ldr	r3, [pc, #204]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	4a32      	ldr	r2, [pc, #200]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800794a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800794c:	e00f      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800794e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007952:	3328      	adds	r3, #40	; 0x28
 8007954:	2101      	movs	r1, #1
 8007956:	4618      	mov	r0, r3
 8007958:	f001 fbc2 	bl	80090e0 <RCCEx_PLL3_Config>
 800795c:	4603      	mov	r3, r0
 800795e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8007962:	e004      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800796a:	e000      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800796c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800796e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10b      	bne.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007976:	4b26      	ldr	r3, [pc, #152]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800797a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800797e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007986:	4a22      	ldr	r2, [pc, #136]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007988:	430b      	orrs	r3, r1
 800798a:	6553      	str	r3, [r2, #84]	; 0x54
 800798c:	e003      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800798e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007992:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80079a2:	673b      	str	r3, [r7, #112]	; 0x70
 80079a4:	2300      	movs	r3, #0
 80079a6:	677b      	str	r3, [r7, #116]	; 0x74
 80079a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80079ac:	460b      	mov	r3, r1
 80079ae:	4313      	orrs	r3, r2
 80079b0:	d034      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80079b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80079bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079c0:	d007      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80079c2:	e011      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079c4:	4b12      	ldr	r3, [pc, #72]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	4a11      	ldr	r2, [pc, #68]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80079ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80079d0:	e00e      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079d6:	3308      	adds	r3, #8
 80079d8:	2102      	movs	r1, #2
 80079da:	4618      	mov	r0, r3
 80079dc:	f001 face 	bl	8008f7c <RCCEx_PLL2_Config>
 80079e0:	4603      	mov	r3, r0
 80079e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80079e6:	e003      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80079ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10d      	bne.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80079f8:	4b05      	ldr	r3, [pc, #20]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80079fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a06:	4a02      	ldr	r2, [pc, #8]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a08:	430b      	orrs	r3, r1
 8007a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a0c:	e006      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8007a0e:	bf00      	nop
 8007a10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007a18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007a28:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a2e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007a32:	460b      	mov	r3, r1
 8007a34:	4313      	orrs	r3, r2
 8007a36:	d00c      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a3c:	3328      	adds	r3, #40	; 0x28
 8007a3e:	2102      	movs	r1, #2
 8007a40:	4618      	mov	r0, r3
 8007a42:	f001 fb4d 	bl	80090e0 <RCCEx_PLL3_Config>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007a5e:	663b      	str	r3, [r7, #96]	; 0x60
 8007a60:	2300      	movs	r3, #0
 8007a62:	667b      	str	r3, [r7, #100]	; 0x64
 8007a64:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	d038      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a7a:	d018      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007a7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a80:	d811      	bhi.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007a82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a86:	d014      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8007a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a8c:	d80b      	bhi.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d011      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8007a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a96:	d106      	bne.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a98:	4bc3      	ldr	r3, [pc, #780]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9c:	4ac2      	ldr	r2, [pc, #776]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007aa4:	e008      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007aac:	e004      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007aae:	bf00      	nop
 8007ab0:	e002      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007ab2:	bf00      	nop
 8007ab4:	e000      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007ab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ab8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10b      	bne.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ac0:	4bb9      	ldr	r3, [pc, #740]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad0:	4ab5      	ldr	r2, [pc, #724]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ad2:	430b      	orrs	r3, r1
 8007ad4:	6553      	str	r3, [r2, #84]	; 0x54
 8007ad6:	e003      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007adc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007aec:	65bb      	str	r3, [r7, #88]	; 0x58
 8007aee:	2300      	movs	r3, #0
 8007af0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007af2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007af6:	460b      	mov	r3, r1
 8007af8:	4313      	orrs	r3, r2
 8007afa:	d009      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007afc:	4baa      	ldr	r3, [pc, #680]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b0a:	4aa7      	ldr	r2, [pc, #668]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b0c:	430b      	orrs	r3, r1
 8007b0e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b18:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007b1c:	653b      	str	r3, [r7, #80]	; 0x50
 8007b1e:	2300      	movs	r3, #0
 8007b20:	657b      	str	r3, [r7, #84]	; 0x54
 8007b22:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007b26:	460b      	mov	r3, r1
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	d009      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b2c:	4b9e      	ldr	r3, [pc, #632]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b30:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3a:	4a9b      	ldr	r2, [pc, #620]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b3c:	430b      	orrs	r3, r1
 8007b3e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b48:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007b4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b4e:	2300      	movs	r3, #0
 8007b50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b52:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007b56:	460b      	mov	r3, r1
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	d009      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007b5c:	4b92      	ldr	r3, [pc, #584]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b60:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8007b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b6a:	4a8f      	ldr	r2, [pc, #572]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b6c:	430b      	orrs	r3, r1
 8007b6e:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b78:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8007b7e:	2300      	movs	r3, #0
 8007b80:	647b      	str	r3, [r7, #68]	; 0x44
 8007b82:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007b86:	460b      	mov	r3, r1
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	d00e      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b8c:	4b86      	ldr	r3, [pc, #536]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	4a85      	ldr	r2, [pc, #532]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b96:	6113      	str	r3, [r2, #16]
 8007b98:	4b83      	ldr	r3, [pc, #524]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007b9a:	6919      	ldr	r1, [r3, #16]
 8007b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ba0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007ba4:	4a80      	ldr	r2, [pc, #512]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ba6:	430b      	orrs	r3, r1
 8007ba8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bb8:	2300      	movs	r3, #0
 8007bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bbc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	d009      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007bc6:	4b78      	ldr	r3, [pc, #480]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd4:	4a74      	ldr	r2, [pc, #464]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007bd6:	430b      	orrs	r3, r1
 8007bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007be6:	633b      	str	r3, [r7, #48]	; 0x30
 8007be8:	2300      	movs	r3, #0
 8007bea:	637b      	str	r3, [r7, #52]	; 0x34
 8007bec:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	d00a      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007bf6:	4b6c      	ldr	r3, [pc, #432]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfa:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c06:	4a68      	ldr	r2, [pc, #416]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007c08:	430b      	orrs	r3, r1
 8007c0a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	2100      	movs	r1, #0
 8007c16:	62b9      	str	r1, [r7, #40]	; 0x28
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c1e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007c22:	460b      	mov	r3, r1
 8007c24:	4313      	orrs	r3, r2
 8007c26:	d011      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c2c:	3308      	adds	r3, #8
 8007c2e:	2100      	movs	r1, #0
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 f9a3 	bl	8008f7c <RCCEx_PLL2_Config>
 8007c36:	4603      	mov	r3, r0
 8007c38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007c3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d003      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007c48:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007c4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	2100      	movs	r1, #0
 8007c56:	6239      	str	r1, [r7, #32]
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c5e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007c62:	460b      	mov	r3, r1
 8007c64:	4313      	orrs	r3, r2
 8007c66:	d011      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	2101      	movs	r1, #1
 8007c70:	4618      	mov	r0, r3
 8007c72:	f001 f983 	bl	8008f7c <RCCEx_PLL2_Config>
 8007c76:	4603      	mov	r3, r0
 8007c78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007c7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d003      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007c88:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007c8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c94:	2100      	movs	r1, #0
 8007c96:	61b9      	str	r1, [r7, #24]
 8007c98:	f003 0304 	and.w	r3, r3, #4
 8007c9c:	61fb      	str	r3, [r7, #28]
 8007c9e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	d011      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cac:	3308      	adds	r3, #8
 8007cae:	2102      	movs	r1, #2
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f001 f963 	bl	8008f7c <RCCEx_PLL2_Config>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007cbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007cc8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	6139      	str	r1, [r7, #16]
 8007cd8:	f003 0308 	and.w	r3, r3, #8
 8007cdc:	617b      	str	r3, [r7, #20]
 8007cde:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	d011      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cec:	3328      	adds	r3, #40	; 0x28
 8007cee:	2100      	movs	r1, #0
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f001 f9f5 	bl	80090e0 <RCCEx_PLL3_Config>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8007cfc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d003      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d08:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	2100      	movs	r1, #0
 8007d16:	60b9      	str	r1, [r7, #8]
 8007d18:	f003 0310 	and.w	r3, r3, #16
 8007d1c:	60fb      	str	r3, [r7, #12]
 8007d1e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007d22:	460b      	mov	r3, r1
 8007d24:	4313      	orrs	r3, r2
 8007d26:	d011      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d2c:	3328      	adds	r3, #40	; 0x28
 8007d2e:	2101      	movs	r1, #1
 8007d30:	4618      	mov	r0, r3
 8007d32:	f001 f9d5 	bl	80090e0 <RCCEx_PLL3_Config>
 8007d36:	4603      	mov	r3, r0
 8007d38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007d3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d48:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	2100      	movs	r1, #0
 8007d56:	6039      	str	r1, [r7, #0]
 8007d58:	f003 0320 	and.w	r3, r3, #32
 8007d5c:	607b      	str	r3, [r7, #4]
 8007d5e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007d62:	460b      	mov	r3, r1
 8007d64:	4313      	orrs	r3, r2
 8007d66:	d011      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d6c:	3328      	adds	r3, #40	; 0x28
 8007d6e:	2102      	movs	r1, #2
 8007d70:	4618      	mov	r0, r3
 8007d72:	f001 f9b5 	bl	80090e0 <RCCEx_PLL3_Config>
 8007d76:	4603      	mov	r3, r0
 8007d78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007d7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d88:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8007d8c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d101      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	e000      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8007da0:	46bd      	mov	sp, r7
 8007da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007da6:	bf00      	nop
 8007da8:	58024400 	.word	0x58024400

08007dac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b090      	sub	sp, #64	; 0x40
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dba:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007dbe:	430b      	orrs	r3, r1
 8007dc0:	f040 8094 	bne.w	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007dc4:	4b97      	ldr	r3, [pc, #604]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dc8:	f003 0307 	and.w	r3, r3, #7
 8007dcc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	f200 8087 	bhi.w	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007dd6:	a201      	add	r2, pc, #4	; (adr r2, 8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ddc:	08007df1 	.word	0x08007df1
 8007de0:	08007e19 	.word	0x08007e19
 8007de4:	08007e41 	.word	0x08007e41
 8007de8:	08007edd 	.word	0x08007edd
 8007dec:	08007e69 	.word	0x08007e69
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007df0:	4b8c      	ldr	r3, [pc, #560]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dfc:	d108      	bne.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 ff68 	bl	8008cd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e0c:	f000 bc97 	b.w	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e14:	f000 bc93 	b.w	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e18:	4b82      	ldr	r3, [pc, #520]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e24:	d108      	bne.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e26:	f107 0318 	add.w	r3, r7, #24
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 fcac 	bl	8008788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e34:	f000 bc83 	b.w	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e3c:	f000 bc7f 	b.w	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e40:	4b78      	ldr	r3, [pc, #480]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e4c:	d108      	bne.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e4e:	f107 030c 	add.w	r3, r7, #12
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fdec 	bl	8008a30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e5c:	f000 bc6f 	b.w	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007e60:	2300      	movs	r3, #0
 8007e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e64:	f000 bc6b 	b.w	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e68:	4b6e      	ldr	r3, [pc, #440]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e70:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e72:	4b6c      	ldr	r3, [pc, #432]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0304 	and.w	r3, r3, #4
 8007e7a:	2b04      	cmp	r3, #4
 8007e7c:	d10c      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d109      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e84:	4b67      	ldr	r3, [pc, #412]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	08db      	lsrs	r3, r3, #3
 8007e8a:	f003 0303 	and.w	r3, r3, #3
 8007e8e:	4a66      	ldr	r2, [pc, #408]	; (8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007e90:	fa22 f303 	lsr.w	r3, r2, r3
 8007e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e96:	e01f      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e98:	4b62      	ldr	r3, [pc, #392]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ea4:	d106      	bne.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eac:	d102      	bne.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007eae:	4b5f      	ldr	r3, [pc, #380]	; (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eb2:	e011      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007eb4:	4b5b      	ldr	r3, [pc, #364]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ebc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ec0:	d106      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ec8:	d102      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007eca:	4b59      	ldr	r3, [pc, #356]	; (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ece:	e003      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007ed4:	f000 bc33 	b.w	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007ed8:	f000 bc31 	b.w	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007edc:	4b55      	ldr	r3, [pc, #340]	; (8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ede:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ee0:	f000 bc2d 	b.w	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ee8:	f000 bc29 	b.w	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007eec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ef0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007ef4:	430b      	orrs	r3, r1
 8007ef6:	f040 809f 	bne.w	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8007efa:	4b4a      	ldr	r3, [pc, #296]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007efe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007f02:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f0a:	d04d      	beq.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f12:	f200 8084 	bhi.w	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	2bc0      	cmp	r3, #192	; 0xc0
 8007f1a:	d07d      	beq.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1e:	2bc0      	cmp	r3, #192	; 0xc0
 8007f20:	d87d      	bhi.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	2b80      	cmp	r3, #128	; 0x80
 8007f26:	d02d      	beq.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8007f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2a:	2b80      	cmp	r3, #128	; 0x80
 8007f2c:	d877      	bhi.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d003      	beq.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	2b40      	cmp	r3, #64	; 0x40
 8007f38:	d012      	beq.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007f3a:	e070      	b.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f3c:	4b39      	ldr	r3, [pc, #228]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f48:	d107      	bne.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 fec2 	bl	8008cd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f58:	e3f1      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f5e:	e3ee      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f60:	4b30      	ldr	r3, [pc, #192]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f6c:	d107      	bne.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f6e:	f107 0318 	add.w	r3, r7, #24
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fc08 	bl	8008788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f7c:	e3df      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f82:	e3dc      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f84:	4b27      	ldr	r3, [pc, #156]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f90:	d107      	bne.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f92:	f107 030c 	add.w	r3, r7, #12
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 fd4a 	bl	8008a30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fa0:	e3cd      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fa6:	e3ca      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fa8:	4b1e      	ldr	r3, [pc, #120]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fb0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fb2:	4b1c      	ldr	r3, [pc, #112]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0304 	and.w	r3, r3, #4
 8007fba:	2b04      	cmp	r3, #4
 8007fbc:	d10c      	bne.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8007fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d109      	bne.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fc4:	4b17      	ldr	r3, [pc, #92]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	08db      	lsrs	r3, r3, #3
 8007fca:	f003 0303 	and.w	r3, r3, #3
 8007fce:	4a16      	ldr	r2, [pc, #88]	; (8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fd6:	e01e      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fd8:	4b12      	ldr	r3, [pc, #72]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fe4:	d106      	bne.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8007fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fec:	d102      	bne.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007fee:	4b0f      	ldr	r3, [pc, #60]	; (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ff2:	e010      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ff4:	4b0b      	ldr	r3, [pc, #44]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ffc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008000:	d106      	bne.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008008:	d102      	bne.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800800a:	4b09      	ldr	r3, [pc, #36]	; (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800800c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800800e:	e002      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008010:	2300      	movs	r3, #0
 8008012:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008014:	e393      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008016:	e392      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008018:	4b06      	ldr	r3, [pc, #24]	; (8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800801a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800801c:	e38f      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008022:	e38c      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008024:	58024400 	.word	0x58024400
 8008028:	03d09000 	.word	0x03d09000
 800802c:	003d0900 	.word	0x003d0900
 8008030:	007a1200 	.word	0x007a1200
 8008034:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8008038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800803c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008040:	430b      	orrs	r3, r1
 8008042:	f040 809c 	bne.w	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8008046:	4b9e      	ldr	r3, [pc, #632]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800804a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800804e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008056:	d054      	beq.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800805e:	f200 808b 	bhi.w	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008064:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008068:	f000 8083 	beq.w	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800806c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008072:	f200 8081 	bhi.w	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800807c:	d02f      	beq.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800807e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008084:	d878      	bhi.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	2b00      	cmp	r3, #0
 800808a:	d004      	beq.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800808c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008092:	d012      	beq.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8008094:	e070      	b.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008096:	4b8a      	ldr	r3, [pc, #552]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800809e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080a2:	d107      	bne.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 fe15 	bl	8008cd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080b2:	e344      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080b8:	e341      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080ba:	4b81      	ldr	r3, [pc, #516]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080c6:	d107      	bne.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080c8:	f107 0318 	add.w	r3, r7, #24
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 fb5b 	bl	8008788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080d6:	e332      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80080d8:	2300      	movs	r3, #0
 80080da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080dc:	e32f      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080de:	4b78      	ldr	r3, [pc, #480]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080ea:	d107      	bne.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080ec:	f107 030c 	add.w	r3, r7, #12
 80080f0:	4618      	mov	r0, r3
 80080f2:	f000 fc9d 	bl	8008a30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080fa:	e320      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008100:	e31d      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008102:	4b6f      	ldr	r3, [pc, #444]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008106:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800810a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800810c:	4b6c      	ldr	r3, [pc, #432]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0304 	and.w	r3, r3, #4
 8008114:	2b04      	cmp	r3, #4
 8008116:	d10c      	bne.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8008118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800811a:	2b00      	cmp	r3, #0
 800811c:	d109      	bne.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800811e:	4b68      	ldr	r3, [pc, #416]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	08db      	lsrs	r3, r3, #3
 8008124:	f003 0303 	and.w	r3, r3, #3
 8008128:	4a66      	ldr	r2, [pc, #408]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800812a:	fa22 f303 	lsr.w	r3, r2, r3
 800812e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008130:	e01e      	b.n	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008132:	4b63      	ldr	r3, [pc, #396]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800813a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800813e:	d106      	bne.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008142:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008146:	d102      	bne.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008148:	4b5f      	ldr	r3, [pc, #380]	; (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800814a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800814c:	e010      	b.n	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800814e:	4b5c      	ldr	r3, [pc, #368]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008156:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800815a:	d106      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800815c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800815e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008162:	d102      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008164:	4b59      	ldr	r3, [pc, #356]	; (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008168:	e002      	b.n	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800816a:	2300      	movs	r3, #0
 800816c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800816e:	e2e6      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008170:	e2e5      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008172:	4b57      	ldr	r3, [pc, #348]	; (80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008176:	e2e2      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008178:	2300      	movs	r3, #0
 800817a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800817c:	e2df      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800817e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008182:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008186:	430b      	orrs	r3, r1
 8008188:	f040 80a7 	bne.w	80082da <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800818c:	4b4c      	ldr	r3, [pc, #304]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800818e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008190:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008194:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800819c:	d055      	beq.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800819e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081a4:	f200 8096 	bhi.w	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80081a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081ae:	f000 8084 	beq.w	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80081b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081b8:	f200 808c 	bhi.w	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081c2:	d030      	beq.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80081c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081ca:	f200 8083 	bhi.w	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80081ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d004      	beq.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80081d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081da:	d012      	beq.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80081dc:	e07a      	b.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081de:	4b38      	ldr	r3, [pc, #224]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081ea:	d107      	bne.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 fd71 	bl	8008cd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081fa:	e2a0      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80081fc:	2300      	movs	r3, #0
 80081fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008200:	e29d      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008202:	4b2f      	ldr	r3, [pc, #188]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800820a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800820e:	d107      	bne.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008210:	f107 0318 	add.w	r3, r7, #24
 8008214:	4618      	mov	r0, r3
 8008216:	f000 fab7 	bl	8008788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800821e:	e28e      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008220:	2300      	movs	r3, #0
 8008222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008224:	e28b      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008226:	4b26      	ldr	r3, [pc, #152]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800822e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008232:	d107      	bne.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008234:	f107 030c 	add.w	r3, r7, #12
 8008238:	4618      	mov	r0, r3
 800823a:	f000 fbf9 	bl	8008a30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008242:	e27c      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008248:	e279      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800824a:	4b1d      	ldr	r3, [pc, #116]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800824c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800824e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008252:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008254:	4b1a      	ldr	r3, [pc, #104]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0304 	and.w	r3, r3, #4
 800825c:	2b04      	cmp	r3, #4
 800825e:	d10c      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8008260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008262:	2b00      	cmp	r3, #0
 8008264:	d109      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008266:	4b16      	ldr	r3, [pc, #88]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	08db      	lsrs	r3, r3, #3
 800826c:	f003 0303 	and.w	r3, r3, #3
 8008270:	4a14      	ldr	r2, [pc, #80]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8008272:	fa22 f303 	lsr.w	r3, r2, r3
 8008276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008278:	e01e      	b.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800827a:	4b11      	ldr	r3, [pc, #68]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008286:	d106      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800828a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800828e:	d102      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008290:	4b0d      	ldr	r3, [pc, #52]	; (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8008292:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008294:	e010      	b.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008296:	4b0a      	ldr	r3, [pc, #40]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800829e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082a2:	d106      	bne.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80082a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082aa:	d102      	bne.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082ac:	4b07      	ldr	r3, [pc, #28]	; (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80082ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082b0:	e002      	b.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80082b2:	2300      	movs	r3, #0
 80082b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80082b6:	e242      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80082b8:	e241      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80082ba:	4b05      	ldr	r3, [pc, #20]	; (80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80082bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082be:	e23e      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80082c0:	58024400 	.word	0x58024400
 80082c4:	03d09000 	.word	0x03d09000
 80082c8:	003d0900 	.word	0x003d0900
 80082cc:	007a1200 	.word	0x007a1200
 80082d0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80082d4:	2300      	movs	r3, #0
 80082d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082d8:	e231      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80082da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082de:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80082e2:	430b      	orrs	r3, r1
 80082e4:	f040 8085 	bne.w	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80082e8:	4b9c      	ldr	r3, [pc, #624]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80082ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ec:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80082f0:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80082f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082f8:	d06b      	beq.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80082fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008300:	d874      	bhi.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008304:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008308:	d056      	beq.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800830a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008310:	d86c      	bhi.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008314:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008318:	d03b      	beq.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800831a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008320:	d864      	bhi.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008328:	d021      	beq.n	800836e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800832a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008330:	d85c      	bhi.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008334:	2b00      	cmp	r3, #0
 8008336:	d004      	beq.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8008338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800833e:	d004      	beq.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8008340:	e054      	b.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008342:	f7fe fb49 	bl	80069d8 <HAL_RCC_GetPCLK1Freq>
 8008346:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008348:	e1f9      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800834a:	4b84      	ldr	r3, [pc, #528]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008352:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008356:	d107      	bne.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008358:	f107 0318 	add.w	r3, r7, #24
 800835c:	4618      	mov	r0, r3
 800835e:	f000 fa13 	bl	8008788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008366:	e1ea      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008368:	2300      	movs	r3, #0
 800836a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800836c:	e1e7      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800836e:	4b7b      	ldr	r3, [pc, #492]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008376:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800837a:	d107      	bne.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800837c:	f107 030c 	add.w	r3, r7, #12
 8008380:	4618      	mov	r0, r3
 8008382:	f000 fb55 	bl	8008a30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800838a:	e1d8      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800838c:	2300      	movs	r3, #0
 800838e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008390:	e1d5      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008392:	4b72      	ldr	r3, [pc, #456]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0304 	and.w	r3, r3, #4
 800839a:	2b04      	cmp	r3, #4
 800839c:	d109      	bne.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800839e:	4b6f      	ldr	r3, [pc, #444]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	08db      	lsrs	r3, r3, #3
 80083a4:	f003 0303 	and.w	r3, r3, #3
 80083a8:	4a6d      	ldr	r2, [pc, #436]	; (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80083aa:	fa22 f303 	lsr.w	r3, r2, r3
 80083ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083b0:	e1c5      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80083b2:	2300      	movs	r3, #0
 80083b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083b6:	e1c2      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80083b8:	4b68      	ldr	r3, [pc, #416]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083c4:	d102      	bne.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80083c6:	4b67      	ldr	r3, [pc, #412]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80083c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083ca:	e1b8      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083d0:	e1b5      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80083d2:	4b62      	ldr	r3, [pc, #392]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083de:	d102      	bne.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80083e0:	4b61      	ldr	r3, [pc, #388]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80083e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083e4:	e1ab      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ea:	e1a8      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80083ec:	2300      	movs	r3, #0
 80083ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083f0:	e1a5      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80083f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083f6:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80083fa:	430b      	orrs	r3, r1
 80083fc:	d173      	bne.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80083fe:	4b57      	ldr	r3, [pc, #348]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008402:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008406:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800840e:	d02f      	beq.n	8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8008410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008412:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008416:	d863      	bhi.n	80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841a:	2b00      	cmp	r3, #0
 800841c:	d004      	beq.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800841e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008424:	d012      	beq.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8008426:	e05b      	b.n	80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008428:	4b4c      	ldr	r3, [pc, #304]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008430:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008434:	d107      	bne.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008436:	f107 0318 	add.w	r3, r7, #24
 800843a:	4618      	mov	r0, r3
 800843c:	f000 f9a4 	bl	8008788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008444:	e17b      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008446:	2300      	movs	r3, #0
 8008448:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800844a:	e178      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800844c:	4b43      	ldr	r3, [pc, #268]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008458:	d107      	bne.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800845a:	f107 030c 	add.w	r3, r7, #12
 800845e:	4618      	mov	r0, r3
 8008460:	f000 fae6 	bl	8008a30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008468:	e169      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800846a:	2300      	movs	r3, #0
 800846c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800846e:	e166      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008470:	4b3a      	ldr	r3, [pc, #232]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008474:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008478:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800847a:	4b38      	ldr	r3, [pc, #224]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 0304 	and.w	r3, r3, #4
 8008482:	2b04      	cmp	r3, #4
 8008484:	d10c      	bne.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8008486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008488:	2b00      	cmp	r3, #0
 800848a:	d109      	bne.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800848c:	4b33      	ldr	r3, [pc, #204]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	08db      	lsrs	r3, r3, #3
 8008492:	f003 0303 	and.w	r3, r3, #3
 8008496:	4a32      	ldr	r2, [pc, #200]	; (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008498:	fa22 f303 	lsr.w	r3, r2, r3
 800849c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800849e:	e01e      	b.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084a0:	4b2e      	ldr	r3, [pc, #184]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084ac:	d106      	bne.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80084ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084b4:	d102      	bne.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80084b6:	4b2b      	ldr	r3, [pc, #172]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80084b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084ba:	e010      	b.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084bc:	4b27      	ldr	r3, [pc, #156]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084c8:	d106      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80084ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084d0:	d102      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80084d2:	4b25      	ldr	r3, [pc, #148]	; (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80084d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084d6:	e002      	b.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80084d8:	2300      	movs	r3, #0
 80084da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80084dc:	e12f      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80084de:	e12e      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80084e0:	2300      	movs	r3, #0
 80084e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084e4:	e12b      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80084e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084ea:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80084ee:	430b      	orrs	r3, r1
 80084f0:	d13c      	bne.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80084f2:	4b1a      	ldr	r3, [pc, #104]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80084f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084fa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80084fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d004      	beq.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8008502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008508:	d012      	beq.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800850a:	e023      	b.n	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800850c:	4b13      	ldr	r3, [pc, #76]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008514:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008518:	d107      	bne.n	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800851a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800851e:	4618      	mov	r0, r3
 8008520:	f000 fbda 	bl	8008cd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008526:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008528:	e109      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800852a:	2300      	movs	r3, #0
 800852c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800852e:	e106      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008530:	4b0a      	ldr	r3, [pc, #40]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008538:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800853c:	d107      	bne.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800853e:	f107 0318 	add.w	r3, r7, #24
 8008542:	4618      	mov	r0, r3
 8008544:	f000 f920 	bl	8008788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800854c:	e0f7      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800854e:	2300      	movs	r3, #0
 8008550:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008552:	e0f4      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008558:	e0f1      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800855a:	bf00      	nop
 800855c:	58024400 	.word	0x58024400
 8008560:	03d09000 	.word	0x03d09000
 8008564:	003d0900 	.word	0x003d0900
 8008568:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800856c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008570:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008574:	430b      	orrs	r3, r1
 8008576:	f040 8091 	bne.w	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800857a:	4b73      	ldr	r3, [pc, #460]	; (8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800857c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800857e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008582:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008586:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800858a:	f000 8081 	beq.w	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800858e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008590:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008594:	d87f      	bhi.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800859c:	d06b      	beq.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800859e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085a4:	d877      	bhi.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80085a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ac:	d056      	beq.n	800865c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085b4:	d86f      	bhi.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80085b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085bc:	d03b      	beq.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80085be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085c4:	d867      	bhi.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80085c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085cc:	d021      	beq.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80085ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085d4:	d85f      	bhi.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80085d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d004      	beq.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80085dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085e2:	d004      	beq.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80085e4:	e057      	b.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80085e6:	f000 f8b9 	bl	800875c <HAL_RCCEx_GetD3PCLK1Freq>
 80085ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085ec:	e0a7      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085ee:	4b56      	ldr	r3, [pc, #344]	; (8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085fa:	d107      	bne.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085fc:	f107 0318 	add.w	r3, r7, #24
 8008600:	4618      	mov	r0, r3
 8008602:	f000 f8c1 	bl	8008788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800860a:	e098      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800860c:	2300      	movs	r3, #0
 800860e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008610:	e095      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008612:	4b4d      	ldr	r3, [pc, #308]	; (8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800861a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800861e:	d107      	bne.n	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008620:	f107 030c 	add.w	r3, r7, #12
 8008624:	4618      	mov	r0, r3
 8008626:	f000 fa03 	bl	8008a30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800862e:	e086      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008630:	2300      	movs	r3, #0
 8008632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008634:	e083      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008636:	4b44      	ldr	r3, [pc, #272]	; (8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 0304 	and.w	r3, r3, #4
 800863e:	2b04      	cmp	r3, #4
 8008640:	d109      	bne.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008642:	4b41      	ldr	r3, [pc, #260]	; (8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	08db      	lsrs	r3, r3, #3
 8008648:	f003 0303 	and.w	r3, r3, #3
 800864c:	4a3f      	ldr	r2, [pc, #252]	; (800874c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800864e:	fa22 f303 	lsr.w	r3, r2, r3
 8008652:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008654:	e073      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008656:	2300      	movs	r3, #0
 8008658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800865a:	e070      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800865c:	4b3a      	ldr	r3, [pc, #232]	; (8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008668:	d102      	bne.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800866a:	4b39      	ldr	r3, [pc, #228]	; (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800866c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800866e:	e066      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008674:	e063      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008676:	4b34      	ldr	r3, [pc, #208]	; (8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800867e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008682:	d102      	bne.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8008684:	4b33      	ldr	r3, [pc, #204]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8008686:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008688:	e059      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800868a:	2300      	movs	r3, #0
 800868c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800868e:	e056      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008690:	4b31      	ldr	r3, [pc, #196]	; (8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8008692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008694:	e053      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008696:	2300      	movs	r3, #0
 8008698:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800869a:	e050      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800869c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086a0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80086a4:	430b      	orrs	r3, r1
 80086a6:	d148      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80086a8:	4b27      	ldr	r3, [pc, #156]	; (8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80086aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086b0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80086b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086b8:	d02a      	beq.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80086ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086c0:	d838      	bhi.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80086c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d004      	beq.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80086c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086ce:	d00d      	beq.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80086d0:	e030      	b.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086d2:	4b1d      	ldr	r3, [pc, #116]	; (8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086de:	d102      	bne.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 80086e0:	4b1c      	ldr	r3, [pc, #112]	; (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80086e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086e4:	e02b      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80086e6:	2300      	movs	r3, #0
 80086e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086ea:	e028      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086ec:	4b16      	ldr	r3, [pc, #88]	; (8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086f8:	d107      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086fe:	4618      	mov	r0, r3
 8008700:	f000 faea 	bl	8008cd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008708:	e019      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800870e:	e016      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008710:	4b0d      	ldr	r3, [pc, #52]	; (8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008718:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800871c:	d107      	bne.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800871e:	f107 0318 	add.w	r3, r7, #24
 8008722:	4618      	mov	r0, r3
 8008724:	f000 f830 	bl	8008788 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800872c:	e007      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800872e:	2300      	movs	r3, #0
 8008730:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008732:	e004      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008734:	2300      	movs	r3, #0
 8008736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008738:	e001      	b.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800873a:	2300      	movs	r3, #0
 800873c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800873e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008740:	4618      	mov	r0, r3
 8008742:	3740      	adds	r7, #64	; 0x40
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	58024400 	.word	0x58024400
 800874c:	03d09000 	.word	0x03d09000
 8008750:	003d0900 	.word	0x003d0900
 8008754:	007a1200 	.word	0x007a1200
 8008758:	00bb8000 	.word	0x00bb8000

0800875c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008760:	f7fe f90a 	bl	8006978 <HAL_RCC_GetHCLKFreq>
 8008764:	4602      	mov	r2, r0
 8008766:	4b06      	ldr	r3, [pc, #24]	; (8008780 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008768:	6a1b      	ldr	r3, [r3, #32]
 800876a:	091b      	lsrs	r3, r3, #4
 800876c:	f003 0307 	and.w	r3, r3, #7
 8008770:	4904      	ldr	r1, [pc, #16]	; (8008784 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008772:	5ccb      	ldrb	r3, [r1, r3]
 8008774:	f003 031f 	and.w	r3, r3, #31
 8008778:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800877c:	4618      	mov	r0, r3
 800877e:	bd80      	pop	{r7, pc}
 8008780:	58024400 	.word	0x58024400
 8008784:	0800caf8 	.word	0x0800caf8

08008788 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008788:	b480      	push	{r7}
 800878a:	b089      	sub	sp, #36	; 0x24
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008790:	4ba1      	ldr	r3, [pc, #644]	; (8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008794:	f003 0303 	and.w	r3, r3, #3
 8008798:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800879a:	4b9f      	ldr	r3, [pc, #636]	; (8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800879c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879e:	0b1b      	lsrs	r3, r3, #12
 80087a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80087a6:	4b9c      	ldr	r3, [pc, #624]	; (8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087aa:	091b      	lsrs	r3, r3, #4
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80087b2:	4b99      	ldr	r3, [pc, #612]	; (8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b6:	08db      	lsrs	r3, r3, #3
 80087b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	fb02 f303 	mul.w	r3, r2, r3
 80087c2:	ee07 3a90 	vmov	s15, r3
 80087c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 8111 	beq.w	80089f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	2b02      	cmp	r3, #2
 80087da:	f000 8083 	beq.w	80088e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	f200 80a1 	bhi.w	8008928 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d003      	beq.n	80087f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d056      	beq.n	80088a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80087f2:	e099      	b.n	8008928 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087f4:	4b88      	ldr	r3, [pc, #544]	; (8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 0320 	and.w	r3, r3, #32
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d02d      	beq.n	800885c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008800:	4b85      	ldr	r3, [pc, #532]	; (8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	08db      	lsrs	r3, r3, #3
 8008806:	f003 0303 	and.w	r3, r3, #3
 800880a:	4a84      	ldr	r2, [pc, #528]	; (8008a1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800880c:	fa22 f303 	lsr.w	r3, r2, r3
 8008810:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	ee07 3a90 	vmov	s15, r3
 8008818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	ee07 3a90 	vmov	s15, r3
 8008822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800882a:	4b7b      	ldr	r3, [pc, #492]	; (8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800882c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800883a:	ed97 6a03 	vldr	s12, [r7, #12]
 800883e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008a20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800884a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800884e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008856:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800885a:	e087      	b.n	800896c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008866:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008a24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800886a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800886e:	4b6a      	ldr	r3, [pc, #424]	; (8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008876:	ee07 3a90 	vmov	s15, r3
 800887a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008882:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008a20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800888a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800888e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800889a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800889e:	e065      	b.n	800896c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	ee07 3a90 	vmov	s15, r3
 80088a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80088ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088b2:	4b59      	ldr	r3, [pc, #356]	; (8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008a20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088e2:	e043      	b.n	800896c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80088f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088f6:	4b48      	ldr	r3, [pc, #288]	; (8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088fe:	ee07 3a90 	vmov	s15, r3
 8008902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008906:	ed97 6a03 	vldr	s12, [r7, #12]
 800890a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008a20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800890e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800891a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800891e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008926:	e021      	b.n	800896c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	ee07 3a90 	vmov	s15, r3
 800892e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008932:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800893a:	4b37      	ldr	r3, [pc, #220]	; (8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800893c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800894a:	ed97 6a03 	vldr	s12, [r7, #12]
 800894e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008a20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800895a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800895e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800896a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800896c:	4b2a      	ldr	r3, [pc, #168]	; (8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800896e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008970:	0a5b      	lsrs	r3, r3, #9
 8008972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008976:	ee07 3a90 	vmov	s15, r3
 800897a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800897e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008982:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008986:	edd7 6a07 	vldr	s13, [r7, #28]
 800898a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800898e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008992:	ee17 2a90 	vmov	r2, s15
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800899a:	4b1f      	ldr	r3, [pc, #124]	; (8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800899c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899e:	0c1b      	lsrs	r3, r3, #16
 80089a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089a4:	ee07 3a90 	vmov	s15, r3
 80089a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089c0:	ee17 2a90 	vmov	r2, s15
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80089c8:	4b13      	ldr	r3, [pc, #76]	; (8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089cc:	0e1b      	lsrs	r3, r3, #24
 80089ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80089e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089ee:	ee17 2a90 	vmov	r2, s15
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80089f6:	e008      	b.n	8008a0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	609a      	str	r2, [r3, #8]
}
 8008a0a:	bf00      	nop
 8008a0c:	3724      	adds	r7, #36	; 0x24
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	58024400 	.word	0x58024400
 8008a1c:	03d09000 	.word	0x03d09000
 8008a20:	46000000 	.word	0x46000000
 8008a24:	4c742400 	.word	0x4c742400
 8008a28:	4a742400 	.word	0x4a742400
 8008a2c:	4af42400 	.word	0x4af42400

08008a30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b089      	sub	sp, #36	; 0x24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a38:	4ba1      	ldr	r3, [pc, #644]	; (8008cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a3c:	f003 0303 	and.w	r3, r3, #3
 8008a40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008a42:	4b9f      	ldr	r3, [pc, #636]	; (8008cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a46:	0d1b      	lsrs	r3, r3, #20
 8008a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008a4e:	4b9c      	ldr	r3, [pc, #624]	; (8008cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a52:	0a1b      	lsrs	r3, r3, #8
 8008a54:	f003 0301 	and.w	r3, r3, #1
 8008a58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008a5a:	4b99      	ldr	r3, [pc, #612]	; (8008cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a5e:	08db      	lsrs	r3, r3, #3
 8008a60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	fb02 f303 	mul.w	r3, r2, r3
 8008a6a:	ee07 3a90 	vmov	s15, r3
 8008a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 8111 	beq.w	8008ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	f000 8083 	beq.w	8008b8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	f200 80a1 	bhi.w	8008bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d003      	beq.n	8008a9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d056      	beq.n	8008b48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008a9a:	e099      	b.n	8008bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a9c:	4b88      	ldr	r3, [pc, #544]	; (8008cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0320 	and.w	r3, r3, #32
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d02d      	beq.n	8008b04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008aa8:	4b85      	ldr	r3, [pc, #532]	; (8008cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	08db      	lsrs	r3, r3, #3
 8008aae:	f003 0303 	and.w	r3, r3, #3
 8008ab2:	4a84      	ldr	r2, [pc, #528]	; (8008cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ab8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	ee07 3a90 	vmov	s15, r3
 8008ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	ee07 3a90 	vmov	s15, r3
 8008aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ad2:	4b7b      	ldr	r3, [pc, #492]	; (8008cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ada:	ee07 3a90 	vmov	s15, r3
 8008ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ae6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008afe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b02:	e087      	b.n	8008c14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	ee07 3a90 	vmov	s15, r3
 8008b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b0e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008ccc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b16:	4b6a      	ldr	r3, [pc, #424]	; (8008cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b1e:	ee07 3a90 	vmov	s15, r3
 8008b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b2a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b46:	e065      	b.n	8008c14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	ee07 3a90 	vmov	s15, r3
 8008b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b52:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b5a:	4b59      	ldr	r3, [pc, #356]	; (8008cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b62:	ee07 3a90 	vmov	s15, r3
 8008b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b6e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b8a:	e043      	b.n	8008c14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b96:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b9e:	4b48      	ldr	r3, [pc, #288]	; (8008cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba6:	ee07 3a90 	vmov	s15, r3
 8008baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bb2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bce:	e021      	b.n	8008c14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	ee07 3a90 	vmov	s15, r3
 8008bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bda:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008be2:	4b37      	ldr	r3, [pc, #220]	; (8008cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bea:	ee07 3a90 	vmov	s15, r3
 8008bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bf6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c12:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008c14:	4b2a      	ldr	r3, [pc, #168]	; (8008cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c18:	0a5b      	lsrs	r3, r3, #9
 8008c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c3a:	ee17 2a90 	vmov	r2, s15
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008c42:	4b1f      	ldr	r3, [pc, #124]	; (8008cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c46:	0c1b      	lsrs	r3, r3, #16
 8008c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c4c:	ee07 3a90 	vmov	s15, r3
 8008c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c68:	ee17 2a90 	vmov	r2, s15
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008c70:	4b13      	ldr	r3, [pc, #76]	; (8008cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c74:	0e1b      	lsrs	r3, r3, #24
 8008c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c7a:	ee07 3a90 	vmov	s15, r3
 8008c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c96:	ee17 2a90 	vmov	r2, s15
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008c9e:	e008      	b.n	8008cb2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	609a      	str	r2, [r3, #8]
}
 8008cb2:	bf00      	nop
 8008cb4:	3724      	adds	r7, #36	; 0x24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	58024400 	.word	0x58024400
 8008cc4:	03d09000 	.word	0x03d09000
 8008cc8:	46000000 	.word	0x46000000
 8008ccc:	4c742400 	.word	0x4c742400
 8008cd0:	4a742400 	.word	0x4a742400
 8008cd4:	4af42400 	.word	0x4af42400

08008cd8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b089      	sub	sp, #36	; 0x24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ce0:	4ba0      	ldr	r3, [pc, #640]	; (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce4:	f003 0303 	and.w	r3, r3, #3
 8008ce8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008cea:	4b9e      	ldr	r3, [pc, #632]	; (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cee:	091b      	lsrs	r3, r3, #4
 8008cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cf4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008cf6:	4b9b      	ldr	r3, [pc, #620]	; (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008d00:	4b98      	ldr	r3, [pc, #608]	; (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d04:	08db      	lsrs	r3, r3, #3
 8008d06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	fb02 f303 	mul.w	r3, r2, r3
 8008d10:	ee07 3a90 	vmov	s15, r3
 8008d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d18:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 8111 	beq.w	8008f46 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	f000 8083 	beq.w	8008e32 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	f200 80a1 	bhi.w	8008e76 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d003      	beq.n	8008d42 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d056      	beq.n	8008dee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008d40:	e099      	b.n	8008e76 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d42:	4b88      	ldr	r3, [pc, #544]	; (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0320 	and.w	r3, r3, #32
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d02d      	beq.n	8008daa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d4e:	4b85      	ldr	r3, [pc, #532]	; (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	08db      	lsrs	r3, r3, #3
 8008d54:	f003 0303 	and.w	r3, r3, #3
 8008d58:	4a83      	ldr	r2, [pc, #524]	; (8008f68 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d5e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	ee07 3a90 	vmov	s15, r3
 8008d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	ee07 3a90 	vmov	s15, r3
 8008d70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d78:	4b7a      	ldr	r3, [pc, #488]	; (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d80:	ee07 3a90 	vmov	s15, r3
 8008d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d88:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d8c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008f6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008da8:	e087      	b.n	8008eba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	ee07 3a90 	vmov	s15, r3
 8008db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008f70 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008db8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dbc:	4b69      	ldr	r3, [pc, #420]	; (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dc4:	ee07 3a90 	vmov	s15, r3
 8008dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dcc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dd0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008f6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008dd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ddc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008de0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dec:	e065      	b.n	8008eba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	ee07 3a90 	vmov	s15, r3
 8008df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008f74 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008dfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e00:	4b58      	ldr	r3, [pc, #352]	; (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e08:	ee07 3a90 	vmov	s15, r3
 8008e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e10:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e14:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008f6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e30:	e043      	b.n	8008eba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	ee07 3a90 	vmov	s15, r3
 8008e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008f78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008e40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e44:	4b47      	ldr	r3, [pc, #284]	; (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e4c:	ee07 3a90 	vmov	s15, r3
 8008e50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e54:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e58:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008f6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e74:	e021      	b.n	8008eba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	ee07 3a90 	vmov	s15, r3
 8008e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e80:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008f70 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008e84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e88:	4b36      	ldr	r3, [pc, #216]	; (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e90:	ee07 3a90 	vmov	s15, r3
 8008e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e98:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e9c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008f6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ea0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ea4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eb4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008eb8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008eba:	4b2a      	ldr	r3, [pc, #168]	; (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ebe:	0a5b      	lsrs	r3, r3, #9
 8008ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ec4:	ee07 3a90 	vmov	s15, r3
 8008ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ecc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ed0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ed4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ee0:	ee17 2a90 	vmov	r2, s15
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008ee8:	4b1e      	ldr	r3, [pc, #120]	; (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eec:	0c1b      	lsrs	r3, r3, #16
 8008eee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ef2:	ee07 3a90 	vmov	s15, r3
 8008ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008efa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008efe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f02:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f0e:	ee17 2a90 	vmov	r2, s15
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008f16:	4b13      	ldr	r3, [pc, #76]	; (8008f64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1a:	0e1b      	lsrs	r3, r3, #24
 8008f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f20:	ee07 3a90 	vmov	s15, r3
 8008f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f30:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f3c:	ee17 2a90 	vmov	r2, s15
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008f44:	e008      	b.n	8008f58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	609a      	str	r2, [r3, #8]
}
 8008f58:	bf00      	nop
 8008f5a:	3724      	adds	r7, #36	; 0x24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	58024400 	.word	0x58024400
 8008f68:	03d09000 	.word	0x03d09000
 8008f6c:	46000000 	.word	0x46000000
 8008f70:	4c742400 	.word	0x4c742400
 8008f74:	4a742400 	.word	0x4a742400
 8008f78:	4af42400 	.word	0x4af42400

08008f7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f8a:	4b53      	ldr	r3, [pc, #332]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 8008f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8e:	f003 0303 	and.w	r3, r3, #3
 8008f92:	2b03      	cmp	r3, #3
 8008f94:	d101      	bne.n	8008f9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e099      	b.n	80090ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008f9a:	4b4f      	ldr	r3, [pc, #316]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a4e      	ldr	r2, [pc, #312]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 8008fa0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fa6:	f7f8 fc09 	bl	80017bc <HAL_GetTick>
 8008faa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008fac:	e008      	b.n	8008fc0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008fae:	f7f8 fc05 	bl	80017bc <HAL_GetTick>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d901      	bls.n	8008fc0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e086      	b.n	80090ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008fc0:	4b45      	ldr	r3, [pc, #276]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1f0      	bne.n	8008fae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008fcc:	4b42      	ldr	r3, [pc, #264]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 8008fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	031b      	lsls	r3, r3, #12
 8008fda:	493f      	ldr	r1, [pc, #252]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	628b      	str	r3, [r1, #40]	; 0x28
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	025b      	lsls	r3, r3, #9
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	431a      	orrs	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	041b      	lsls	r3, r3, #16
 8008ffe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009002:	431a      	orrs	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	3b01      	subs	r3, #1
 800900a:	061b      	lsls	r3, r3, #24
 800900c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009010:	4931      	ldr	r1, [pc, #196]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 8009012:	4313      	orrs	r3, r2
 8009014:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009016:	4b30      	ldr	r3, [pc, #192]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 8009018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	492d      	ldr	r1, [pc, #180]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 8009024:	4313      	orrs	r3, r2
 8009026:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009028:	4b2b      	ldr	r3, [pc, #172]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 800902a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902c:	f023 0220 	bic.w	r2, r3, #32
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	699b      	ldr	r3, [r3, #24]
 8009034:	4928      	ldr	r1, [pc, #160]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 8009036:	4313      	orrs	r3, r2
 8009038:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800903a:	4b27      	ldr	r3, [pc, #156]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 800903c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903e:	4a26      	ldr	r2, [pc, #152]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 8009040:	f023 0310 	bic.w	r3, r3, #16
 8009044:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009046:	4b24      	ldr	r3, [pc, #144]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 8009048:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800904a:	4b24      	ldr	r3, [pc, #144]	; (80090dc <RCCEx_PLL2_Config+0x160>)
 800904c:	4013      	ands	r3, r2
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	69d2      	ldr	r2, [r2, #28]
 8009052:	00d2      	lsls	r2, r2, #3
 8009054:	4920      	ldr	r1, [pc, #128]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 8009056:	4313      	orrs	r3, r2
 8009058:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800905a:	4b1f      	ldr	r3, [pc, #124]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 800905c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905e:	4a1e      	ldr	r2, [pc, #120]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 8009060:	f043 0310 	orr.w	r3, r3, #16
 8009064:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d106      	bne.n	800907a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800906c:	4b1a      	ldr	r3, [pc, #104]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 800906e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009070:	4a19      	ldr	r2, [pc, #100]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 8009072:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009076:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009078:	e00f      	b.n	800909a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d106      	bne.n	800908e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009080:	4b15      	ldr	r3, [pc, #84]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 8009082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009084:	4a14      	ldr	r2, [pc, #80]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 8009086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800908a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800908c:	e005      	b.n	800909a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800908e:	4b12      	ldr	r3, [pc, #72]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 8009090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009092:	4a11      	ldr	r2, [pc, #68]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 8009094:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009098:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800909a:	4b0f      	ldr	r3, [pc, #60]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a0e      	ldr	r2, [pc, #56]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 80090a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80090a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090a6:	f7f8 fb89 	bl	80017bc <HAL_GetTick>
 80090aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80090ac:	e008      	b.n	80090c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80090ae:	f7f8 fb85 	bl	80017bc <HAL_GetTick>
 80090b2:	4602      	mov	r2, r0
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d901      	bls.n	80090c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80090bc:	2303      	movs	r3, #3
 80090be:	e006      	b.n	80090ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80090c0:	4b05      	ldr	r3, [pc, #20]	; (80090d8 <RCCEx_PLL2_Config+0x15c>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d0f0      	beq.n	80090ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80090cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	58024400 	.word	0x58024400
 80090dc:	ffff0007 	.word	0xffff0007

080090e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090ea:	2300      	movs	r3, #0
 80090ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090ee:	4b53      	ldr	r3, [pc, #332]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 80090f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f2:	f003 0303 	and.w	r3, r3, #3
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	d101      	bne.n	80090fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e099      	b.n	8009232 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80090fe:	4b4f      	ldr	r3, [pc, #316]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a4e      	ldr	r2, [pc, #312]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 8009104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009108:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800910a:	f7f8 fb57 	bl	80017bc <HAL_GetTick>
 800910e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009110:	e008      	b.n	8009124 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009112:	f7f8 fb53 	bl	80017bc <HAL_GetTick>
 8009116:	4602      	mov	r2, r0
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	1ad3      	subs	r3, r2, r3
 800911c:	2b02      	cmp	r3, #2
 800911e:	d901      	bls.n	8009124 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009120:	2303      	movs	r3, #3
 8009122:	e086      	b.n	8009232 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009124:	4b45      	ldr	r3, [pc, #276]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1f0      	bne.n	8009112 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009130:	4b42      	ldr	r3, [pc, #264]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 8009132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009134:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	051b      	lsls	r3, r3, #20
 800913e:	493f      	ldr	r1, [pc, #252]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 8009140:	4313      	orrs	r3, r2
 8009142:	628b      	str	r3, [r1, #40]	; 0x28
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	3b01      	subs	r3, #1
 800914a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	3b01      	subs	r3, #1
 8009154:	025b      	lsls	r3, r3, #9
 8009156:	b29b      	uxth	r3, r3
 8009158:	431a      	orrs	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	3b01      	subs	r3, #1
 8009160:	041b      	lsls	r3, r3, #16
 8009162:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009166:	431a      	orrs	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	3b01      	subs	r3, #1
 800916e:	061b      	lsls	r3, r3, #24
 8009170:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009174:	4931      	ldr	r1, [pc, #196]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 8009176:	4313      	orrs	r3, r2
 8009178:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800917a:	4b30      	ldr	r3, [pc, #192]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 800917c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	695b      	ldr	r3, [r3, #20]
 8009186:	492d      	ldr	r1, [pc, #180]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 8009188:	4313      	orrs	r3, r2
 800918a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800918c:	4b2b      	ldr	r3, [pc, #172]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 800918e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009190:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	4928      	ldr	r1, [pc, #160]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 800919a:	4313      	orrs	r3, r2
 800919c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800919e:	4b27      	ldr	r3, [pc, #156]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 80091a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a2:	4a26      	ldr	r2, [pc, #152]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 80091a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80091aa:	4b24      	ldr	r3, [pc, #144]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 80091ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091ae:	4b24      	ldr	r3, [pc, #144]	; (8009240 <RCCEx_PLL3_Config+0x160>)
 80091b0:	4013      	ands	r3, r2
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	69d2      	ldr	r2, [r2, #28]
 80091b6:	00d2      	lsls	r2, r2, #3
 80091b8:	4920      	ldr	r1, [pc, #128]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80091be:	4b1f      	ldr	r3, [pc, #124]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 80091c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c2:	4a1e      	ldr	r2, [pc, #120]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 80091c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d106      	bne.n	80091de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80091d0:	4b1a      	ldr	r3, [pc, #104]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 80091d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d4:	4a19      	ldr	r2, [pc, #100]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 80091d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80091da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80091dc:	e00f      	b.n	80091fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d106      	bne.n	80091f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80091e4:	4b15      	ldr	r3, [pc, #84]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 80091e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e8:	4a14      	ldr	r2, [pc, #80]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 80091ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80091ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80091f0:	e005      	b.n	80091fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80091f2:	4b12      	ldr	r3, [pc, #72]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 80091f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f6:	4a11      	ldr	r2, [pc, #68]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 80091f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80091fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80091fe:	4b0f      	ldr	r3, [pc, #60]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a0e      	ldr	r2, [pc, #56]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 8009204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800920a:	f7f8 fad7 	bl	80017bc <HAL_GetTick>
 800920e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009210:	e008      	b.n	8009224 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009212:	f7f8 fad3 	bl	80017bc <HAL_GetTick>
 8009216:	4602      	mov	r2, r0
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	1ad3      	subs	r3, r2, r3
 800921c:	2b02      	cmp	r3, #2
 800921e:	d901      	bls.n	8009224 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009220:	2303      	movs	r3, #3
 8009222:	e006      	b.n	8009232 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009224:	4b05      	ldr	r3, [pc, #20]	; (800923c <RCCEx_PLL3_Config+0x15c>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800922c:	2b00      	cmp	r3, #0
 800922e:	d0f0      	beq.n	8009212 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009230:	7bfb      	ldrb	r3, [r7, #15]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	58024400 	.word	0x58024400
 8009240:	ffff0007 	.word	0xffff0007

08009244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e049      	b.n	80092ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d106      	bne.n	8009270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7f7 ffd6 	bl	800121c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2202      	movs	r2, #2
 8009274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	3304      	adds	r3, #4
 8009280:	4619      	mov	r1, r3
 8009282:	4610      	mov	r0, r2
 8009284:	f000 fcf2 	bl	8009c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092e8:	2300      	movs	r3, #0
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80092f2:	b480      	push	{r7}
 80092f4:	b083      	sub	sp, #12
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68da      	ldr	r2, [r3, #12]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f022 0201 	bic.w	r2, r2, #1
 8009308:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	6a1a      	ldr	r2, [r3, #32]
 8009310:	f241 1311 	movw	r3, #4369	; 0x1111
 8009314:	4013      	ands	r3, r2
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10f      	bne.n	800933a <HAL_TIM_Base_Stop_IT+0x48>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	6a1a      	ldr	r2, [r3, #32]
 8009320:	f240 4344 	movw	r3, #1092	; 0x444
 8009324:	4013      	ands	r3, r2
 8009326:	2b00      	cmp	r3, #0
 8009328:	d107      	bne.n	800933a <HAL_TIM_Base_Stop_IT+0x48>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f022 0201 	bic.w	r2, r2, #1
 8009338:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e049      	b.n	80093f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d106      	bne.n	800937c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f841 	bl	80093fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2202      	movs	r2, #2
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	3304      	adds	r3, #4
 800938c:	4619      	mov	r1, r3
 800938e:	4610      	mov	r0, r2
 8009390:	f000 fc6c 	bl	8009c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2201      	movs	r2, #1
 80093e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80093fe:	b480      	push	{r7}
 8009400:	b083      	sub	sp, #12
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009406:	bf00      	nop
 8009408:	370c      	adds	r7, #12
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
	...

08009414 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2200      	movs	r2, #0
 8009424:	6839      	ldr	r1, [r7, #0]
 8009426:	4618      	mov	r0, r3
 8009428:	f001 f918 	bl	800a65c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a3e      	ldr	r2, [pc, #248]	; (800952c <HAL_TIM_PWM_Stop+0x118>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d013      	beq.n	800945e <HAL_TIM_PWM_Stop+0x4a>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a3d      	ldr	r2, [pc, #244]	; (8009530 <HAL_TIM_PWM_Stop+0x11c>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d00e      	beq.n	800945e <HAL_TIM_PWM_Stop+0x4a>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a3b      	ldr	r2, [pc, #236]	; (8009534 <HAL_TIM_PWM_Stop+0x120>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d009      	beq.n	800945e <HAL_TIM_PWM_Stop+0x4a>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a3a      	ldr	r2, [pc, #232]	; (8009538 <HAL_TIM_PWM_Stop+0x124>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d004      	beq.n	800945e <HAL_TIM_PWM_Stop+0x4a>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a38      	ldr	r2, [pc, #224]	; (800953c <HAL_TIM_PWM_Stop+0x128>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d101      	bne.n	8009462 <HAL_TIM_PWM_Stop+0x4e>
 800945e:	2301      	movs	r3, #1
 8009460:	e000      	b.n	8009464 <HAL_TIM_PWM_Stop+0x50>
 8009462:	2300      	movs	r3, #0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d017      	beq.n	8009498 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6a1a      	ldr	r2, [r3, #32]
 800946e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009472:	4013      	ands	r3, r2
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10f      	bne.n	8009498 <HAL_TIM_PWM_Stop+0x84>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6a1a      	ldr	r2, [r3, #32]
 800947e:	f240 4344 	movw	r3, #1092	; 0x444
 8009482:	4013      	ands	r3, r2
 8009484:	2b00      	cmp	r3, #0
 8009486:	d107      	bne.n	8009498 <HAL_TIM_PWM_Stop+0x84>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009496:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6a1a      	ldr	r2, [r3, #32]
 800949e:	f241 1311 	movw	r3, #4369	; 0x1111
 80094a2:	4013      	ands	r3, r2
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10f      	bne.n	80094c8 <HAL_TIM_PWM_Stop+0xb4>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6a1a      	ldr	r2, [r3, #32]
 80094ae:	f240 4344 	movw	r3, #1092	; 0x444
 80094b2:	4013      	ands	r3, r2
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d107      	bne.n	80094c8 <HAL_TIM_PWM_Stop+0xb4>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f022 0201 	bic.w	r2, r2, #1
 80094c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d104      	bne.n	80094d8 <HAL_TIM_PWM_Stop+0xc4>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094d6:	e023      	b.n	8009520 <HAL_TIM_PWM_Stop+0x10c>
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	2b04      	cmp	r3, #4
 80094dc:	d104      	bne.n	80094e8 <HAL_TIM_PWM_Stop+0xd4>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094e6:	e01b      	b.n	8009520 <HAL_TIM_PWM_Stop+0x10c>
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	2b08      	cmp	r3, #8
 80094ec:	d104      	bne.n	80094f8 <HAL_TIM_PWM_Stop+0xe4>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2201      	movs	r2, #1
 80094f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094f6:	e013      	b.n	8009520 <HAL_TIM_PWM_Stop+0x10c>
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	2b0c      	cmp	r3, #12
 80094fc:	d104      	bne.n	8009508 <HAL_TIM_PWM_Stop+0xf4>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2201      	movs	r2, #1
 8009502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009506:	e00b      	b.n	8009520 <HAL_TIM_PWM_Stop+0x10c>
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	2b10      	cmp	r3, #16
 800950c:	d104      	bne.n	8009518 <HAL_TIM_PWM_Stop+0x104>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2201      	movs	r2, #1
 8009512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009516:	e003      	b.n	8009520 <HAL_TIM_PWM_Stop+0x10c>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	40010000 	.word	0x40010000
 8009530:	40010400 	.word	0x40010400
 8009534:	40014000 	.word	0x40014000
 8009538:	40014400 	.word	0x40014400
 800953c:	40014800 	.word	0x40014800

08009540 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	f003 0302 	and.w	r3, r3, #2
 8009552:	2b02      	cmp	r3, #2
 8009554:	d122      	bne.n	800959c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	f003 0302 	and.w	r3, r3, #2
 8009560:	2b02      	cmp	r3, #2
 8009562:	d11b      	bne.n	800959c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f06f 0202 	mvn.w	r2, #2
 800956c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	f003 0303 	and.w	r3, r3, #3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 fb54 	bl	8009c30 <HAL_TIM_IC_CaptureCallback>
 8009588:	e005      	b.n	8009596 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fb46 	bl	8009c1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fb57 	bl	8009c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	f003 0304 	and.w	r3, r3, #4
 80095a6:	2b04      	cmp	r3, #4
 80095a8:	d122      	bne.n	80095f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	f003 0304 	and.w	r3, r3, #4
 80095b4:	2b04      	cmp	r3, #4
 80095b6:	d11b      	bne.n	80095f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f06f 0204 	mvn.w	r2, #4
 80095c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2202      	movs	r2, #2
 80095c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d003      	beq.n	80095de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 fb2a 	bl	8009c30 <HAL_TIM_IC_CaptureCallback>
 80095dc:	e005      	b.n	80095ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fb1c 	bl	8009c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fb2d 	bl	8009c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	f003 0308 	and.w	r3, r3, #8
 80095fa:	2b08      	cmp	r3, #8
 80095fc:	d122      	bne.n	8009644 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	f003 0308 	and.w	r3, r3, #8
 8009608:	2b08      	cmp	r3, #8
 800960a:	d11b      	bne.n	8009644 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f06f 0208 	mvn.w	r2, #8
 8009614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2204      	movs	r2, #4
 800961a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	69db      	ldr	r3, [r3, #28]
 8009622:	f003 0303 	and.w	r3, r3, #3
 8009626:	2b00      	cmp	r3, #0
 8009628:	d003      	beq.n	8009632 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fb00 	bl	8009c30 <HAL_TIM_IC_CaptureCallback>
 8009630:	e005      	b.n	800963e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 faf2 	bl	8009c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fb03 	bl	8009c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	f003 0310 	and.w	r3, r3, #16
 800964e:	2b10      	cmp	r3, #16
 8009650:	d122      	bne.n	8009698 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	f003 0310 	and.w	r3, r3, #16
 800965c:	2b10      	cmp	r3, #16
 800965e:	d11b      	bne.n	8009698 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f06f 0210 	mvn.w	r2, #16
 8009668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2208      	movs	r2, #8
 800966e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800967a:	2b00      	cmp	r3, #0
 800967c:	d003      	beq.n	8009686 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fad6 	bl	8009c30 <HAL_TIM_IC_CaptureCallback>
 8009684:	e005      	b.n	8009692 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 fac8 	bl	8009c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 fad9 	bl	8009c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	691b      	ldr	r3, [r3, #16]
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d10e      	bne.n	80096c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	f003 0301 	and.w	r3, r3, #1
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d107      	bne.n	80096c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f06f 0201 	mvn.w	r2, #1
 80096bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7f7 faf8 	bl	8000cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ce:	2b80      	cmp	r3, #128	; 0x80
 80096d0:	d10e      	bne.n	80096f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096dc:	2b80      	cmp	r3, #128	; 0x80
 80096de:	d107      	bne.n	80096f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80096e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f001 f874 	bl	800a7d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096fe:	d10e      	bne.n	800971e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800970a:	2b80      	cmp	r3, #128	; 0x80
 800970c:	d107      	bne.n	800971e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f001 f867 	bl	800a7ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009728:	2b40      	cmp	r3, #64	; 0x40
 800972a:	d10e      	bne.n	800974a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009736:	2b40      	cmp	r3, #64	; 0x40
 8009738:	d107      	bne.n	800974a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 fa87 	bl	8009c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	f003 0320 	and.w	r3, r3, #32
 8009754:	2b20      	cmp	r3, #32
 8009756:	d10e      	bne.n	8009776 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	f003 0320 	and.w	r3, r3, #32
 8009762:	2b20      	cmp	r3, #32
 8009764:	d107      	bne.n	8009776 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f06f 0220 	mvn.w	r2, #32
 800976e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f001 f827 	bl	800a7c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009776:	bf00      	nop
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
	...

08009780 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b086      	sub	sp, #24
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800978c:	2300      	movs	r3, #0
 800978e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009796:	2b01      	cmp	r3, #1
 8009798:	d101      	bne.n	800979e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800979a:	2302      	movs	r3, #2
 800979c:	e0ff      	b.n	800999e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2b14      	cmp	r3, #20
 80097aa:	f200 80f0 	bhi.w	800998e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80097ae:	a201      	add	r2, pc, #4	; (adr r2, 80097b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80097b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b4:	08009809 	.word	0x08009809
 80097b8:	0800998f 	.word	0x0800998f
 80097bc:	0800998f 	.word	0x0800998f
 80097c0:	0800998f 	.word	0x0800998f
 80097c4:	08009849 	.word	0x08009849
 80097c8:	0800998f 	.word	0x0800998f
 80097cc:	0800998f 	.word	0x0800998f
 80097d0:	0800998f 	.word	0x0800998f
 80097d4:	0800988b 	.word	0x0800988b
 80097d8:	0800998f 	.word	0x0800998f
 80097dc:	0800998f 	.word	0x0800998f
 80097e0:	0800998f 	.word	0x0800998f
 80097e4:	080098cb 	.word	0x080098cb
 80097e8:	0800998f 	.word	0x0800998f
 80097ec:	0800998f 	.word	0x0800998f
 80097f0:	0800998f 	.word	0x0800998f
 80097f4:	0800990d 	.word	0x0800990d
 80097f8:	0800998f 	.word	0x0800998f
 80097fc:	0800998f 	.word	0x0800998f
 8009800:	0800998f 	.word	0x0800998f
 8009804:	0800994d 	.word	0x0800994d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68b9      	ldr	r1, [r7, #8]
 800980e:	4618      	mov	r0, r3
 8009810:	f000 fac6 	bl	8009da0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	699a      	ldr	r2, [r3, #24]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f042 0208 	orr.w	r2, r2, #8
 8009822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	699a      	ldr	r2, [r3, #24]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f022 0204 	bic.w	r2, r2, #4
 8009832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6999      	ldr	r1, [r3, #24]
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	691a      	ldr	r2, [r3, #16]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	430a      	orrs	r2, r1
 8009844:	619a      	str	r2, [r3, #24]
      break;
 8009846:	e0a5      	b.n	8009994 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	68b9      	ldr	r1, [r7, #8]
 800984e:	4618      	mov	r0, r3
 8009850:	f000 fb36 	bl	8009ec0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	699a      	ldr	r2, [r3, #24]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	699a      	ldr	r2, [r3, #24]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6999      	ldr	r1, [r3, #24]
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	021a      	lsls	r2, r3, #8
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	430a      	orrs	r2, r1
 8009886:	619a      	str	r2, [r3, #24]
      break;
 8009888:	e084      	b.n	8009994 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68b9      	ldr	r1, [r7, #8]
 8009890:	4618      	mov	r0, r3
 8009892:	f000 fb9f 	bl	8009fd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	69da      	ldr	r2, [r3, #28]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f042 0208 	orr.w	r2, r2, #8
 80098a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	69da      	ldr	r2, [r3, #28]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f022 0204 	bic.w	r2, r2, #4
 80098b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	69d9      	ldr	r1, [r3, #28]
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	691a      	ldr	r2, [r3, #16]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	430a      	orrs	r2, r1
 80098c6:	61da      	str	r2, [r3, #28]
      break;
 80098c8:	e064      	b.n	8009994 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68b9      	ldr	r1, [r7, #8]
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 fc07 	bl	800a0e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	69da      	ldr	r2, [r3, #28]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	69da      	ldr	r2, [r3, #28]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	69d9      	ldr	r1, [r3, #28]
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	021a      	lsls	r2, r3, #8
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	430a      	orrs	r2, r1
 8009908:	61da      	str	r2, [r3, #28]
      break;
 800990a:	e043      	b.n	8009994 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	68b9      	ldr	r1, [r7, #8]
 8009912:	4618      	mov	r0, r3
 8009914:	f000 fc50 	bl	800a1b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f042 0208 	orr.w	r2, r2, #8
 8009926:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f022 0204 	bic.w	r2, r2, #4
 8009936:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	691a      	ldr	r2, [r3, #16]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	430a      	orrs	r2, r1
 8009948:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800994a:	e023      	b.n	8009994 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68b9      	ldr	r1, [r7, #8]
 8009952:	4618      	mov	r0, r3
 8009954:	f000 fc94 	bl	800a280 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009966:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009976:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	021a      	lsls	r2, r3, #8
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	430a      	orrs	r2, r1
 800998a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800998c:	e002      	b.n	8009994 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	75fb      	strb	r3, [r7, #23]
      break;
 8009992:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800999c:	7dfb      	ldrb	r3, [r7, #23]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3718      	adds	r7, #24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop

080099a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099b2:	2300      	movs	r3, #0
 80099b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d101      	bne.n	80099c4 <HAL_TIM_ConfigClockSource+0x1c>
 80099c0:	2302      	movs	r3, #2
 80099c2:	e0dc      	b.n	8009b7e <HAL_TIM_ConfigClockSource+0x1d6>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2202      	movs	r2, #2
 80099d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	4b6a      	ldr	r3, [pc, #424]	; (8009b88 <HAL_TIM_ConfigClockSource+0x1e0>)
 80099e0:	4013      	ands	r3, r2
 80099e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68ba      	ldr	r2, [r7, #8]
 80099f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a64      	ldr	r2, [pc, #400]	; (8009b8c <HAL_TIM_ConfigClockSource+0x1e4>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	f000 80a9 	beq.w	8009b52 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a00:	4a62      	ldr	r2, [pc, #392]	; (8009b8c <HAL_TIM_ConfigClockSource+0x1e4>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	f200 80ae 	bhi.w	8009b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a08:	4a61      	ldr	r2, [pc, #388]	; (8009b90 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	f000 80a1 	beq.w	8009b52 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a10:	4a5f      	ldr	r2, [pc, #380]	; (8009b90 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	f200 80a6 	bhi.w	8009b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a18:	4a5e      	ldr	r2, [pc, #376]	; (8009b94 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	f000 8099 	beq.w	8009b52 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a20:	4a5c      	ldr	r2, [pc, #368]	; (8009b94 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	f200 809e 	bhi.w	8009b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009a2c:	f000 8091 	beq.w	8009b52 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a30:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009a34:	f200 8096 	bhi.w	8009b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a3c:	f000 8089 	beq.w	8009b52 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a44:	f200 808e 	bhi.w	8009b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a4c:	d03e      	beq.n	8009acc <HAL_TIM_ConfigClockSource+0x124>
 8009a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a52:	f200 8087 	bhi.w	8009b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a5a:	f000 8086 	beq.w	8009b6a <HAL_TIM_ConfigClockSource+0x1c2>
 8009a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a62:	d87f      	bhi.n	8009b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a64:	2b70      	cmp	r3, #112	; 0x70
 8009a66:	d01a      	beq.n	8009a9e <HAL_TIM_ConfigClockSource+0xf6>
 8009a68:	2b70      	cmp	r3, #112	; 0x70
 8009a6a:	d87b      	bhi.n	8009b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a6c:	2b60      	cmp	r3, #96	; 0x60
 8009a6e:	d050      	beq.n	8009b12 <HAL_TIM_ConfigClockSource+0x16a>
 8009a70:	2b60      	cmp	r3, #96	; 0x60
 8009a72:	d877      	bhi.n	8009b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a74:	2b50      	cmp	r3, #80	; 0x50
 8009a76:	d03c      	beq.n	8009af2 <HAL_TIM_ConfigClockSource+0x14a>
 8009a78:	2b50      	cmp	r3, #80	; 0x50
 8009a7a:	d873      	bhi.n	8009b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a7c:	2b40      	cmp	r3, #64	; 0x40
 8009a7e:	d058      	beq.n	8009b32 <HAL_TIM_ConfigClockSource+0x18a>
 8009a80:	2b40      	cmp	r3, #64	; 0x40
 8009a82:	d86f      	bhi.n	8009b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a84:	2b30      	cmp	r3, #48	; 0x30
 8009a86:	d064      	beq.n	8009b52 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a88:	2b30      	cmp	r3, #48	; 0x30
 8009a8a:	d86b      	bhi.n	8009b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a8c:	2b20      	cmp	r3, #32
 8009a8e:	d060      	beq.n	8009b52 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a90:	2b20      	cmp	r3, #32
 8009a92:	d867      	bhi.n	8009b64 <HAL_TIM_ConfigClockSource+0x1bc>
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d05c      	beq.n	8009b52 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a98:	2b10      	cmp	r3, #16
 8009a9a:	d05a      	beq.n	8009b52 <HAL_TIM_ConfigClockSource+0x1aa>
 8009a9c:	e062      	b.n	8009b64 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6818      	ldr	r0, [r3, #0]
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	6899      	ldr	r1, [r3, #8]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	685a      	ldr	r2, [r3, #4]
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	f000 fdb5 	bl	800a61c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009ac0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	68ba      	ldr	r2, [r7, #8]
 8009ac8:	609a      	str	r2, [r3, #8]
      break;
 8009aca:	e04f      	b.n	8009b6c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6818      	ldr	r0, [r3, #0]
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	6899      	ldr	r1, [r3, #8]
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	685a      	ldr	r2, [r3, #4]
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	f000 fd9e 	bl	800a61c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	689a      	ldr	r2, [r3, #8]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009aee:	609a      	str	r2, [r3, #8]
      break;
 8009af0:	e03c      	b.n	8009b6c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6818      	ldr	r0, [r3, #0]
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	6859      	ldr	r1, [r3, #4]
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	461a      	mov	r2, r3
 8009b00:	f000 fd0e 	bl	800a520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2150      	movs	r1, #80	; 0x50
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f000 fd68 	bl	800a5e0 <TIM_ITRx_SetConfig>
      break;
 8009b10:	e02c      	b.n	8009b6c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6818      	ldr	r0, [r3, #0]
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	6859      	ldr	r1, [r3, #4]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	461a      	mov	r2, r3
 8009b20:	f000 fd2d 	bl	800a57e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2160      	movs	r1, #96	; 0x60
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 fd58 	bl	800a5e0 <TIM_ITRx_SetConfig>
      break;
 8009b30:	e01c      	b.n	8009b6c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6818      	ldr	r0, [r3, #0]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	6859      	ldr	r1, [r3, #4]
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	f000 fcee 	bl	800a520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2140      	movs	r1, #64	; 0x40
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f000 fd48 	bl	800a5e0 <TIM_ITRx_SetConfig>
      break;
 8009b50:	e00c      	b.n	8009b6c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	4610      	mov	r0, r2
 8009b5e:	f000 fd3f 	bl	800a5e0 <TIM_ITRx_SetConfig>
      break;
 8009b62:	e003      	b.n	8009b6c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	73fb      	strb	r3, [r7, #15]
      break;
 8009b68:	e000      	b.n	8009b6c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009b6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	ffceff88 	.word	0xffceff88
 8009b8c:	00100040 	.word	0x00100040
 8009b90:	00100030 	.word	0x00100030
 8009b94:	00100020 	.word	0x00100020

08009b98 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d101      	bne.n	8009bb0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009bac:	2302      	movs	r3, #2
 8009bae:	e031      	b.n	8009c14 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2202      	movs	r2, #2
 8009bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fbc2 	bl	800a34c <TIM_SlaveTimer_SetConfig>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d009      	beq.n	8009be2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e018      	b.n	8009c14 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68da      	ldr	r2, [r3, #12]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bf0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68da      	ldr	r2, [r3, #12]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009c00:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a40      	ldr	r2, [pc, #256]	; (8009d80 <TIM_Base_SetConfig+0x114>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d013      	beq.n	8009cac <TIM_Base_SetConfig+0x40>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c8a:	d00f      	beq.n	8009cac <TIM_Base_SetConfig+0x40>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a3d      	ldr	r2, [pc, #244]	; (8009d84 <TIM_Base_SetConfig+0x118>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d00b      	beq.n	8009cac <TIM_Base_SetConfig+0x40>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a3c      	ldr	r2, [pc, #240]	; (8009d88 <TIM_Base_SetConfig+0x11c>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d007      	beq.n	8009cac <TIM_Base_SetConfig+0x40>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a3b      	ldr	r2, [pc, #236]	; (8009d8c <TIM_Base_SetConfig+0x120>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d003      	beq.n	8009cac <TIM_Base_SetConfig+0x40>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a3a      	ldr	r2, [pc, #232]	; (8009d90 <TIM_Base_SetConfig+0x124>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d108      	bne.n	8009cbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a2f      	ldr	r2, [pc, #188]	; (8009d80 <TIM_Base_SetConfig+0x114>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d01f      	beq.n	8009d06 <TIM_Base_SetConfig+0x9a>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ccc:	d01b      	beq.n	8009d06 <TIM_Base_SetConfig+0x9a>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a2c      	ldr	r2, [pc, #176]	; (8009d84 <TIM_Base_SetConfig+0x118>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d017      	beq.n	8009d06 <TIM_Base_SetConfig+0x9a>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a2b      	ldr	r2, [pc, #172]	; (8009d88 <TIM_Base_SetConfig+0x11c>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d013      	beq.n	8009d06 <TIM_Base_SetConfig+0x9a>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a2a      	ldr	r2, [pc, #168]	; (8009d8c <TIM_Base_SetConfig+0x120>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d00f      	beq.n	8009d06 <TIM_Base_SetConfig+0x9a>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a29      	ldr	r2, [pc, #164]	; (8009d90 <TIM_Base_SetConfig+0x124>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d00b      	beq.n	8009d06 <TIM_Base_SetConfig+0x9a>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a28      	ldr	r2, [pc, #160]	; (8009d94 <TIM_Base_SetConfig+0x128>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d007      	beq.n	8009d06 <TIM_Base_SetConfig+0x9a>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a27      	ldr	r2, [pc, #156]	; (8009d98 <TIM_Base_SetConfig+0x12c>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d003      	beq.n	8009d06 <TIM_Base_SetConfig+0x9a>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a26      	ldr	r2, [pc, #152]	; (8009d9c <TIM_Base_SetConfig+0x130>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d108      	bne.n	8009d18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	689a      	ldr	r2, [r3, #8]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a10      	ldr	r2, [pc, #64]	; (8009d80 <TIM_Base_SetConfig+0x114>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d00f      	beq.n	8009d64 <TIM_Base_SetConfig+0xf8>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a12      	ldr	r2, [pc, #72]	; (8009d90 <TIM_Base_SetConfig+0x124>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d00b      	beq.n	8009d64 <TIM_Base_SetConfig+0xf8>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a11      	ldr	r2, [pc, #68]	; (8009d94 <TIM_Base_SetConfig+0x128>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d007      	beq.n	8009d64 <TIM_Base_SetConfig+0xf8>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a10      	ldr	r2, [pc, #64]	; (8009d98 <TIM_Base_SetConfig+0x12c>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d003      	beq.n	8009d64 <TIM_Base_SetConfig+0xf8>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a0f      	ldr	r2, [pc, #60]	; (8009d9c <TIM_Base_SetConfig+0x130>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d103      	bne.n	8009d6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	691a      	ldr	r2, [r3, #16]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	615a      	str	r2, [r3, #20]
}
 8009d72:	bf00      	nop
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	40010000 	.word	0x40010000
 8009d84:	40000400 	.word	0x40000400
 8009d88:	40000800 	.word	0x40000800
 8009d8c:	40000c00 	.word	0x40000c00
 8009d90:	40010400 	.word	0x40010400
 8009d94:	40014000 	.word	0x40014000
 8009d98:	40014400 	.word	0x40014400
 8009d9c:	40014800 	.word	0x40014800

08009da0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b087      	sub	sp, #28
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	f023 0201 	bic.w	r2, r3, #1
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	699b      	ldr	r3, [r3, #24]
 8009dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	4b37      	ldr	r3, [pc, #220]	; (8009ea8 <TIM_OC1_SetConfig+0x108>)
 8009dcc:	4013      	ands	r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f023 0303 	bic.w	r3, r3, #3
 8009dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f023 0302 	bic.w	r3, r3, #2
 8009de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a2d      	ldr	r2, [pc, #180]	; (8009eac <TIM_OC1_SetConfig+0x10c>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d00f      	beq.n	8009e1c <TIM_OC1_SetConfig+0x7c>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a2c      	ldr	r2, [pc, #176]	; (8009eb0 <TIM_OC1_SetConfig+0x110>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d00b      	beq.n	8009e1c <TIM_OC1_SetConfig+0x7c>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a2b      	ldr	r2, [pc, #172]	; (8009eb4 <TIM_OC1_SetConfig+0x114>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d007      	beq.n	8009e1c <TIM_OC1_SetConfig+0x7c>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a2a      	ldr	r2, [pc, #168]	; (8009eb8 <TIM_OC1_SetConfig+0x118>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d003      	beq.n	8009e1c <TIM_OC1_SetConfig+0x7c>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a29      	ldr	r2, [pc, #164]	; (8009ebc <TIM_OC1_SetConfig+0x11c>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d10c      	bne.n	8009e36 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	f023 0308 	bic.w	r3, r3, #8
 8009e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	f023 0304 	bic.w	r3, r3, #4
 8009e34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4a1c      	ldr	r2, [pc, #112]	; (8009eac <TIM_OC1_SetConfig+0x10c>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d00f      	beq.n	8009e5e <TIM_OC1_SetConfig+0xbe>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4a1b      	ldr	r2, [pc, #108]	; (8009eb0 <TIM_OC1_SetConfig+0x110>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d00b      	beq.n	8009e5e <TIM_OC1_SetConfig+0xbe>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4a1a      	ldr	r2, [pc, #104]	; (8009eb4 <TIM_OC1_SetConfig+0x114>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d007      	beq.n	8009e5e <TIM_OC1_SetConfig+0xbe>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4a19      	ldr	r2, [pc, #100]	; (8009eb8 <TIM_OC1_SetConfig+0x118>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d003      	beq.n	8009e5e <TIM_OC1_SetConfig+0xbe>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a18      	ldr	r2, [pc, #96]	; (8009ebc <TIM_OC1_SetConfig+0x11c>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d111      	bne.n	8009e82 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	695b      	ldr	r3, [r3, #20]
 8009e72:	693a      	ldr	r2, [r7, #16]
 8009e74:	4313      	orrs	r3, r2
 8009e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	699b      	ldr	r3, [r3, #24]
 8009e7c:	693a      	ldr	r2, [r7, #16]
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	693a      	ldr	r2, [r7, #16]
 8009e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	685a      	ldr	r2, [r3, #4]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	697a      	ldr	r2, [r7, #20]
 8009e9a:	621a      	str	r2, [r3, #32]
}
 8009e9c:	bf00      	nop
 8009e9e:	371c      	adds	r7, #28
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr
 8009ea8:	fffeff8f 	.word	0xfffeff8f
 8009eac:	40010000 	.word	0x40010000
 8009eb0:	40010400 	.word	0x40010400
 8009eb4:	40014000 	.word	0x40014000
 8009eb8:	40014400 	.word	0x40014400
 8009ebc:	40014800 	.word	0x40014800

08009ec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b087      	sub	sp, #28
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a1b      	ldr	r3, [r3, #32]
 8009ece:	f023 0210 	bic.w	r2, r3, #16
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	4b34      	ldr	r3, [pc, #208]	; (8009fbc <TIM_OC2_SetConfig+0xfc>)
 8009eec:	4013      	ands	r3, r2
 8009eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	021b      	lsls	r3, r3, #8
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	4313      	orrs	r3, r2
 8009f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	f023 0320 	bic.w	r3, r3, #32
 8009f0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	011b      	lsls	r3, r3, #4
 8009f12:	697a      	ldr	r2, [r7, #20]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a29      	ldr	r2, [pc, #164]	; (8009fc0 <TIM_OC2_SetConfig+0x100>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d003      	beq.n	8009f28 <TIM_OC2_SetConfig+0x68>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a28      	ldr	r2, [pc, #160]	; (8009fc4 <TIM_OC2_SetConfig+0x104>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d10d      	bne.n	8009f44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	011b      	lsls	r3, r3, #4
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a1e      	ldr	r2, [pc, #120]	; (8009fc0 <TIM_OC2_SetConfig+0x100>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d00f      	beq.n	8009f6c <TIM_OC2_SetConfig+0xac>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4a1d      	ldr	r2, [pc, #116]	; (8009fc4 <TIM_OC2_SetConfig+0x104>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d00b      	beq.n	8009f6c <TIM_OC2_SetConfig+0xac>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a1c      	ldr	r2, [pc, #112]	; (8009fc8 <TIM_OC2_SetConfig+0x108>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d007      	beq.n	8009f6c <TIM_OC2_SetConfig+0xac>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a1b      	ldr	r2, [pc, #108]	; (8009fcc <TIM_OC2_SetConfig+0x10c>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d003      	beq.n	8009f6c <TIM_OC2_SetConfig+0xac>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4a1a      	ldr	r2, [pc, #104]	; (8009fd0 <TIM_OC2_SetConfig+0x110>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d113      	bne.n	8009f94 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	695b      	ldr	r3, [r3, #20]
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	693a      	ldr	r2, [r7, #16]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	699b      	ldr	r3, [r3, #24]
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	693a      	ldr	r2, [r7, #16]
 8009f90:	4313      	orrs	r3, r2
 8009f92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	693a      	ldr	r2, [r7, #16]
 8009f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	685a      	ldr	r2, [r3, #4]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	621a      	str	r2, [r3, #32]
}
 8009fae:	bf00      	nop
 8009fb0:	371c      	adds	r7, #28
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop
 8009fbc:	feff8fff 	.word	0xfeff8fff
 8009fc0:	40010000 	.word	0x40010000
 8009fc4:	40010400 	.word	0x40010400
 8009fc8:	40014000 	.word	0x40014000
 8009fcc:	40014400 	.word	0x40014400
 8009fd0:	40014800 	.word	0x40014800

08009fd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b087      	sub	sp, #28
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a1b      	ldr	r3, [r3, #32]
 8009fe2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a1b      	ldr	r3, [r3, #32]
 8009fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	69db      	ldr	r3, [r3, #28]
 8009ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	4b33      	ldr	r3, [pc, #204]	; (800a0cc <TIM_OC3_SetConfig+0xf8>)
 800a000:	4013      	ands	r3, r2
 800a002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f023 0303 	bic.w	r3, r3, #3
 800a00a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	4313      	orrs	r3, r2
 800a014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a01c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	021b      	lsls	r3, r3, #8
 800a024:	697a      	ldr	r2, [r7, #20]
 800a026:	4313      	orrs	r3, r2
 800a028:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4a28      	ldr	r2, [pc, #160]	; (800a0d0 <TIM_OC3_SetConfig+0xfc>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d003      	beq.n	800a03a <TIM_OC3_SetConfig+0x66>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a27      	ldr	r2, [pc, #156]	; (800a0d4 <TIM_OC3_SetConfig+0x100>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d10d      	bne.n	800a056 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	021b      	lsls	r3, r3, #8
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a1d      	ldr	r2, [pc, #116]	; (800a0d0 <TIM_OC3_SetConfig+0xfc>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d00f      	beq.n	800a07e <TIM_OC3_SetConfig+0xaa>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a1c      	ldr	r2, [pc, #112]	; (800a0d4 <TIM_OC3_SetConfig+0x100>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d00b      	beq.n	800a07e <TIM_OC3_SetConfig+0xaa>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a1b      	ldr	r2, [pc, #108]	; (800a0d8 <TIM_OC3_SetConfig+0x104>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d007      	beq.n	800a07e <TIM_OC3_SetConfig+0xaa>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a1a      	ldr	r2, [pc, #104]	; (800a0dc <TIM_OC3_SetConfig+0x108>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d003      	beq.n	800a07e <TIM_OC3_SetConfig+0xaa>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a19      	ldr	r2, [pc, #100]	; (800a0e0 <TIM_OC3_SetConfig+0x10c>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d113      	bne.n	800a0a6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a08c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	695b      	ldr	r3, [r3, #20]
 800a092:	011b      	lsls	r3, r3, #4
 800a094:	693a      	ldr	r2, [r7, #16]
 800a096:	4313      	orrs	r3, r2
 800a098:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	699b      	ldr	r3, [r3, #24]
 800a09e:	011b      	lsls	r3, r3, #4
 800a0a0:	693a      	ldr	r2, [r7, #16]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	685a      	ldr	r2, [r3, #4]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	697a      	ldr	r2, [r7, #20]
 800a0be:	621a      	str	r2, [r3, #32]
}
 800a0c0:	bf00      	nop
 800a0c2:	371c      	adds	r7, #28
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	fffeff8f 	.word	0xfffeff8f
 800a0d0:	40010000 	.word	0x40010000
 800a0d4:	40010400 	.word	0x40010400
 800a0d8:	40014000 	.word	0x40014000
 800a0dc:	40014400 	.word	0x40014400
 800a0e0:	40014800 	.word	0x40014800

0800a0e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b087      	sub	sp, #28
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a1b      	ldr	r3, [r3, #32]
 800a0f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a1b      	ldr	r3, [r3, #32]
 800a0fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	69db      	ldr	r3, [r3, #28]
 800a10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	4b24      	ldr	r3, [pc, #144]	; (800a1a0 <TIM_OC4_SetConfig+0xbc>)
 800a110:	4013      	ands	r3, r2
 800a112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a11a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	021b      	lsls	r3, r3, #8
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	4313      	orrs	r3, r2
 800a126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a12e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	031b      	lsls	r3, r3, #12
 800a136:	693a      	ldr	r2, [r7, #16]
 800a138:	4313      	orrs	r3, r2
 800a13a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a19      	ldr	r2, [pc, #100]	; (800a1a4 <TIM_OC4_SetConfig+0xc0>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d00f      	beq.n	800a164 <TIM_OC4_SetConfig+0x80>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4a18      	ldr	r2, [pc, #96]	; (800a1a8 <TIM_OC4_SetConfig+0xc4>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d00b      	beq.n	800a164 <TIM_OC4_SetConfig+0x80>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a17      	ldr	r2, [pc, #92]	; (800a1ac <TIM_OC4_SetConfig+0xc8>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d007      	beq.n	800a164 <TIM_OC4_SetConfig+0x80>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a16      	ldr	r2, [pc, #88]	; (800a1b0 <TIM_OC4_SetConfig+0xcc>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d003      	beq.n	800a164 <TIM_OC4_SetConfig+0x80>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a15      	ldr	r2, [pc, #84]	; (800a1b4 <TIM_OC4_SetConfig+0xd0>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d109      	bne.n	800a178 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a16a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	695b      	ldr	r3, [r3, #20]
 800a170:	019b      	lsls	r3, r3, #6
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	4313      	orrs	r3, r2
 800a176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	697a      	ldr	r2, [r7, #20]
 800a17c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	685a      	ldr	r2, [r3, #4]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	693a      	ldr	r2, [r7, #16]
 800a190:	621a      	str	r2, [r3, #32]
}
 800a192:	bf00      	nop
 800a194:	371c      	adds	r7, #28
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	feff8fff 	.word	0xfeff8fff
 800a1a4:	40010000 	.word	0x40010000
 800a1a8:	40010400 	.word	0x40010400
 800a1ac:	40014000 	.word	0x40014000
 800a1b0:	40014400 	.word	0x40014400
 800a1b4:	40014800 	.word	0x40014800

0800a1b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b087      	sub	sp, #28
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a1b      	ldr	r3, [r3, #32]
 800a1c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a1b      	ldr	r3, [r3, #32]
 800a1d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	4b21      	ldr	r3, [pc, #132]	; (800a268 <TIM_OC5_SetConfig+0xb0>)
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a1f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	041b      	lsls	r3, r3, #16
 800a200:	693a      	ldr	r2, [r7, #16]
 800a202:	4313      	orrs	r3, r2
 800a204:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4a18      	ldr	r2, [pc, #96]	; (800a26c <TIM_OC5_SetConfig+0xb4>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d00f      	beq.n	800a22e <TIM_OC5_SetConfig+0x76>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4a17      	ldr	r2, [pc, #92]	; (800a270 <TIM_OC5_SetConfig+0xb8>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d00b      	beq.n	800a22e <TIM_OC5_SetConfig+0x76>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4a16      	ldr	r2, [pc, #88]	; (800a274 <TIM_OC5_SetConfig+0xbc>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d007      	beq.n	800a22e <TIM_OC5_SetConfig+0x76>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a15      	ldr	r2, [pc, #84]	; (800a278 <TIM_OC5_SetConfig+0xc0>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d003      	beq.n	800a22e <TIM_OC5_SetConfig+0x76>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a14      	ldr	r2, [pc, #80]	; (800a27c <TIM_OC5_SetConfig+0xc4>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d109      	bne.n	800a242 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a234:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	695b      	ldr	r3, [r3, #20]
 800a23a:	021b      	lsls	r3, r3, #8
 800a23c:	697a      	ldr	r2, [r7, #20]
 800a23e:	4313      	orrs	r3, r2
 800a240:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	697a      	ldr	r2, [r7, #20]
 800a246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	685a      	ldr	r2, [r3, #4]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	693a      	ldr	r2, [r7, #16]
 800a25a:	621a      	str	r2, [r3, #32]
}
 800a25c:	bf00      	nop
 800a25e:	371c      	adds	r7, #28
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr
 800a268:	fffeff8f 	.word	0xfffeff8f
 800a26c:	40010000 	.word	0x40010000
 800a270:	40010400 	.word	0x40010400
 800a274:	40014000 	.word	0x40014000
 800a278:	40014400 	.word	0x40014400
 800a27c:	40014800 	.word	0x40014800

0800a280 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a280:	b480      	push	{r7}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a1b      	ldr	r3, [r3, #32]
 800a28e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a1b      	ldr	r3, [r3, #32]
 800a29a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	4b22      	ldr	r3, [pc, #136]	; (800a334 <TIM_OC6_SetConfig+0xb4>)
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	021b      	lsls	r3, r3, #8
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	051b      	lsls	r3, r3, #20
 800a2ca:	693a      	ldr	r2, [r7, #16]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a19      	ldr	r2, [pc, #100]	; (800a338 <TIM_OC6_SetConfig+0xb8>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d00f      	beq.n	800a2f8 <TIM_OC6_SetConfig+0x78>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a18      	ldr	r2, [pc, #96]	; (800a33c <TIM_OC6_SetConfig+0xbc>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d00b      	beq.n	800a2f8 <TIM_OC6_SetConfig+0x78>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a17      	ldr	r2, [pc, #92]	; (800a340 <TIM_OC6_SetConfig+0xc0>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d007      	beq.n	800a2f8 <TIM_OC6_SetConfig+0x78>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a16      	ldr	r2, [pc, #88]	; (800a344 <TIM_OC6_SetConfig+0xc4>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d003      	beq.n	800a2f8 <TIM_OC6_SetConfig+0x78>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	4a15      	ldr	r2, [pc, #84]	; (800a348 <TIM_OC6_SetConfig+0xc8>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d109      	bne.n	800a30c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	695b      	ldr	r3, [r3, #20]
 800a304:	029b      	lsls	r3, r3, #10
 800a306:	697a      	ldr	r2, [r7, #20]
 800a308:	4313      	orrs	r3, r2
 800a30a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	68fa      	ldr	r2, [r7, #12]
 800a316:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	685a      	ldr	r2, [r3, #4]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	693a      	ldr	r2, [r7, #16]
 800a324:	621a      	str	r2, [r3, #32]
}
 800a326:	bf00      	nop
 800a328:	371c      	adds	r7, #28
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop
 800a334:	feff8fff 	.word	0xfeff8fff
 800a338:	40010000 	.word	0x40010000
 800a33c:	40010400 	.word	0x40010400
 800a340:	40014000 	.word	0x40014000
 800a344:	40014400 	.word	0x40014400
 800a348:	40014800 	.word	0x40014800

0800a34c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b086      	sub	sp, #24
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a356:	2300      	movs	r3, #0
 800a358:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a362:	693a      	ldr	r2, [r7, #16]
 800a364:	4b65      	ldr	r3, [pc, #404]	; (800a4fc <TIM_SlaveTimer_SetConfig+0x1b0>)
 800a366:	4013      	ands	r3, r2
 800a368:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	693a      	ldr	r2, [r7, #16]
 800a370:	4313      	orrs	r3, r2
 800a372:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	4b62      	ldr	r3, [pc, #392]	; (800a500 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800a378:	4013      	ands	r3, r2
 800a37a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	693a      	ldr	r2, [r7, #16]
 800a382:	4313      	orrs	r3, r2
 800a384:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	693a      	ldr	r2, [r7, #16]
 800a38c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	4a5c      	ldr	r2, [pc, #368]	; (800a504 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800a394:	4293      	cmp	r3, r2
 800a396:	f000 80ab 	beq.w	800a4f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a39a:	4a5a      	ldr	r2, [pc, #360]	; (800a504 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	f200 80a4 	bhi.w	800a4ea <TIM_SlaveTimer_SetConfig+0x19e>
 800a3a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3a6:	f000 80a3 	beq.w	800a4f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a3aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3ae:	f200 809c 	bhi.w	800a4ea <TIM_SlaveTimer_SetConfig+0x19e>
 800a3b2:	4a55      	ldr	r2, [pc, #340]	; (800a508 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	f000 809b 	beq.w	800a4f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a3ba:	4a53      	ldr	r2, [pc, #332]	; (800a508 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	f200 8094 	bhi.w	800a4ea <TIM_SlaveTimer_SetConfig+0x19e>
 800a3c2:	4a52      	ldr	r2, [pc, #328]	; (800a50c <TIM_SlaveTimer_SetConfig+0x1c0>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	f000 8093 	beq.w	800a4f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a3ca:	4a50      	ldr	r2, [pc, #320]	; (800a50c <TIM_SlaveTimer_SetConfig+0x1c0>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	f200 808c 	bhi.w	800a4ea <TIM_SlaveTimer_SetConfig+0x19e>
 800a3d2:	4a4f      	ldr	r2, [pc, #316]	; (800a510 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	f000 808b 	beq.w	800a4f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a3da:	4a4d      	ldr	r2, [pc, #308]	; (800a510 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	f200 8084 	bhi.w	800a4ea <TIM_SlaveTimer_SetConfig+0x19e>
 800a3e2:	4a4c      	ldr	r2, [pc, #304]	; (800a514 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	f000 8083 	beq.w	800a4f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a3ea:	4a4a      	ldr	r2, [pc, #296]	; (800a514 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d87c      	bhi.n	800a4ea <TIM_SlaveTimer_SetConfig+0x19e>
 800a3f0:	4a49      	ldr	r2, [pc, #292]	; (800a518 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d07c      	beq.n	800a4f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a3f6:	4a48      	ldr	r2, [pc, #288]	; (800a518 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d876      	bhi.n	800a4ea <TIM_SlaveTimer_SetConfig+0x19e>
 800a3fc:	4a47      	ldr	r2, [pc, #284]	; (800a51c <TIM_SlaveTimer_SetConfig+0x1d0>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d076      	beq.n	800a4f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a402:	4a46      	ldr	r2, [pc, #280]	; (800a51c <TIM_SlaveTimer_SetConfig+0x1d0>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d870      	bhi.n	800a4ea <TIM_SlaveTimer_SetConfig+0x19e>
 800a408:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a40c:	d070      	beq.n	800a4f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a40e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a412:	d86a      	bhi.n	800a4ea <TIM_SlaveTimer_SetConfig+0x19e>
 800a414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a418:	d06a      	beq.n	800a4f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a41a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a41e:	d864      	bhi.n	800a4ea <TIM_SlaveTimer_SetConfig+0x19e>
 800a420:	2b70      	cmp	r3, #112	; 0x70
 800a422:	d01a      	beq.n	800a45a <TIM_SlaveTimer_SetConfig+0x10e>
 800a424:	2b70      	cmp	r3, #112	; 0x70
 800a426:	d860      	bhi.n	800a4ea <TIM_SlaveTimer_SetConfig+0x19e>
 800a428:	2b60      	cmp	r3, #96	; 0x60
 800a42a:	d054      	beq.n	800a4d6 <TIM_SlaveTimer_SetConfig+0x18a>
 800a42c:	2b60      	cmp	r3, #96	; 0x60
 800a42e:	d85c      	bhi.n	800a4ea <TIM_SlaveTimer_SetConfig+0x19e>
 800a430:	2b50      	cmp	r3, #80	; 0x50
 800a432:	d046      	beq.n	800a4c2 <TIM_SlaveTimer_SetConfig+0x176>
 800a434:	2b50      	cmp	r3, #80	; 0x50
 800a436:	d858      	bhi.n	800a4ea <TIM_SlaveTimer_SetConfig+0x19e>
 800a438:	2b40      	cmp	r3, #64	; 0x40
 800a43a:	d019      	beq.n	800a470 <TIM_SlaveTimer_SetConfig+0x124>
 800a43c:	2b40      	cmp	r3, #64	; 0x40
 800a43e:	d854      	bhi.n	800a4ea <TIM_SlaveTimer_SetConfig+0x19e>
 800a440:	2b30      	cmp	r3, #48	; 0x30
 800a442:	d055      	beq.n	800a4f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a444:	2b30      	cmp	r3, #48	; 0x30
 800a446:	d850      	bhi.n	800a4ea <TIM_SlaveTimer_SetConfig+0x19e>
 800a448:	2b20      	cmp	r3, #32
 800a44a:	d051      	beq.n	800a4f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a44c:	2b20      	cmp	r3, #32
 800a44e:	d84c      	bhi.n	800a4ea <TIM_SlaveTimer_SetConfig+0x19e>
 800a450:	2b00      	cmp	r3, #0
 800a452:	d04d      	beq.n	800a4f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a454:	2b10      	cmp	r3, #16
 800a456:	d04b      	beq.n	800a4f0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800a458:	e047      	b.n	800a4ea <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6818      	ldr	r0, [r3, #0]
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	68d9      	ldr	r1, [r3, #12]
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	689a      	ldr	r2, [r3, #8]
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	f000 f8d7 	bl	800a61c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800a46e:	e040      	b.n	800a4f2 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2b05      	cmp	r3, #5
 800a476:	d101      	bne.n	800a47c <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	e03b      	b.n	800a4f4 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	6a1b      	ldr	r3, [r3, #32]
 800a482:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	6a1a      	ldr	r2, [r3, #32]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f022 0201 	bic.w	r2, r2, #1
 800a492:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4a2:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	011b      	lsls	r3, r3, #4
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	621a      	str	r2, [r3, #32]
      break;
 800a4c0:	e017      	b.n	800a4f2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6818      	ldr	r0, [r3, #0]
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	6899      	ldr	r1, [r3, #8]
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	f000 f826 	bl	800a520 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a4d4:	e00d      	b.n	800a4f2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6818      	ldr	r0, [r3, #0]
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	6899      	ldr	r1, [r3, #8]
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	f000 f84b 	bl	800a57e <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a4e8:	e003      	b.n	800a4f2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	75fb      	strb	r3, [r7, #23]
      break;
 800a4ee:	e000      	b.n	800a4f2 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800a4f0:	bf00      	nop
  }

  return status;
 800a4f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3718      	adds	r7, #24
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	ffcfff8f 	.word	0xffcfff8f
 800a500:	fffefff8 	.word	0xfffefff8
 800a504:	00200010 	.word	0x00200010
 800a508:	00100070 	.word	0x00100070
 800a50c:	00100060 	.word	0x00100060
 800a510:	00100050 	.word	0x00100050
 800a514:	00100040 	.word	0x00100040
 800a518:	00100030 	.word	0x00100030
 800a51c:	00100020 	.word	0x00100020

0800a520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a520:	b480      	push	{r7}
 800a522:	b087      	sub	sp, #28
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6a1b      	ldr	r3, [r3, #32]
 800a530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6a1b      	ldr	r3, [r3, #32]
 800a536:	f023 0201 	bic.w	r2, r3, #1
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	699b      	ldr	r3, [r3, #24]
 800a542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a54a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	011b      	lsls	r3, r3, #4
 800a550:	693a      	ldr	r2, [r7, #16]
 800a552:	4313      	orrs	r3, r2
 800a554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	f023 030a 	bic.w	r3, r3, #10
 800a55c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a55e:	697a      	ldr	r2, [r7, #20]
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	4313      	orrs	r3, r2
 800a564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	693a      	ldr	r2, [r7, #16]
 800a56a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	697a      	ldr	r2, [r7, #20]
 800a570:	621a      	str	r2, [r3, #32]
}
 800a572:	bf00      	nop
 800a574:	371c      	adds	r7, #28
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a57e:	b480      	push	{r7}
 800a580:	b087      	sub	sp, #28
 800a582:	af00      	add	r7, sp, #0
 800a584:	60f8      	str	r0, [r7, #12]
 800a586:	60b9      	str	r1, [r7, #8]
 800a588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6a1b      	ldr	r3, [r3, #32]
 800a58e:	f023 0210 	bic.w	r2, r3, #16
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	699b      	ldr	r3, [r3, #24]
 800a59a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6a1b      	ldr	r3, [r3, #32]
 800a5a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	031b      	lsls	r3, r3, #12
 800a5ae:	697a      	ldr	r2, [r7, #20]
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a5ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	011b      	lsls	r3, r3, #4
 800a5c0:	693a      	ldr	r2, [r7, #16]
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	697a      	ldr	r2, [r7, #20]
 800a5ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	693a      	ldr	r2, [r7, #16]
 800a5d0:	621a      	str	r2, [r3, #32]
}
 800a5d2:	bf00      	nop
 800a5d4:	371c      	adds	r7, #28
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
	...

0800a5e0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	4b09      	ldr	r3, [pc, #36]	; (800a618 <TIM_ITRx_SetConfig+0x38>)
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5f8:	683a      	ldr	r2, [r7, #0]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	f043 0307 	orr.w	r3, r3, #7
 800a602:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	609a      	str	r2, [r3, #8]
}
 800a60a:	bf00      	nop
 800a60c:	3714      	adds	r7, #20
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop
 800a618:	ffcfff8f 	.word	0xffcfff8f

0800a61c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b087      	sub	sp, #28
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
 800a628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	021a      	lsls	r2, r3, #8
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	431a      	orrs	r2, r3
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	4313      	orrs	r3, r2
 800a644:	697a      	ldr	r2, [r7, #20]
 800a646:	4313      	orrs	r3, r2
 800a648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	697a      	ldr	r2, [r7, #20]
 800a64e:	609a      	str	r2, [r3, #8]
}
 800a650:	bf00      	nop
 800a652:	371c      	adds	r7, #28
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b087      	sub	sp, #28
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	f003 031f 	and.w	r3, r3, #31
 800a66e:	2201      	movs	r2, #1
 800a670:	fa02 f303 	lsl.w	r3, r2, r3
 800a674:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6a1a      	ldr	r2, [r3, #32]
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	43db      	mvns	r3, r3
 800a67e:	401a      	ands	r2, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6a1a      	ldr	r2, [r3, #32]
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	f003 031f 	and.w	r3, r3, #31
 800a68e:	6879      	ldr	r1, [r7, #4]
 800a690:	fa01 f303 	lsl.w	r3, r1, r3
 800a694:	431a      	orrs	r2, r3
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	621a      	str	r2, [r3, #32]
}
 800a69a:	bf00      	nop
 800a69c:	371c      	adds	r7, #28
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr
	...

0800a6a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d101      	bne.n	800a6c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6bc:	2302      	movs	r3, #2
 800a6be:	e06d      	b.n	800a79c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2202      	movs	r2, #2
 800a6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a30      	ldr	r2, [pc, #192]	; (800a7a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d004      	beq.n	800a6f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a2f      	ldr	r2, [pc, #188]	; (800a7ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d108      	bne.n	800a706 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a6fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	4313      	orrs	r3, r2
 800a704:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a70c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	4313      	orrs	r3, r2
 800a716:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a20      	ldr	r2, [pc, #128]	; (800a7a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d022      	beq.n	800a770 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a732:	d01d      	beq.n	800a770 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a1d      	ldr	r2, [pc, #116]	; (800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d018      	beq.n	800a770 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a1c      	ldr	r2, [pc, #112]	; (800a7b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d013      	beq.n	800a770 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a1a      	ldr	r2, [pc, #104]	; (800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d00e      	beq.n	800a770 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a15      	ldr	r2, [pc, #84]	; (800a7ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d009      	beq.n	800a770 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a16      	ldr	r2, [pc, #88]	; (800a7bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d004      	beq.n	800a770 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a15      	ldr	r2, [pc, #84]	; (800a7c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d10c      	bne.n	800a78a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a776:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	68ba      	ldr	r2, [r7, #8]
 800a77e:	4313      	orrs	r3, r2
 800a780:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68ba      	ldr	r2, [r7, #8]
 800a788:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2201      	movs	r2, #1
 800a78e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3714      	adds	r7, #20
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr
 800a7a8:	40010000 	.word	0x40010000
 800a7ac:	40010400 	.word	0x40010400
 800a7b0:	40000400 	.word	0x40000400
 800a7b4:	40000800 	.word	0x40000800
 800a7b8:	40000c00 	.word	0x40000c00
 800a7bc:	40001800 	.word	0x40001800
 800a7c0:	40014000 	.word	0x40014000

0800a7c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d101      	bne.n	800a812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	e042      	b.n	800a898 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d106      	bne.n	800a82a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f7f6 fe39 	bl	800149c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2224      	movs	r2, #36	; 0x24
 800a82e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f022 0201 	bic.w	r2, r2, #1
 800a840:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fc98 	bl	800b178 <UART_SetConfig>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d101      	bne.n	800a852 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e022      	b.n	800a898 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a856:	2b00      	cmp	r3, #0
 800a858:	d002      	beq.n	800a860 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f001 faf8 	bl	800be50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	685a      	ldr	r2, [r3, #4]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a86e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	689a      	ldr	r2, [r3, #8]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a87e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f042 0201 	orr.w	r2, r2, #1
 800a88e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f001 fb7f 	bl	800bf94 <UART_CheckIdleState>
 800a896:	4603      	mov	r3, r0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b08a      	sub	sp, #40	; 0x28
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8b4:	2b20      	cmp	r3, #32
 800a8b6:	d167      	bne.n	800a988 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d002      	beq.n	800a8c4 <HAL_UART_Transmit_DMA+0x24>
 800a8be:	88fb      	ldrh	r3, [r7, #6]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d101      	bne.n	800a8c8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e060      	b.n	800a98a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	68ba      	ldr	r2, [r7, #8]
 800a8cc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	88fa      	ldrh	r2, [r7, #6]
 800a8d2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	88fa      	ldrh	r2, [r7, #6]
 800a8da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2221      	movs	r2, #33	; 0x21
 800a8ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d028      	beq.n	800a948 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8fa:	4a26      	ldr	r2, [pc, #152]	; (800a994 <HAL_UART_Transmit_DMA+0xf4>)
 800a8fc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a902:	4a25      	ldr	r2, [pc, #148]	; (800a998 <HAL_UART_Transmit_DMA+0xf8>)
 800a904:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a90a:	4a24      	ldr	r2, [pc, #144]	; (800a99c <HAL_UART_Transmit_DMA+0xfc>)
 800a90c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a912:	2200      	movs	r2, #0
 800a914:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a91e:	4619      	mov	r1, r3
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	3328      	adds	r3, #40	; 0x28
 800a926:	461a      	mov	r2, r3
 800a928:	88fb      	ldrh	r3, [r7, #6]
 800a92a:	f7f8 fb4f 	bl	8002fcc <HAL_DMA_Start_IT>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d009      	beq.n	800a948 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2210      	movs	r2, #16
 800a938:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2220      	movs	r2, #32
 800a940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	e020      	b.n	800a98a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2240      	movs	r2, #64	; 0x40
 800a94e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	3308      	adds	r3, #8
 800a956:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	e853 3f00 	ldrex	r3, [r3]
 800a95e:	613b      	str	r3, [r7, #16]
   return(result);
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a966:	627b      	str	r3, [r7, #36]	; 0x24
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	3308      	adds	r3, #8
 800a96e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a970:	623a      	str	r2, [r7, #32]
 800a972:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a974:	69f9      	ldr	r1, [r7, #28]
 800a976:	6a3a      	ldr	r2, [r7, #32]
 800a978:	e841 2300 	strex	r3, r2, [r1]
 800a97c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d1e5      	bne.n	800a950 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a984:	2300      	movs	r3, #0
 800a986:	e000      	b.n	800a98a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a988:	2302      	movs	r3, #2
  }
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3728      	adds	r7, #40	; 0x28
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	0800c455 	.word	0x0800c455
 800a998:	0800c4eb 	.word	0x0800c4eb
 800a99c:	0800c66d 	.word	0x0800c66d

0800a9a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b0ba      	sub	sp, #232	; 0xe8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	69db      	ldr	r3, [r3, #28]
 800a9ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a9c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a9ca:	f640 030f 	movw	r3, #2063	; 0x80f
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a9d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d11b      	bne.n	800aa14 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a9dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9e0:	f003 0320 	and.w	r3, r3, #32
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d015      	beq.n	800aa14 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a9e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9ec:	f003 0320 	and.w	r3, r3, #32
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d105      	bne.n	800aa00 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a9f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d009      	beq.n	800aa14 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f000 8377 	beq.w	800b0f8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	4798      	blx	r3
      }
      return;
 800aa12:	e371      	b.n	800b0f8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aa14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f000 8123 	beq.w	800ac64 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aa1e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aa22:	4b8d      	ldr	r3, [pc, #564]	; (800ac58 <HAL_UART_IRQHandler+0x2b8>)
 800aa24:	4013      	ands	r3, r2
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d106      	bne.n	800aa38 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aa2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800aa2e:	4b8b      	ldr	r3, [pc, #556]	; (800ac5c <HAL_UART_IRQHandler+0x2bc>)
 800aa30:	4013      	ands	r3, r2
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f000 8116 	beq.w	800ac64 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa3c:	f003 0301 	and.w	r3, r3, #1
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d011      	beq.n	800aa68 <HAL_UART_IRQHandler+0xc8>
 800aa44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00b      	beq.n	800aa68 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2201      	movs	r2, #1
 800aa56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa5e:	f043 0201 	orr.w	r2, r3, #1
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa6c:	f003 0302 	and.w	r3, r3, #2
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d011      	beq.n	800aa98 <HAL_UART_IRQHandler+0xf8>
 800aa74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa78:	f003 0301 	and.w	r3, r3, #1
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00b      	beq.n	800aa98 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	2202      	movs	r2, #2
 800aa86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa8e:	f043 0204 	orr.w	r2, r3, #4
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa9c:	f003 0304 	and.w	r3, r3, #4
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d011      	beq.n	800aac8 <HAL_UART_IRQHandler+0x128>
 800aaa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aaa8:	f003 0301 	and.w	r3, r3, #1
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00b      	beq.n	800aac8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2204      	movs	r2, #4
 800aab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aabe:	f043 0202 	orr.w	r2, r3, #2
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aacc:	f003 0308 	and.w	r3, r3, #8
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d017      	beq.n	800ab04 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aad8:	f003 0320 	and.w	r3, r3, #32
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d105      	bne.n	800aaec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800aae0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aae4:	4b5c      	ldr	r3, [pc, #368]	; (800ac58 <HAL_UART_IRQHandler+0x2b8>)
 800aae6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00b      	beq.n	800ab04 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2208      	movs	r2, #8
 800aaf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aafa:	f043 0208 	orr.w	r2, r3, #8
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d012      	beq.n	800ab36 <HAL_UART_IRQHandler+0x196>
 800ab10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00c      	beq.n	800ab36 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab2c:	f043 0220 	orr.w	r2, r3, #32
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 82dd 	beq.w	800b0fc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ab42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab46:	f003 0320 	and.w	r3, r3, #32
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d013      	beq.n	800ab76 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ab4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab52:	f003 0320 	and.w	r3, r3, #32
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d105      	bne.n	800ab66 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ab5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d007      	beq.n	800ab76 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d003      	beq.n	800ab76 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab8a:	2b40      	cmp	r3, #64	; 0x40
 800ab8c:	d005      	beq.n	800ab9a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ab8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d054      	beq.n	800ac44 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f001 fbf4 	bl	800c388 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abaa:	2b40      	cmp	r3, #64	; 0x40
 800abac:	d146      	bne.n	800ac3c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	3308      	adds	r3, #8
 800abb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800abbc:	e853 3f00 	ldrex	r3, [r3]
 800abc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800abc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	3308      	adds	r3, #8
 800abd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800abda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800abde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800abe6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800abea:	e841 2300 	strex	r3, r2, [r1]
 800abee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800abf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d1d9      	bne.n	800abae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d017      	beq.n	800ac34 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac0a:	4a15      	ldr	r2, [pc, #84]	; (800ac60 <HAL_UART_IRQHandler+0x2c0>)
 800ac0c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7f8 ff61 	bl	8003adc <HAL_DMA_Abort_IT>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d019      	beq.n	800ac54 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ac2e:	4610      	mov	r0, r2
 800ac30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac32:	e00f      	b.n	800ac54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 fa95 	bl	800b164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac3a:	e00b      	b.n	800ac54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 fa91 	bl	800b164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac42:	e007      	b.n	800ac54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 fa8d 	bl	800b164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800ac52:	e253      	b.n	800b0fc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac54:	bf00      	nop
    return;
 800ac56:	e251      	b.n	800b0fc <HAL_UART_IRQHandler+0x75c>
 800ac58:	10000001 	.word	0x10000001
 800ac5c:	04000120 	.word	0x04000120
 800ac60:	0800c6ed 	.word	0x0800c6ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	f040 81e7 	bne.w	800b03c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ac6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac72:	f003 0310 	and.w	r3, r3, #16
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	f000 81e0 	beq.w	800b03c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ac7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac80:	f003 0310 	and.w	r3, r3, #16
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f000 81d9 	beq.w	800b03c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2210      	movs	r2, #16
 800ac90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac9c:	2b40      	cmp	r3, #64	; 0x40
 800ac9e:	f040 8151 	bne.w	800af44 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a96      	ldr	r2, [pc, #600]	; (800af04 <HAL_UART_IRQHandler+0x564>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d068      	beq.n	800ad82 <HAL_UART_IRQHandler+0x3e2>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a93      	ldr	r2, [pc, #588]	; (800af08 <HAL_UART_IRQHandler+0x568>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d061      	beq.n	800ad82 <HAL_UART_IRQHandler+0x3e2>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a91      	ldr	r2, [pc, #580]	; (800af0c <HAL_UART_IRQHandler+0x56c>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d05a      	beq.n	800ad82 <HAL_UART_IRQHandler+0x3e2>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a8e      	ldr	r2, [pc, #568]	; (800af10 <HAL_UART_IRQHandler+0x570>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d053      	beq.n	800ad82 <HAL_UART_IRQHandler+0x3e2>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a8c      	ldr	r2, [pc, #560]	; (800af14 <HAL_UART_IRQHandler+0x574>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d04c      	beq.n	800ad82 <HAL_UART_IRQHandler+0x3e2>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a89      	ldr	r2, [pc, #548]	; (800af18 <HAL_UART_IRQHandler+0x578>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d045      	beq.n	800ad82 <HAL_UART_IRQHandler+0x3e2>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a87      	ldr	r2, [pc, #540]	; (800af1c <HAL_UART_IRQHandler+0x57c>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d03e      	beq.n	800ad82 <HAL_UART_IRQHandler+0x3e2>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a84      	ldr	r2, [pc, #528]	; (800af20 <HAL_UART_IRQHandler+0x580>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d037      	beq.n	800ad82 <HAL_UART_IRQHandler+0x3e2>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a82      	ldr	r2, [pc, #520]	; (800af24 <HAL_UART_IRQHandler+0x584>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d030      	beq.n	800ad82 <HAL_UART_IRQHandler+0x3e2>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a7f      	ldr	r2, [pc, #508]	; (800af28 <HAL_UART_IRQHandler+0x588>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d029      	beq.n	800ad82 <HAL_UART_IRQHandler+0x3e2>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a7d      	ldr	r2, [pc, #500]	; (800af2c <HAL_UART_IRQHandler+0x58c>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d022      	beq.n	800ad82 <HAL_UART_IRQHandler+0x3e2>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a7a      	ldr	r2, [pc, #488]	; (800af30 <HAL_UART_IRQHandler+0x590>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d01b      	beq.n	800ad82 <HAL_UART_IRQHandler+0x3e2>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a78      	ldr	r2, [pc, #480]	; (800af34 <HAL_UART_IRQHandler+0x594>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d014      	beq.n	800ad82 <HAL_UART_IRQHandler+0x3e2>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a75      	ldr	r2, [pc, #468]	; (800af38 <HAL_UART_IRQHandler+0x598>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d00d      	beq.n	800ad82 <HAL_UART_IRQHandler+0x3e2>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a73      	ldr	r2, [pc, #460]	; (800af3c <HAL_UART_IRQHandler+0x59c>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d006      	beq.n	800ad82 <HAL_UART_IRQHandler+0x3e2>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a70      	ldr	r2, [pc, #448]	; (800af40 <HAL_UART_IRQHandler+0x5a0>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d106      	bne.n	800ad90 <HAL_UART_IRQHandler+0x3f0>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	e005      	b.n	800ad9c <HAL_UART_IRQHandler+0x3fc>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ada0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f000 81ab 	beq.w	800b100 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800adb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800adb4:	429a      	cmp	r2, r3
 800adb6:	f080 81a3 	bcs.w	800b100 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800adc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adca:	69db      	ldr	r3, [r3, #28]
 800adcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800add0:	f000 8087 	beq.w	800aee2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800addc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ade0:	e853 3f00 	ldrex	r3, [r3]
 800ade4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ade8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800adec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800adf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	461a      	mov	r2, r3
 800adfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800adfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ae02:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ae0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ae0e:	e841 2300 	strex	r3, r2, [r1]
 800ae12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ae16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1da      	bne.n	800add4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3308      	adds	r3, #8
 800ae24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae28:	e853 3f00 	ldrex	r3, [r3]
 800ae2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ae2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae30:	f023 0301 	bic.w	r3, r3, #1
 800ae34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	3308      	adds	r3, #8
 800ae3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ae42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ae46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ae4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ae4e:	e841 2300 	strex	r3, r2, [r1]
 800ae52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ae54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1e1      	bne.n	800ae1e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	3308      	adds	r3, #8
 800ae60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae64:	e853 3f00 	ldrex	r3, [r3]
 800ae68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ae6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	3308      	adds	r3, #8
 800ae7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ae7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ae80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ae84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ae86:	e841 2300 	strex	r3, r2, [r1]
 800ae8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ae8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d1e3      	bne.n	800ae5a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2220      	movs	r2, #32
 800ae96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aea8:	e853 3f00 	ldrex	r3, [r3]
 800aeac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aeae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeb0:	f023 0310 	bic.w	r3, r3, #16
 800aeb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	461a      	mov	r2, r3
 800aebe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aec2:	65bb      	str	r3, [r7, #88]	; 0x58
 800aec4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aec8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aeca:	e841 2300 	strex	r3, r2, [r1]
 800aece:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d1e4      	bne.n	800aea0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aedc:	4618      	mov	r0, r3
 800aede:	f7f8 fadf 	bl	80034a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2202      	movs	r2, #2
 800aee6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	1ad3      	subs	r3, r2, r3
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	4619      	mov	r1, r3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7f6 fa6f 	bl	80013e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af02:	e0fd      	b.n	800b100 <HAL_UART_IRQHandler+0x760>
 800af04:	40020010 	.word	0x40020010
 800af08:	40020028 	.word	0x40020028
 800af0c:	40020040 	.word	0x40020040
 800af10:	40020058 	.word	0x40020058
 800af14:	40020070 	.word	0x40020070
 800af18:	40020088 	.word	0x40020088
 800af1c:	400200a0 	.word	0x400200a0
 800af20:	400200b8 	.word	0x400200b8
 800af24:	40020410 	.word	0x40020410
 800af28:	40020428 	.word	0x40020428
 800af2c:	40020440 	.word	0x40020440
 800af30:	40020458 	.word	0x40020458
 800af34:	40020470 	.word	0x40020470
 800af38:	40020488 	.word	0x40020488
 800af3c:	400204a0 	.word	0x400204a0
 800af40:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af50:	b29b      	uxth	r3, r3
 800af52:	1ad3      	subs	r3, r2, r3
 800af54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af5e:	b29b      	uxth	r3, r3
 800af60:	2b00      	cmp	r3, #0
 800af62:	f000 80cf 	beq.w	800b104 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800af66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f000 80ca 	beq.w	800b104 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af78:	e853 3f00 	ldrex	r3, [r3]
 800af7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	461a      	mov	r2, r3
 800af8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af92:	647b      	str	r3, [r7, #68]	; 0x44
 800af94:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af9a:	e841 2300 	strex	r3, r2, [r1]
 800af9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800afa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d1e4      	bne.n	800af70 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	3308      	adds	r3, #8
 800afac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb0:	e853 3f00 	ldrex	r3, [r3]
 800afb4:	623b      	str	r3, [r7, #32]
   return(result);
 800afb6:	6a3a      	ldr	r2, [r7, #32]
 800afb8:	4b55      	ldr	r3, [pc, #340]	; (800b110 <HAL_UART_IRQHandler+0x770>)
 800afba:	4013      	ands	r3, r2
 800afbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	3308      	adds	r3, #8
 800afc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800afca:	633a      	str	r2, [r7, #48]	; 0x30
 800afcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afd2:	e841 2300 	strex	r3, r2, [r1]
 800afd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800afd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d1e3      	bne.n	800afa6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2220      	movs	r2, #32
 800afe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	e853 3f00 	ldrex	r3, [r3]
 800affe:	60fb      	str	r3, [r7, #12]
   return(result);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f023 0310 	bic.w	r3, r3, #16
 800b006:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	461a      	mov	r2, r3
 800b010:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b014:	61fb      	str	r3, [r7, #28]
 800b016:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b018:	69b9      	ldr	r1, [r7, #24]
 800b01a:	69fa      	ldr	r2, [r7, #28]
 800b01c:	e841 2300 	strex	r3, r2, [r1]
 800b020:	617b      	str	r3, [r7, #20]
   return(result);
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d1e4      	bne.n	800aff2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2202      	movs	r2, #2
 800b02c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b02e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b032:	4619      	mov	r1, r3
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f7f6 f9d3 	bl	80013e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b03a:	e063      	b.n	800b104 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b03c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00e      	beq.n	800b066 <HAL_UART_IRQHandler+0x6c6>
 800b048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b04c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b050:	2b00      	cmp	r3, #0
 800b052:	d008      	beq.n	800b066 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b05c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f001 fb85 	bl	800c76e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b064:	e051      	b.n	800b10a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b06a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d014      	beq.n	800b09c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d105      	bne.n	800b08a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b07e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b082:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b086:	2b00      	cmp	r3, #0
 800b088:	d008      	beq.n	800b09c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d03a      	beq.n	800b108 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	4798      	blx	r3
    }
    return;
 800b09a:	e035      	b.n	800b108 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b09c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d009      	beq.n	800b0bc <HAL_UART_IRQHandler+0x71c>
 800b0a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d003      	beq.n	800b0bc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f001 fb2f 	bl	800c718 <UART_EndTransmit_IT>
    return;
 800b0ba:	e026      	b.n	800b10a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b0bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d009      	beq.n	800b0dc <HAL_UART_IRQHandler+0x73c>
 800b0c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d003      	beq.n	800b0dc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f001 fb5e 	bl	800c796 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b0da:	e016      	b.n	800b10a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d010      	beq.n	800b10a <HAL_UART_IRQHandler+0x76a>
 800b0e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	da0c      	bge.n	800b10a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f001 fb46 	bl	800c782 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b0f6:	e008      	b.n	800b10a <HAL_UART_IRQHandler+0x76a>
      return;
 800b0f8:	bf00      	nop
 800b0fa:	e006      	b.n	800b10a <HAL_UART_IRQHandler+0x76a>
    return;
 800b0fc:	bf00      	nop
 800b0fe:	e004      	b.n	800b10a <HAL_UART_IRQHandler+0x76a>
      return;
 800b100:	bf00      	nop
 800b102:	e002      	b.n	800b10a <HAL_UART_IRQHandler+0x76a>
      return;
 800b104:	bf00      	nop
 800b106:	e000      	b.n	800b10a <HAL_UART_IRQHandler+0x76a>
    return;
 800b108:	bf00      	nop
  }
}
 800b10a:	37e8      	adds	r7, #232	; 0xe8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	effffffe 	.word	0xeffffffe

0800b114 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b11c:	bf00      	nop
 800b11e:	370c      	adds	r7, #12
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b144:	bf00      	nop
 800b146:	370c      	adds	r7, #12
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b158:	bf00      	nop
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b16c:	bf00      	nop
 800b16e:	370c      	adds	r7, #12
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b17c:	b092      	sub	sp, #72	; 0x48
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b182:	2300      	movs	r3, #0
 800b184:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	689a      	ldr	r2, [r3, #8]
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	691b      	ldr	r3, [r3, #16]
 800b190:	431a      	orrs	r2, r3
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	695b      	ldr	r3, [r3, #20]
 800b196:	431a      	orrs	r2, r3
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	69db      	ldr	r3, [r3, #28]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	4bbe      	ldr	r3, [pc, #760]	; (800b4a0 <UART_SetConfig+0x328>)
 800b1a8:	4013      	ands	r3, r2
 800b1aa:	697a      	ldr	r2, [r7, #20]
 800b1ac:	6812      	ldr	r2, [r2, #0]
 800b1ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b1b0:	430b      	orrs	r3, r1
 800b1b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	68da      	ldr	r2, [r3, #12]
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	430a      	orrs	r2, r1
 800b1c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	699b      	ldr	r3, [r3, #24]
 800b1ce:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4ab3      	ldr	r2, [pc, #716]	; (800b4a4 <UART_SetConfig+0x32c>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d004      	beq.n	800b1e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	6a1b      	ldr	r3, [r3, #32]
 800b1de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	689a      	ldr	r2, [r3, #8]
 800b1ea:	4baf      	ldr	r3, [pc, #700]	; (800b4a8 <UART_SetConfig+0x330>)
 800b1ec:	4013      	ands	r3, r2
 800b1ee:	697a      	ldr	r2, [r7, #20]
 800b1f0:	6812      	ldr	r2, [r2, #0]
 800b1f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b1f4:	430b      	orrs	r3, r1
 800b1f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1fe:	f023 010f 	bic.w	r1, r3, #15
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	430a      	orrs	r2, r1
 800b20c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4aa6      	ldr	r2, [pc, #664]	; (800b4ac <UART_SetConfig+0x334>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d177      	bne.n	800b308 <UART_SetConfig+0x190>
 800b218:	4ba5      	ldr	r3, [pc, #660]	; (800b4b0 <UART_SetConfig+0x338>)
 800b21a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b21c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b220:	2b28      	cmp	r3, #40	; 0x28
 800b222:	d86d      	bhi.n	800b300 <UART_SetConfig+0x188>
 800b224:	a201      	add	r2, pc, #4	; (adr r2, 800b22c <UART_SetConfig+0xb4>)
 800b226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b22a:	bf00      	nop
 800b22c:	0800b2d1 	.word	0x0800b2d1
 800b230:	0800b301 	.word	0x0800b301
 800b234:	0800b301 	.word	0x0800b301
 800b238:	0800b301 	.word	0x0800b301
 800b23c:	0800b301 	.word	0x0800b301
 800b240:	0800b301 	.word	0x0800b301
 800b244:	0800b301 	.word	0x0800b301
 800b248:	0800b301 	.word	0x0800b301
 800b24c:	0800b2d9 	.word	0x0800b2d9
 800b250:	0800b301 	.word	0x0800b301
 800b254:	0800b301 	.word	0x0800b301
 800b258:	0800b301 	.word	0x0800b301
 800b25c:	0800b301 	.word	0x0800b301
 800b260:	0800b301 	.word	0x0800b301
 800b264:	0800b301 	.word	0x0800b301
 800b268:	0800b301 	.word	0x0800b301
 800b26c:	0800b2e1 	.word	0x0800b2e1
 800b270:	0800b301 	.word	0x0800b301
 800b274:	0800b301 	.word	0x0800b301
 800b278:	0800b301 	.word	0x0800b301
 800b27c:	0800b301 	.word	0x0800b301
 800b280:	0800b301 	.word	0x0800b301
 800b284:	0800b301 	.word	0x0800b301
 800b288:	0800b301 	.word	0x0800b301
 800b28c:	0800b2e9 	.word	0x0800b2e9
 800b290:	0800b301 	.word	0x0800b301
 800b294:	0800b301 	.word	0x0800b301
 800b298:	0800b301 	.word	0x0800b301
 800b29c:	0800b301 	.word	0x0800b301
 800b2a0:	0800b301 	.word	0x0800b301
 800b2a4:	0800b301 	.word	0x0800b301
 800b2a8:	0800b301 	.word	0x0800b301
 800b2ac:	0800b2f1 	.word	0x0800b2f1
 800b2b0:	0800b301 	.word	0x0800b301
 800b2b4:	0800b301 	.word	0x0800b301
 800b2b8:	0800b301 	.word	0x0800b301
 800b2bc:	0800b301 	.word	0x0800b301
 800b2c0:	0800b301 	.word	0x0800b301
 800b2c4:	0800b301 	.word	0x0800b301
 800b2c8:	0800b301 	.word	0x0800b301
 800b2cc:	0800b2f9 	.word	0x0800b2f9
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2d6:	e326      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b2d8:	2304      	movs	r3, #4
 800b2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2de:	e322      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b2e0:	2308      	movs	r3, #8
 800b2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2e6:	e31e      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b2e8:	2310      	movs	r3, #16
 800b2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ee:	e31a      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b2f0:	2320      	movs	r3, #32
 800b2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2f6:	e316      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b2f8:	2340      	movs	r3, #64	; 0x40
 800b2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2fe:	e312      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b300:	2380      	movs	r3, #128	; 0x80
 800b302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b306:	e30e      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a69      	ldr	r2, [pc, #420]	; (800b4b4 <UART_SetConfig+0x33c>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d130      	bne.n	800b374 <UART_SetConfig+0x1fc>
 800b312:	4b67      	ldr	r3, [pc, #412]	; (800b4b0 <UART_SetConfig+0x338>)
 800b314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b316:	f003 0307 	and.w	r3, r3, #7
 800b31a:	2b05      	cmp	r3, #5
 800b31c:	d826      	bhi.n	800b36c <UART_SetConfig+0x1f4>
 800b31e:	a201      	add	r2, pc, #4	; (adr r2, 800b324 <UART_SetConfig+0x1ac>)
 800b320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b324:	0800b33d 	.word	0x0800b33d
 800b328:	0800b345 	.word	0x0800b345
 800b32c:	0800b34d 	.word	0x0800b34d
 800b330:	0800b355 	.word	0x0800b355
 800b334:	0800b35d 	.word	0x0800b35d
 800b338:	0800b365 	.word	0x0800b365
 800b33c:	2300      	movs	r3, #0
 800b33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b342:	e2f0      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b344:	2304      	movs	r3, #4
 800b346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b34a:	e2ec      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b34c:	2308      	movs	r3, #8
 800b34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b352:	e2e8      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b354:	2310      	movs	r3, #16
 800b356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b35a:	e2e4      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b35c:	2320      	movs	r3, #32
 800b35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b362:	e2e0      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b364:	2340      	movs	r3, #64	; 0x40
 800b366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b36a:	e2dc      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b36c:	2380      	movs	r3, #128	; 0x80
 800b36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b372:	e2d8      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a4f      	ldr	r2, [pc, #316]	; (800b4b8 <UART_SetConfig+0x340>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d130      	bne.n	800b3e0 <UART_SetConfig+0x268>
 800b37e:	4b4c      	ldr	r3, [pc, #304]	; (800b4b0 <UART_SetConfig+0x338>)
 800b380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b382:	f003 0307 	and.w	r3, r3, #7
 800b386:	2b05      	cmp	r3, #5
 800b388:	d826      	bhi.n	800b3d8 <UART_SetConfig+0x260>
 800b38a:	a201      	add	r2, pc, #4	; (adr r2, 800b390 <UART_SetConfig+0x218>)
 800b38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b390:	0800b3a9 	.word	0x0800b3a9
 800b394:	0800b3b1 	.word	0x0800b3b1
 800b398:	0800b3b9 	.word	0x0800b3b9
 800b39c:	0800b3c1 	.word	0x0800b3c1
 800b3a0:	0800b3c9 	.word	0x0800b3c9
 800b3a4:	0800b3d1 	.word	0x0800b3d1
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ae:	e2ba      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b3b0:	2304      	movs	r3, #4
 800b3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3b6:	e2b6      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b3b8:	2308      	movs	r3, #8
 800b3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3be:	e2b2      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b3c0:	2310      	movs	r3, #16
 800b3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3c6:	e2ae      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b3c8:	2320      	movs	r3, #32
 800b3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ce:	e2aa      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b3d0:	2340      	movs	r3, #64	; 0x40
 800b3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3d6:	e2a6      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b3d8:	2380      	movs	r3, #128	; 0x80
 800b3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3de:	e2a2      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a35      	ldr	r2, [pc, #212]	; (800b4bc <UART_SetConfig+0x344>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d130      	bne.n	800b44c <UART_SetConfig+0x2d4>
 800b3ea:	4b31      	ldr	r3, [pc, #196]	; (800b4b0 <UART_SetConfig+0x338>)
 800b3ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3ee:	f003 0307 	and.w	r3, r3, #7
 800b3f2:	2b05      	cmp	r3, #5
 800b3f4:	d826      	bhi.n	800b444 <UART_SetConfig+0x2cc>
 800b3f6:	a201      	add	r2, pc, #4	; (adr r2, 800b3fc <UART_SetConfig+0x284>)
 800b3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fc:	0800b415 	.word	0x0800b415
 800b400:	0800b41d 	.word	0x0800b41d
 800b404:	0800b425 	.word	0x0800b425
 800b408:	0800b42d 	.word	0x0800b42d
 800b40c:	0800b435 	.word	0x0800b435
 800b410:	0800b43d 	.word	0x0800b43d
 800b414:	2300      	movs	r3, #0
 800b416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b41a:	e284      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b41c:	2304      	movs	r3, #4
 800b41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b422:	e280      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b424:	2308      	movs	r3, #8
 800b426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b42a:	e27c      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b42c:	2310      	movs	r3, #16
 800b42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b432:	e278      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b434:	2320      	movs	r3, #32
 800b436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b43a:	e274      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b43c:	2340      	movs	r3, #64	; 0x40
 800b43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b442:	e270      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b444:	2380      	movs	r3, #128	; 0x80
 800b446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b44a:	e26c      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a1b      	ldr	r2, [pc, #108]	; (800b4c0 <UART_SetConfig+0x348>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d142      	bne.n	800b4dc <UART_SetConfig+0x364>
 800b456:	4b16      	ldr	r3, [pc, #88]	; (800b4b0 <UART_SetConfig+0x338>)
 800b458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b45a:	f003 0307 	and.w	r3, r3, #7
 800b45e:	2b05      	cmp	r3, #5
 800b460:	d838      	bhi.n	800b4d4 <UART_SetConfig+0x35c>
 800b462:	a201      	add	r2, pc, #4	; (adr r2, 800b468 <UART_SetConfig+0x2f0>)
 800b464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b468:	0800b481 	.word	0x0800b481
 800b46c:	0800b489 	.word	0x0800b489
 800b470:	0800b491 	.word	0x0800b491
 800b474:	0800b499 	.word	0x0800b499
 800b478:	0800b4c5 	.word	0x0800b4c5
 800b47c:	0800b4cd 	.word	0x0800b4cd
 800b480:	2300      	movs	r3, #0
 800b482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b486:	e24e      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b488:	2304      	movs	r3, #4
 800b48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b48e:	e24a      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b490:	2308      	movs	r3, #8
 800b492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b496:	e246      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b498:	2310      	movs	r3, #16
 800b49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b49e:	e242      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b4a0:	cfff69f3 	.word	0xcfff69f3
 800b4a4:	58000c00 	.word	0x58000c00
 800b4a8:	11fff4ff 	.word	0x11fff4ff
 800b4ac:	40011000 	.word	0x40011000
 800b4b0:	58024400 	.word	0x58024400
 800b4b4:	40004400 	.word	0x40004400
 800b4b8:	40004800 	.word	0x40004800
 800b4bc:	40004c00 	.word	0x40004c00
 800b4c0:	40005000 	.word	0x40005000
 800b4c4:	2320      	movs	r3, #32
 800b4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ca:	e22c      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b4cc:	2340      	movs	r3, #64	; 0x40
 800b4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4d2:	e228      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b4d4:	2380      	movs	r3, #128	; 0x80
 800b4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4da:	e224      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4ab1      	ldr	r2, [pc, #708]	; (800b7a8 <UART_SetConfig+0x630>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d176      	bne.n	800b5d4 <UART_SetConfig+0x45c>
 800b4e6:	4bb1      	ldr	r3, [pc, #708]	; (800b7ac <UART_SetConfig+0x634>)
 800b4e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b4ee:	2b28      	cmp	r3, #40	; 0x28
 800b4f0:	d86c      	bhi.n	800b5cc <UART_SetConfig+0x454>
 800b4f2:	a201      	add	r2, pc, #4	; (adr r2, 800b4f8 <UART_SetConfig+0x380>)
 800b4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4f8:	0800b59d 	.word	0x0800b59d
 800b4fc:	0800b5cd 	.word	0x0800b5cd
 800b500:	0800b5cd 	.word	0x0800b5cd
 800b504:	0800b5cd 	.word	0x0800b5cd
 800b508:	0800b5cd 	.word	0x0800b5cd
 800b50c:	0800b5cd 	.word	0x0800b5cd
 800b510:	0800b5cd 	.word	0x0800b5cd
 800b514:	0800b5cd 	.word	0x0800b5cd
 800b518:	0800b5a5 	.word	0x0800b5a5
 800b51c:	0800b5cd 	.word	0x0800b5cd
 800b520:	0800b5cd 	.word	0x0800b5cd
 800b524:	0800b5cd 	.word	0x0800b5cd
 800b528:	0800b5cd 	.word	0x0800b5cd
 800b52c:	0800b5cd 	.word	0x0800b5cd
 800b530:	0800b5cd 	.word	0x0800b5cd
 800b534:	0800b5cd 	.word	0x0800b5cd
 800b538:	0800b5ad 	.word	0x0800b5ad
 800b53c:	0800b5cd 	.word	0x0800b5cd
 800b540:	0800b5cd 	.word	0x0800b5cd
 800b544:	0800b5cd 	.word	0x0800b5cd
 800b548:	0800b5cd 	.word	0x0800b5cd
 800b54c:	0800b5cd 	.word	0x0800b5cd
 800b550:	0800b5cd 	.word	0x0800b5cd
 800b554:	0800b5cd 	.word	0x0800b5cd
 800b558:	0800b5b5 	.word	0x0800b5b5
 800b55c:	0800b5cd 	.word	0x0800b5cd
 800b560:	0800b5cd 	.word	0x0800b5cd
 800b564:	0800b5cd 	.word	0x0800b5cd
 800b568:	0800b5cd 	.word	0x0800b5cd
 800b56c:	0800b5cd 	.word	0x0800b5cd
 800b570:	0800b5cd 	.word	0x0800b5cd
 800b574:	0800b5cd 	.word	0x0800b5cd
 800b578:	0800b5bd 	.word	0x0800b5bd
 800b57c:	0800b5cd 	.word	0x0800b5cd
 800b580:	0800b5cd 	.word	0x0800b5cd
 800b584:	0800b5cd 	.word	0x0800b5cd
 800b588:	0800b5cd 	.word	0x0800b5cd
 800b58c:	0800b5cd 	.word	0x0800b5cd
 800b590:	0800b5cd 	.word	0x0800b5cd
 800b594:	0800b5cd 	.word	0x0800b5cd
 800b598:	0800b5c5 	.word	0x0800b5c5
 800b59c:	2301      	movs	r3, #1
 800b59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5a2:	e1c0      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b5a4:	2304      	movs	r3, #4
 800b5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5aa:	e1bc      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b5ac:	2308      	movs	r3, #8
 800b5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5b2:	e1b8      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b5b4:	2310      	movs	r3, #16
 800b5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ba:	e1b4      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b5bc:	2320      	movs	r3, #32
 800b5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5c2:	e1b0      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b5c4:	2340      	movs	r3, #64	; 0x40
 800b5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ca:	e1ac      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b5cc:	2380      	movs	r3, #128	; 0x80
 800b5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5d2:	e1a8      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4a75      	ldr	r2, [pc, #468]	; (800b7b0 <UART_SetConfig+0x638>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d130      	bne.n	800b640 <UART_SetConfig+0x4c8>
 800b5de:	4b73      	ldr	r3, [pc, #460]	; (800b7ac <UART_SetConfig+0x634>)
 800b5e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5e2:	f003 0307 	and.w	r3, r3, #7
 800b5e6:	2b05      	cmp	r3, #5
 800b5e8:	d826      	bhi.n	800b638 <UART_SetConfig+0x4c0>
 800b5ea:	a201      	add	r2, pc, #4	; (adr r2, 800b5f0 <UART_SetConfig+0x478>)
 800b5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f0:	0800b609 	.word	0x0800b609
 800b5f4:	0800b611 	.word	0x0800b611
 800b5f8:	0800b619 	.word	0x0800b619
 800b5fc:	0800b621 	.word	0x0800b621
 800b600:	0800b629 	.word	0x0800b629
 800b604:	0800b631 	.word	0x0800b631
 800b608:	2300      	movs	r3, #0
 800b60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b60e:	e18a      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b610:	2304      	movs	r3, #4
 800b612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b616:	e186      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b618:	2308      	movs	r3, #8
 800b61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b61e:	e182      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b620:	2310      	movs	r3, #16
 800b622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b626:	e17e      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b628:	2320      	movs	r3, #32
 800b62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b62e:	e17a      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b630:	2340      	movs	r3, #64	; 0x40
 800b632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b636:	e176      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b638:	2380      	movs	r3, #128	; 0x80
 800b63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b63e:	e172      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4a5b      	ldr	r2, [pc, #364]	; (800b7b4 <UART_SetConfig+0x63c>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d130      	bne.n	800b6ac <UART_SetConfig+0x534>
 800b64a:	4b58      	ldr	r3, [pc, #352]	; (800b7ac <UART_SetConfig+0x634>)
 800b64c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b64e:	f003 0307 	and.w	r3, r3, #7
 800b652:	2b05      	cmp	r3, #5
 800b654:	d826      	bhi.n	800b6a4 <UART_SetConfig+0x52c>
 800b656:	a201      	add	r2, pc, #4	; (adr r2, 800b65c <UART_SetConfig+0x4e4>)
 800b658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b65c:	0800b675 	.word	0x0800b675
 800b660:	0800b67d 	.word	0x0800b67d
 800b664:	0800b685 	.word	0x0800b685
 800b668:	0800b68d 	.word	0x0800b68d
 800b66c:	0800b695 	.word	0x0800b695
 800b670:	0800b69d 	.word	0x0800b69d
 800b674:	2300      	movs	r3, #0
 800b676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b67a:	e154      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b67c:	2304      	movs	r3, #4
 800b67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b682:	e150      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b684:	2308      	movs	r3, #8
 800b686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b68a:	e14c      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b68c:	2310      	movs	r3, #16
 800b68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b692:	e148      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b694:	2320      	movs	r3, #32
 800b696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b69a:	e144      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b69c:	2340      	movs	r3, #64	; 0x40
 800b69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6a2:	e140      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b6a4:	2380      	movs	r3, #128	; 0x80
 800b6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6aa:	e13c      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a41      	ldr	r2, [pc, #260]	; (800b7b8 <UART_SetConfig+0x640>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	f040 8082 	bne.w	800b7bc <UART_SetConfig+0x644>
 800b6b8:	4b3c      	ldr	r3, [pc, #240]	; (800b7ac <UART_SetConfig+0x634>)
 800b6ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b6c0:	2b28      	cmp	r3, #40	; 0x28
 800b6c2:	d86d      	bhi.n	800b7a0 <UART_SetConfig+0x628>
 800b6c4:	a201      	add	r2, pc, #4	; (adr r2, 800b6cc <UART_SetConfig+0x554>)
 800b6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ca:	bf00      	nop
 800b6cc:	0800b771 	.word	0x0800b771
 800b6d0:	0800b7a1 	.word	0x0800b7a1
 800b6d4:	0800b7a1 	.word	0x0800b7a1
 800b6d8:	0800b7a1 	.word	0x0800b7a1
 800b6dc:	0800b7a1 	.word	0x0800b7a1
 800b6e0:	0800b7a1 	.word	0x0800b7a1
 800b6e4:	0800b7a1 	.word	0x0800b7a1
 800b6e8:	0800b7a1 	.word	0x0800b7a1
 800b6ec:	0800b779 	.word	0x0800b779
 800b6f0:	0800b7a1 	.word	0x0800b7a1
 800b6f4:	0800b7a1 	.word	0x0800b7a1
 800b6f8:	0800b7a1 	.word	0x0800b7a1
 800b6fc:	0800b7a1 	.word	0x0800b7a1
 800b700:	0800b7a1 	.word	0x0800b7a1
 800b704:	0800b7a1 	.word	0x0800b7a1
 800b708:	0800b7a1 	.word	0x0800b7a1
 800b70c:	0800b781 	.word	0x0800b781
 800b710:	0800b7a1 	.word	0x0800b7a1
 800b714:	0800b7a1 	.word	0x0800b7a1
 800b718:	0800b7a1 	.word	0x0800b7a1
 800b71c:	0800b7a1 	.word	0x0800b7a1
 800b720:	0800b7a1 	.word	0x0800b7a1
 800b724:	0800b7a1 	.word	0x0800b7a1
 800b728:	0800b7a1 	.word	0x0800b7a1
 800b72c:	0800b789 	.word	0x0800b789
 800b730:	0800b7a1 	.word	0x0800b7a1
 800b734:	0800b7a1 	.word	0x0800b7a1
 800b738:	0800b7a1 	.word	0x0800b7a1
 800b73c:	0800b7a1 	.word	0x0800b7a1
 800b740:	0800b7a1 	.word	0x0800b7a1
 800b744:	0800b7a1 	.word	0x0800b7a1
 800b748:	0800b7a1 	.word	0x0800b7a1
 800b74c:	0800b791 	.word	0x0800b791
 800b750:	0800b7a1 	.word	0x0800b7a1
 800b754:	0800b7a1 	.word	0x0800b7a1
 800b758:	0800b7a1 	.word	0x0800b7a1
 800b75c:	0800b7a1 	.word	0x0800b7a1
 800b760:	0800b7a1 	.word	0x0800b7a1
 800b764:	0800b7a1 	.word	0x0800b7a1
 800b768:	0800b7a1 	.word	0x0800b7a1
 800b76c:	0800b799 	.word	0x0800b799
 800b770:	2301      	movs	r3, #1
 800b772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b776:	e0d6      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b778:	2304      	movs	r3, #4
 800b77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b77e:	e0d2      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b780:	2308      	movs	r3, #8
 800b782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b786:	e0ce      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b788:	2310      	movs	r3, #16
 800b78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b78e:	e0ca      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b790:	2320      	movs	r3, #32
 800b792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b796:	e0c6      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b798:	2340      	movs	r3, #64	; 0x40
 800b79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b79e:	e0c2      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b7a0:	2380      	movs	r3, #128	; 0x80
 800b7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7a6:	e0be      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b7a8:	40011400 	.word	0x40011400
 800b7ac:	58024400 	.word	0x58024400
 800b7b0:	40007800 	.word	0x40007800
 800b7b4:	40007c00 	.word	0x40007c00
 800b7b8:	40011800 	.word	0x40011800
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4aad      	ldr	r2, [pc, #692]	; (800ba78 <UART_SetConfig+0x900>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d176      	bne.n	800b8b4 <UART_SetConfig+0x73c>
 800b7c6:	4bad      	ldr	r3, [pc, #692]	; (800ba7c <UART_SetConfig+0x904>)
 800b7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b7ce:	2b28      	cmp	r3, #40	; 0x28
 800b7d0:	d86c      	bhi.n	800b8ac <UART_SetConfig+0x734>
 800b7d2:	a201      	add	r2, pc, #4	; (adr r2, 800b7d8 <UART_SetConfig+0x660>)
 800b7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d8:	0800b87d 	.word	0x0800b87d
 800b7dc:	0800b8ad 	.word	0x0800b8ad
 800b7e0:	0800b8ad 	.word	0x0800b8ad
 800b7e4:	0800b8ad 	.word	0x0800b8ad
 800b7e8:	0800b8ad 	.word	0x0800b8ad
 800b7ec:	0800b8ad 	.word	0x0800b8ad
 800b7f0:	0800b8ad 	.word	0x0800b8ad
 800b7f4:	0800b8ad 	.word	0x0800b8ad
 800b7f8:	0800b885 	.word	0x0800b885
 800b7fc:	0800b8ad 	.word	0x0800b8ad
 800b800:	0800b8ad 	.word	0x0800b8ad
 800b804:	0800b8ad 	.word	0x0800b8ad
 800b808:	0800b8ad 	.word	0x0800b8ad
 800b80c:	0800b8ad 	.word	0x0800b8ad
 800b810:	0800b8ad 	.word	0x0800b8ad
 800b814:	0800b8ad 	.word	0x0800b8ad
 800b818:	0800b88d 	.word	0x0800b88d
 800b81c:	0800b8ad 	.word	0x0800b8ad
 800b820:	0800b8ad 	.word	0x0800b8ad
 800b824:	0800b8ad 	.word	0x0800b8ad
 800b828:	0800b8ad 	.word	0x0800b8ad
 800b82c:	0800b8ad 	.word	0x0800b8ad
 800b830:	0800b8ad 	.word	0x0800b8ad
 800b834:	0800b8ad 	.word	0x0800b8ad
 800b838:	0800b895 	.word	0x0800b895
 800b83c:	0800b8ad 	.word	0x0800b8ad
 800b840:	0800b8ad 	.word	0x0800b8ad
 800b844:	0800b8ad 	.word	0x0800b8ad
 800b848:	0800b8ad 	.word	0x0800b8ad
 800b84c:	0800b8ad 	.word	0x0800b8ad
 800b850:	0800b8ad 	.word	0x0800b8ad
 800b854:	0800b8ad 	.word	0x0800b8ad
 800b858:	0800b89d 	.word	0x0800b89d
 800b85c:	0800b8ad 	.word	0x0800b8ad
 800b860:	0800b8ad 	.word	0x0800b8ad
 800b864:	0800b8ad 	.word	0x0800b8ad
 800b868:	0800b8ad 	.word	0x0800b8ad
 800b86c:	0800b8ad 	.word	0x0800b8ad
 800b870:	0800b8ad 	.word	0x0800b8ad
 800b874:	0800b8ad 	.word	0x0800b8ad
 800b878:	0800b8a5 	.word	0x0800b8a5
 800b87c:	2301      	movs	r3, #1
 800b87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b882:	e050      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b884:	2304      	movs	r3, #4
 800b886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b88a:	e04c      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b88c:	2308      	movs	r3, #8
 800b88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b892:	e048      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b894:	2310      	movs	r3, #16
 800b896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b89a:	e044      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b89c:	2320      	movs	r3, #32
 800b89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8a2:	e040      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b8a4:	2340      	movs	r3, #64	; 0x40
 800b8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8aa:	e03c      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b8ac:	2380      	movs	r3, #128	; 0x80
 800b8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8b2:	e038      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a71      	ldr	r2, [pc, #452]	; (800ba80 <UART_SetConfig+0x908>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d130      	bne.n	800b920 <UART_SetConfig+0x7a8>
 800b8be:	4b6f      	ldr	r3, [pc, #444]	; (800ba7c <UART_SetConfig+0x904>)
 800b8c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8c2:	f003 0307 	and.w	r3, r3, #7
 800b8c6:	2b05      	cmp	r3, #5
 800b8c8:	d826      	bhi.n	800b918 <UART_SetConfig+0x7a0>
 800b8ca:	a201      	add	r2, pc, #4	; (adr r2, 800b8d0 <UART_SetConfig+0x758>)
 800b8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d0:	0800b8e9 	.word	0x0800b8e9
 800b8d4:	0800b8f1 	.word	0x0800b8f1
 800b8d8:	0800b8f9 	.word	0x0800b8f9
 800b8dc:	0800b901 	.word	0x0800b901
 800b8e0:	0800b909 	.word	0x0800b909
 800b8e4:	0800b911 	.word	0x0800b911
 800b8e8:	2302      	movs	r3, #2
 800b8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8ee:	e01a      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b8f0:	2304      	movs	r3, #4
 800b8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8f6:	e016      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b8f8:	2308      	movs	r3, #8
 800b8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8fe:	e012      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b900:	2310      	movs	r3, #16
 800b902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b906:	e00e      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b908:	2320      	movs	r3, #32
 800b90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b90e:	e00a      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b910:	2340      	movs	r3, #64	; 0x40
 800b912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b916:	e006      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b918:	2380      	movs	r3, #128	; 0x80
 800b91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b91e:	e002      	b.n	800b926 <UART_SetConfig+0x7ae>
 800b920:	2380      	movs	r3, #128	; 0x80
 800b922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a55      	ldr	r2, [pc, #340]	; (800ba80 <UART_SetConfig+0x908>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	f040 80f8 	bne.w	800bb22 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b932:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b936:	2b20      	cmp	r3, #32
 800b938:	dc46      	bgt.n	800b9c8 <UART_SetConfig+0x850>
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	db75      	blt.n	800ba2a <UART_SetConfig+0x8b2>
 800b93e:	3b02      	subs	r3, #2
 800b940:	2b1e      	cmp	r3, #30
 800b942:	d872      	bhi.n	800ba2a <UART_SetConfig+0x8b2>
 800b944:	a201      	add	r2, pc, #4	; (adr r2, 800b94c <UART_SetConfig+0x7d4>)
 800b946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b94a:	bf00      	nop
 800b94c:	0800b9cf 	.word	0x0800b9cf
 800b950:	0800ba2b 	.word	0x0800ba2b
 800b954:	0800b9d7 	.word	0x0800b9d7
 800b958:	0800ba2b 	.word	0x0800ba2b
 800b95c:	0800ba2b 	.word	0x0800ba2b
 800b960:	0800ba2b 	.word	0x0800ba2b
 800b964:	0800b9e7 	.word	0x0800b9e7
 800b968:	0800ba2b 	.word	0x0800ba2b
 800b96c:	0800ba2b 	.word	0x0800ba2b
 800b970:	0800ba2b 	.word	0x0800ba2b
 800b974:	0800ba2b 	.word	0x0800ba2b
 800b978:	0800ba2b 	.word	0x0800ba2b
 800b97c:	0800ba2b 	.word	0x0800ba2b
 800b980:	0800ba2b 	.word	0x0800ba2b
 800b984:	0800b9f7 	.word	0x0800b9f7
 800b988:	0800ba2b 	.word	0x0800ba2b
 800b98c:	0800ba2b 	.word	0x0800ba2b
 800b990:	0800ba2b 	.word	0x0800ba2b
 800b994:	0800ba2b 	.word	0x0800ba2b
 800b998:	0800ba2b 	.word	0x0800ba2b
 800b99c:	0800ba2b 	.word	0x0800ba2b
 800b9a0:	0800ba2b 	.word	0x0800ba2b
 800b9a4:	0800ba2b 	.word	0x0800ba2b
 800b9a8:	0800ba2b 	.word	0x0800ba2b
 800b9ac:	0800ba2b 	.word	0x0800ba2b
 800b9b0:	0800ba2b 	.word	0x0800ba2b
 800b9b4:	0800ba2b 	.word	0x0800ba2b
 800b9b8:	0800ba2b 	.word	0x0800ba2b
 800b9bc:	0800ba2b 	.word	0x0800ba2b
 800b9c0:	0800ba2b 	.word	0x0800ba2b
 800b9c4:	0800ba1d 	.word	0x0800ba1d
 800b9c8:	2b40      	cmp	r3, #64	; 0x40
 800b9ca:	d02a      	beq.n	800ba22 <UART_SetConfig+0x8aa>
 800b9cc:	e02d      	b.n	800ba2a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b9ce:	f7fc fec5 	bl	800875c <HAL_RCCEx_GetD3PCLK1Freq>
 800b9d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b9d4:	e02f      	b.n	800ba36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7fc fed4 	bl	8008788 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9e4:	e027      	b.n	800ba36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9e6:	f107 0318 	add.w	r3, r7, #24
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7fd f820 	bl	8008a30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9f4:	e01f      	b.n	800ba36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9f6:	4b21      	ldr	r3, [pc, #132]	; (800ba7c <UART_SetConfig+0x904>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f003 0320 	and.w	r3, r3, #32
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d009      	beq.n	800ba16 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba02:	4b1e      	ldr	r3, [pc, #120]	; (800ba7c <UART_SetConfig+0x904>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	08db      	lsrs	r3, r3, #3
 800ba08:	f003 0303 	and.w	r3, r3, #3
 800ba0c:	4a1d      	ldr	r2, [pc, #116]	; (800ba84 <UART_SetConfig+0x90c>)
 800ba0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba14:	e00f      	b.n	800ba36 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ba16:	4b1b      	ldr	r3, [pc, #108]	; (800ba84 <UART_SetConfig+0x90c>)
 800ba18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba1a:	e00c      	b.n	800ba36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba1c:	4b1a      	ldr	r3, [pc, #104]	; (800ba88 <UART_SetConfig+0x910>)
 800ba1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba20:	e009      	b.n	800ba36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba28:	e005      	b.n	800ba36 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ba34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ba36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	f000 81ee 	beq.w	800be1a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba42:	4a12      	ldr	r2, [pc, #72]	; (800ba8c <UART_SetConfig+0x914>)
 800ba44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba48:	461a      	mov	r2, r3
 800ba4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba50:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	685a      	ldr	r2, [r3, #4]
 800ba56:	4613      	mov	r3, r2
 800ba58:	005b      	lsls	r3, r3, #1
 800ba5a:	4413      	add	r3, r2
 800ba5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d305      	bcc.n	800ba6e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d910      	bls.n	800ba90 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ba74:	e1d1      	b.n	800be1a <UART_SetConfig+0xca2>
 800ba76:	bf00      	nop
 800ba78:	40011c00 	.word	0x40011c00
 800ba7c:	58024400 	.word	0x58024400
 800ba80:	58000c00 	.word	0x58000c00
 800ba84:	03d09000 	.word	0x03d09000
 800ba88:	003d0900 	.word	0x003d0900
 800ba8c:	0800cb10 	.word	0x0800cb10
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba92:	2200      	movs	r2, #0
 800ba94:	60bb      	str	r3, [r7, #8]
 800ba96:	60fa      	str	r2, [r7, #12]
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba9c:	4ac0      	ldr	r2, [pc, #768]	; (800bda0 <UART_SetConfig+0xc28>)
 800ba9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	2200      	movs	r2, #0
 800baa6:	603b      	str	r3, [r7, #0]
 800baa8:	607a      	str	r2, [r7, #4]
 800baaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800baae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bab2:	f7f4 fc1b 	bl	80002ec <__aeabi_uldivmod>
 800bab6:	4602      	mov	r2, r0
 800bab8:	460b      	mov	r3, r1
 800baba:	4610      	mov	r0, r2
 800babc:	4619      	mov	r1, r3
 800babe:	f04f 0200 	mov.w	r2, #0
 800bac2:	f04f 0300 	mov.w	r3, #0
 800bac6:	020b      	lsls	r3, r1, #8
 800bac8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bacc:	0202      	lsls	r2, r0, #8
 800bace:	6979      	ldr	r1, [r7, #20]
 800bad0:	6849      	ldr	r1, [r1, #4]
 800bad2:	0849      	lsrs	r1, r1, #1
 800bad4:	2000      	movs	r0, #0
 800bad6:	460c      	mov	r4, r1
 800bad8:	4605      	mov	r5, r0
 800bada:	eb12 0804 	adds.w	r8, r2, r4
 800bade:	eb43 0905 	adc.w	r9, r3, r5
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	469a      	mov	sl, r3
 800baea:	4693      	mov	fp, r2
 800baec:	4652      	mov	r2, sl
 800baee:	465b      	mov	r3, fp
 800baf0:	4640      	mov	r0, r8
 800baf2:	4649      	mov	r1, r9
 800baf4:	f7f4 fbfa 	bl	80002ec <__aeabi_uldivmod>
 800baf8:	4602      	mov	r2, r0
 800bafa:	460b      	mov	r3, r1
 800bafc:	4613      	mov	r3, r2
 800bafe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb06:	d308      	bcc.n	800bb1a <UART_SetConfig+0x9a2>
 800bb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb0e:	d204      	bcs.n	800bb1a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb16:	60da      	str	r2, [r3, #12]
 800bb18:	e17f      	b.n	800be1a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bb20:	e17b      	b.n	800be1a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	69db      	ldr	r3, [r3, #28]
 800bb26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb2a:	f040 80bd 	bne.w	800bca8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800bb2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bb32:	2b20      	cmp	r3, #32
 800bb34:	dc48      	bgt.n	800bbc8 <UART_SetConfig+0xa50>
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	db7b      	blt.n	800bc32 <UART_SetConfig+0xaba>
 800bb3a:	2b20      	cmp	r3, #32
 800bb3c:	d879      	bhi.n	800bc32 <UART_SetConfig+0xaba>
 800bb3e:	a201      	add	r2, pc, #4	; (adr r2, 800bb44 <UART_SetConfig+0x9cc>)
 800bb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb44:	0800bbcf 	.word	0x0800bbcf
 800bb48:	0800bbd7 	.word	0x0800bbd7
 800bb4c:	0800bc33 	.word	0x0800bc33
 800bb50:	0800bc33 	.word	0x0800bc33
 800bb54:	0800bbdf 	.word	0x0800bbdf
 800bb58:	0800bc33 	.word	0x0800bc33
 800bb5c:	0800bc33 	.word	0x0800bc33
 800bb60:	0800bc33 	.word	0x0800bc33
 800bb64:	0800bbef 	.word	0x0800bbef
 800bb68:	0800bc33 	.word	0x0800bc33
 800bb6c:	0800bc33 	.word	0x0800bc33
 800bb70:	0800bc33 	.word	0x0800bc33
 800bb74:	0800bc33 	.word	0x0800bc33
 800bb78:	0800bc33 	.word	0x0800bc33
 800bb7c:	0800bc33 	.word	0x0800bc33
 800bb80:	0800bc33 	.word	0x0800bc33
 800bb84:	0800bbff 	.word	0x0800bbff
 800bb88:	0800bc33 	.word	0x0800bc33
 800bb8c:	0800bc33 	.word	0x0800bc33
 800bb90:	0800bc33 	.word	0x0800bc33
 800bb94:	0800bc33 	.word	0x0800bc33
 800bb98:	0800bc33 	.word	0x0800bc33
 800bb9c:	0800bc33 	.word	0x0800bc33
 800bba0:	0800bc33 	.word	0x0800bc33
 800bba4:	0800bc33 	.word	0x0800bc33
 800bba8:	0800bc33 	.word	0x0800bc33
 800bbac:	0800bc33 	.word	0x0800bc33
 800bbb0:	0800bc33 	.word	0x0800bc33
 800bbb4:	0800bc33 	.word	0x0800bc33
 800bbb8:	0800bc33 	.word	0x0800bc33
 800bbbc:	0800bc33 	.word	0x0800bc33
 800bbc0:	0800bc33 	.word	0x0800bc33
 800bbc4:	0800bc25 	.word	0x0800bc25
 800bbc8:	2b40      	cmp	r3, #64	; 0x40
 800bbca:	d02e      	beq.n	800bc2a <UART_SetConfig+0xab2>
 800bbcc:	e031      	b.n	800bc32 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbce:	f7fa ff03 	bl	80069d8 <HAL_RCC_GetPCLK1Freq>
 800bbd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bbd4:	e033      	b.n	800bc3e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bbd6:	f7fa ff15 	bl	8006a04 <HAL_RCC_GetPCLK2Freq>
 800bbda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bbdc:	e02f      	b.n	800bc3e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fc fdd0 	bl	8008788 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbec:	e027      	b.n	800bc3e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbee:	f107 0318 	add.w	r3, r7, #24
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7fc ff1c 	bl	8008a30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bbf8:	69fb      	ldr	r3, [r7, #28]
 800bbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbfc:	e01f      	b.n	800bc3e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbfe:	4b69      	ldr	r3, [pc, #420]	; (800bda4 <UART_SetConfig+0xc2c>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f003 0320 	and.w	r3, r3, #32
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d009      	beq.n	800bc1e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc0a:	4b66      	ldr	r3, [pc, #408]	; (800bda4 <UART_SetConfig+0xc2c>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	08db      	lsrs	r3, r3, #3
 800bc10:	f003 0303 	and.w	r3, r3, #3
 800bc14:	4a64      	ldr	r2, [pc, #400]	; (800bda8 <UART_SetConfig+0xc30>)
 800bc16:	fa22 f303 	lsr.w	r3, r2, r3
 800bc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc1c:	e00f      	b.n	800bc3e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800bc1e:	4b62      	ldr	r3, [pc, #392]	; (800bda8 <UART_SetConfig+0xc30>)
 800bc20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc22:	e00c      	b.n	800bc3e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc24:	4b61      	ldr	r3, [pc, #388]	; (800bdac <UART_SetConfig+0xc34>)
 800bc26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc28:	e009      	b.n	800bc3e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc30:	e005      	b.n	800bc3e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800bc32:	2300      	movs	r3, #0
 800bc34:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bc36:	2301      	movs	r3, #1
 800bc38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bc3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	f000 80ea 	beq.w	800be1a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4a:	4a55      	ldr	r2, [pc, #340]	; (800bda0 <UART_SetConfig+0xc28>)
 800bc4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc50:	461a      	mov	r2, r3
 800bc52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc54:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc58:	005a      	lsls	r2, r3, #1
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	085b      	lsrs	r3, r3, #1
 800bc60:	441a      	add	r2, r3
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc6a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6e:	2b0f      	cmp	r3, #15
 800bc70:	d916      	bls.n	800bca0 <UART_SetConfig+0xb28>
 800bc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc78:	d212      	bcs.n	800bca0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	f023 030f 	bic.w	r3, r3, #15
 800bc82:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc86:	085b      	lsrs	r3, r3, #1
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	f003 0307 	and.w	r3, r3, #7
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bc92:	4313      	orrs	r3, r2
 800bc94:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bc9c:	60da      	str	r2, [r3, #12]
 800bc9e:	e0bc      	b.n	800be1a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bca0:	2301      	movs	r3, #1
 800bca2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bca6:	e0b8      	b.n	800be1a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bca8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bcac:	2b20      	cmp	r3, #32
 800bcae:	dc4b      	bgt.n	800bd48 <UART_SetConfig+0xbd0>
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f2c0 8087 	blt.w	800bdc4 <UART_SetConfig+0xc4c>
 800bcb6:	2b20      	cmp	r3, #32
 800bcb8:	f200 8084 	bhi.w	800bdc4 <UART_SetConfig+0xc4c>
 800bcbc:	a201      	add	r2, pc, #4	; (adr r2, 800bcc4 <UART_SetConfig+0xb4c>)
 800bcbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc2:	bf00      	nop
 800bcc4:	0800bd4f 	.word	0x0800bd4f
 800bcc8:	0800bd57 	.word	0x0800bd57
 800bccc:	0800bdc5 	.word	0x0800bdc5
 800bcd0:	0800bdc5 	.word	0x0800bdc5
 800bcd4:	0800bd5f 	.word	0x0800bd5f
 800bcd8:	0800bdc5 	.word	0x0800bdc5
 800bcdc:	0800bdc5 	.word	0x0800bdc5
 800bce0:	0800bdc5 	.word	0x0800bdc5
 800bce4:	0800bd6f 	.word	0x0800bd6f
 800bce8:	0800bdc5 	.word	0x0800bdc5
 800bcec:	0800bdc5 	.word	0x0800bdc5
 800bcf0:	0800bdc5 	.word	0x0800bdc5
 800bcf4:	0800bdc5 	.word	0x0800bdc5
 800bcf8:	0800bdc5 	.word	0x0800bdc5
 800bcfc:	0800bdc5 	.word	0x0800bdc5
 800bd00:	0800bdc5 	.word	0x0800bdc5
 800bd04:	0800bd7f 	.word	0x0800bd7f
 800bd08:	0800bdc5 	.word	0x0800bdc5
 800bd0c:	0800bdc5 	.word	0x0800bdc5
 800bd10:	0800bdc5 	.word	0x0800bdc5
 800bd14:	0800bdc5 	.word	0x0800bdc5
 800bd18:	0800bdc5 	.word	0x0800bdc5
 800bd1c:	0800bdc5 	.word	0x0800bdc5
 800bd20:	0800bdc5 	.word	0x0800bdc5
 800bd24:	0800bdc5 	.word	0x0800bdc5
 800bd28:	0800bdc5 	.word	0x0800bdc5
 800bd2c:	0800bdc5 	.word	0x0800bdc5
 800bd30:	0800bdc5 	.word	0x0800bdc5
 800bd34:	0800bdc5 	.word	0x0800bdc5
 800bd38:	0800bdc5 	.word	0x0800bdc5
 800bd3c:	0800bdc5 	.word	0x0800bdc5
 800bd40:	0800bdc5 	.word	0x0800bdc5
 800bd44:	0800bdb7 	.word	0x0800bdb7
 800bd48:	2b40      	cmp	r3, #64	; 0x40
 800bd4a:	d037      	beq.n	800bdbc <UART_SetConfig+0xc44>
 800bd4c:	e03a      	b.n	800bdc4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd4e:	f7fa fe43 	bl	80069d8 <HAL_RCC_GetPCLK1Freq>
 800bd52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bd54:	e03c      	b.n	800bdd0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd56:	f7fa fe55 	bl	8006a04 <HAL_RCC_GetPCLK2Freq>
 800bd5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bd5c:	e038      	b.n	800bdd0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7fc fd10 	bl	8008788 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd6c:	e030      	b.n	800bdd0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd6e:	f107 0318 	add.w	r3, r7, #24
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7fc fe5c 	bl	8008a30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bd78:	69fb      	ldr	r3, [r7, #28]
 800bd7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd7c:	e028      	b.n	800bdd0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd7e:	4b09      	ldr	r3, [pc, #36]	; (800bda4 <UART_SetConfig+0xc2c>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f003 0320 	and.w	r3, r3, #32
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d012      	beq.n	800bdb0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bd8a:	4b06      	ldr	r3, [pc, #24]	; (800bda4 <UART_SetConfig+0xc2c>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	08db      	lsrs	r3, r3, #3
 800bd90:	f003 0303 	and.w	r3, r3, #3
 800bd94:	4a04      	ldr	r2, [pc, #16]	; (800bda8 <UART_SetConfig+0xc30>)
 800bd96:	fa22 f303 	lsr.w	r3, r2, r3
 800bd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bd9c:	e018      	b.n	800bdd0 <UART_SetConfig+0xc58>
 800bd9e:	bf00      	nop
 800bda0:	0800cb10 	.word	0x0800cb10
 800bda4:	58024400 	.word	0x58024400
 800bda8:	03d09000 	.word	0x03d09000
 800bdac:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800bdb0:	4b24      	ldr	r3, [pc, #144]	; (800be44 <UART_SetConfig+0xccc>)
 800bdb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdb4:	e00c      	b.n	800bdd0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bdb6:	4b24      	ldr	r3, [pc, #144]	; (800be48 <UART_SetConfig+0xcd0>)
 800bdb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdba:	e009      	b.n	800bdd0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bdbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdc2:	e005      	b.n	800bdd0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bdce:	bf00      	nop
    }

    if (pclk != 0U)
 800bdd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d021      	beq.n	800be1a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdda:	4a1c      	ldr	r2, [pc, #112]	; (800be4c <UART_SetConfig+0xcd4>)
 800bddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bde0:	461a      	mov	r2, r3
 800bde2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde4:	fbb3 f2f2 	udiv	r2, r3, r2
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	085b      	lsrs	r3, r3, #1
 800bdee:	441a      	add	r2, r3
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdf8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfc:	2b0f      	cmp	r3, #15
 800bdfe:	d909      	bls.n	800be14 <UART_SetConfig+0xc9c>
 800be00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be06:	d205      	bcs.n	800be14 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0a:	b29a      	uxth	r2, r3
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	60da      	str	r2, [r3, #12]
 800be12:	e002      	b.n	800be1a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800be14:	2301      	movs	r3, #1
 800be16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	2201      	movs	r2, #1
 800be1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	2201      	movs	r2, #1
 800be26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	2200      	movs	r2, #0
 800be2e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	2200      	movs	r2, #0
 800be34:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800be36:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3748      	adds	r7, #72	; 0x48
 800be3e:	46bd      	mov	sp, r7
 800be40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be44:	03d09000 	.word	0x03d09000
 800be48:	003d0900 	.word	0x003d0900
 800be4c:	0800cb10 	.word	0x0800cb10

0800be50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be50:	b480      	push	{r7}
 800be52:	b083      	sub	sp, #12
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be5c:	f003 0301 	and.w	r3, r3, #1
 800be60:	2b00      	cmp	r3, #0
 800be62:	d00a      	beq.n	800be7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	430a      	orrs	r2, r1
 800be78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be7e:	f003 0302 	and.w	r3, r3, #2
 800be82:	2b00      	cmp	r3, #0
 800be84:	d00a      	beq.n	800be9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	430a      	orrs	r2, r1
 800be9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea0:	f003 0304 	and.w	r3, r3, #4
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00a      	beq.n	800bebe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	430a      	orrs	r2, r1
 800bebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bec2:	f003 0308 	and.w	r3, r3, #8
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d00a      	beq.n	800bee0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	430a      	orrs	r2, r1
 800bede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bee4:	f003 0310 	and.w	r3, r3, #16
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d00a      	beq.n	800bf02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	430a      	orrs	r2, r1
 800bf00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf06:	f003 0320 	and.w	r3, r3, #32
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00a      	beq.n	800bf24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	430a      	orrs	r2, r1
 800bf22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d01a      	beq.n	800bf66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	430a      	orrs	r2, r1
 800bf44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf4e:	d10a      	bne.n	800bf66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	430a      	orrs	r2, r1
 800bf64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d00a      	beq.n	800bf88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	430a      	orrs	r2, r1
 800bf86:	605a      	str	r2, [r3, #4]
  }
}
 800bf88:	bf00      	nop
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b098      	sub	sp, #96	; 0x60
 800bf98:	af02      	add	r7, sp, #8
 800bf9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bfa4:	f7f5 fc0a 	bl	80017bc <HAL_GetTick>
 800bfa8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f003 0308 	and.w	r3, r3, #8
 800bfb4:	2b08      	cmp	r3, #8
 800bfb6:	d12f      	bne.n	800c018 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bfbc:	9300      	str	r3, [sp, #0]
 800bfbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 f88e 	bl	800c0e8 <UART_WaitOnFlagUntilTimeout>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d022      	beq.n	800c018 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfda:	e853 3f00 	ldrex	r3, [r3]
 800bfde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bfe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfe6:	653b      	str	r3, [r7, #80]	; 0x50
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	461a      	mov	r2, r3
 800bfee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bff0:	647b      	str	r3, [r7, #68]	; 0x44
 800bff2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bff8:	e841 2300 	strex	r3, r2, [r1]
 800bffc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c000:	2b00      	cmp	r3, #0
 800c002:	d1e6      	bne.n	800bfd2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2220      	movs	r2, #32
 800c008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c014:	2303      	movs	r3, #3
 800c016:	e063      	b.n	800c0e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f003 0304 	and.w	r3, r3, #4
 800c022:	2b04      	cmp	r3, #4
 800c024:	d149      	bne.n	800c0ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c026:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c02a:	9300      	str	r3, [sp, #0]
 800c02c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c02e:	2200      	movs	r2, #0
 800c030:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 f857 	bl	800c0e8 <UART_WaitOnFlagUntilTimeout>
 800c03a:	4603      	mov	r3, r0
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d03c      	beq.n	800c0ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c048:	e853 3f00 	ldrex	r3, [r3]
 800c04c:	623b      	str	r3, [r7, #32]
   return(result);
 800c04e:	6a3b      	ldr	r3, [r7, #32]
 800c050:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c054:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	461a      	mov	r2, r3
 800c05c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c05e:	633b      	str	r3, [r7, #48]	; 0x30
 800c060:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c066:	e841 2300 	strex	r3, r2, [r1]
 800c06a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1e6      	bne.n	800c040 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	3308      	adds	r3, #8
 800c078:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	e853 3f00 	ldrex	r3, [r3]
 800c080:	60fb      	str	r3, [r7, #12]
   return(result);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f023 0301 	bic.w	r3, r3, #1
 800c088:	64bb      	str	r3, [r7, #72]	; 0x48
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	3308      	adds	r3, #8
 800c090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c092:	61fa      	str	r2, [r7, #28]
 800c094:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c096:	69b9      	ldr	r1, [r7, #24]
 800c098:	69fa      	ldr	r2, [r7, #28]
 800c09a:	e841 2300 	strex	r3, r2, [r1]
 800c09e:	617b      	str	r3, [r7, #20]
   return(result);
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1e5      	bne.n	800c072 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2220      	movs	r2, #32
 800c0aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0b6:	2303      	movs	r3, #3
 800c0b8:	e012      	b.n	800c0e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2220      	movs	r2, #32
 800c0be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2220      	movs	r2, #32
 800c0c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c0de:	2300      	movs	r3, #0
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3758      	adds	r7, #88	; 0x58
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	60f8      	str	r0, [r7, #12]
 800c0f0:	60b9      	str	r1, [r7, #8]
 800c0f2:	603b      	str	r3, [r7, #0]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0f8:	e049      	b.n	800c18e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c100:	d045      	beq.n	800c18e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c102:	f7f5 fb5b 	bl	80017bc <HAL_GetTick>
 800c106:	4602      	mov	r2, r0
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	69ba      	ldr	r2, [r7, #24]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d302      	bcc.n	800c118 <UART_WaitOnFlagUntilTimeout+0x30>
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d101      	bne.n	800c11c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c118:	2303      	movs	r3, #3
 800c11a:	e048      	b.n	800c1ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f003 0304 	and.w	r3, r3, #4
 800c126:	2b00      	cmp	r3, #0
 800c128:	d031      	beq.n	800c18e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	69db      	ldr	r3, [r3, #28]
 800c130:	f003 0308 	and.w	r3, r3, #8
 800c134:	2b08      	cmp	r3, #8
 800c136:	d110      	bne.n	800c15a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2208      	movs	r2, #8
 800c13e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800c140:	68f8      	ldr	r0, [r7, #12]
 800c142:	f000 f921 	bl	800c388 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2208      	movs	r2, #8
 800c14a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2200      	movs	r2, #0
 800c152:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800c156:	2301      	movs	r3, #1
 800c158:	e029      	b.n	800c1ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	69db      	ldr	r3, [r3, #28]
 800c160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c168:	d111      	bne.n	800c18e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c174:	68f8      	ldr	r0, [r7, #12]
 800c176:	f000 f907 	bl	800c388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2220      	movs	r2, #32
 800c17e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c18a:	2303      	movs	r3, #3
 800c18c:	e00f      	b.n	800c1ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	69da      	ldr	r2, [r3, #28]
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	4013      	ands	r3, r2
 800c198:	68ba      	ldr	r2, [r7, #8]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	bf0c      	ite	eq
 800c19e:	2301      	moveq	r3, #1
 800c1a0:	2300      	movne	r3, #0
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	79fb      	ldrb	r3, [r7, #7]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d0a6      	beq.n	800c0fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
	...

0800c1b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b096      	sub	sp, #88	; 0x58
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	4613      	mov	r3, r2
 800c1c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	88fa      	ldrh	r2, [r7, #6]
 800c1d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2222      	movs	r2, #34	; 0x22
 800c1e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d02d      	beq.n	800c24a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1f4:	4a40      	ldr	r2, [pc, #256]	; (800c2f8 <UART_Start_Receive_DMA+0x140>)
 800c1f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1fe:	4a3f      	ldr	r2, [pc, #252]	; (800c2fc <UART_Start_Receive_DMA+0x144>)
 800c200:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c208:	4a3d      	ldr	r2, [pc, #244]	; (800c300 <UART_Start_Receive_DMA+0x148>)
 800c20a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c212:	2200      	movs	r2, #0
 800c214:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	3324      	adds	r3, #36	; 0x24
 800c222:	4619      	mov	r1, r3
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c228:	461a      	mov	r2, r3
 800c22a:	88fb      	ldrh	r3, [r7, #6]
 800c22c:	f7f6 fece 	bl	8002fcc <HAL_DMA_Start_IT>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d009      	beq.n	800c24a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2210      	movs	r2, #16
 800c23a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2220      	movs	r2, #32
 800c242:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800c246:	2301      	movs	r3, #1
 800c248:	e051      	b.n	800c2ee <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	691b      	ldr	r3, [r3, #16]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d018      	beq.n	800c284 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c25a:	e853 3f00 	ldrex	r3, [r3]
 800c25e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c266:	657b      	str	r3, [r7, #84]	; 0x54
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	461a      	mov	r2, r3
 800c26e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c270:	64bb      	str	r3, [r7, #72]	; 0x48
 800c272:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c274:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c276:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c278:	e841 2300 	strex	r3, r2, [r1]
 800c27c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c27e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c280:	2b00      	cmp	r3, #0
 800c282:	d1e6      	bne.n	800c252 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	3308      	adds	r3, #8
 800c28a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28e:	e853 3f00 	ldrex	r3, [r3]
 800c292:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c296:	f043 0301 	orr.w	r3, r3, #1
 800c29a:	653b      	str	r3, [r7, #80]	; 0x50
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	3308      	adds	r3, #8
 800c2a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c2a4:	637a      	str	r2, [r7, #52]	; 0x34
 800c2a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2ac:	e841 2300 	strex	r3, r2, [r1]
 800c2b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1e5      	bne.n	800c284 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	3308      	adds	r3, #8
 800c2be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	e853 3f00 	ldrex	r3, [r3]
 800c2c6:	613b      	str	r3, [r7, #16]
   return(result);
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	3308      	adds	r3, #8
 800c2d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c2d8:	623a      	str	r2, [r7, #32]
 800c2da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2dc:	69f9      	ldr	r1, [r7, #28]
 800c2de:	6a3a      	ldr	r2, [r7, #32]
 800c2e0:	e841 2300 	strex	r3, r2, [r1]
 800c2e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1e5      	bne.n	800c2b8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3758      	adds	r7, #88	; 0x58
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	0800c507 	.word	0x0800c507
 800c2fc:	0800c62f 	.word	0x0800c62f
 800c300:	0800c66d 	.word	0x0800c66d

0800c304 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c304:	b480      	push	{r7}
 800c306:	b08f      	sub	sp, #60	; 0x3c
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c312:	6a3b      	ldr	r3, [r7, #32]
 800c314:	e853 3f00 	ldrex	r3, [r3]
 800c318:	61fb      	str	r3, [r7, #28]
   return(result);
 800c31a:	69fb      	ldr	r3, [r7, #28]
 800c31c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c320:	637b      	str	r3, [r7, #52]	; 0x34
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	461a      	mov	r2, r3
 800c328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c32a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c32c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c332:	e841 2300 	strex	r3, r2, [r1]
 800c336:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d1e6      	bne.n	800c30c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	3308      	adds	r3, #8
 800c344:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	e853 3f00 	ldrex	r3, [r3]
 800c34c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c354:	633b      	str	r3, [r7, #48]	; 0x30
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	3308      	adds	r3, #8
 800c35c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c35e:	61ba      	str	r2, [r7, #24]
 800c360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c362:	6979      	ldr	r1, [r7, #20]
 800c364:	69ba      	ldr	r2, [r7, #24]
 800c366:	e841 2300 	strex	r3, r2, [r1]
 800c36a:	613b      	str	r3, [r7, #16]
   return(result);
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d1e5      	bne.n	800c33e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2220      	movs	r2, #32
 800c376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800c37a:	bf00      	nop
 800c37c:	373c      	adds	r7, #60	; 0x3c
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
	...

0800c388 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c388:	b480      	push	{r7}
 800c38a:	b095      	sub	sp, #84	; 0x54
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c398:	e853 3f00 	ldrex	r3, [r3]
 800c39c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3ae:	643b      	str	r3, [r7, #64]	; 0x40
 800c3b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c3b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3b6:	e841 2300 	strex	r3, r2, [r1]
 800c3ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d1e6      	bne.n	800c390 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	3308      	adds	r3, #8
 800c3c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ca:	6a3b      	ldr	r3, [r7, #32]
 800c3cc:	e853 3f00 	ldrex	r3, [r3]
 800c3d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3d2:	69fa      	ldr	r2, [r7, #28]
 800c3d4:	4b1e      	ldr	r3, [pc, #120]	; (800c450 <UART_EndRxTransfer+0xc8>)
 800c3d6:	4013      	ands	r3, r2
 800c3d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	3308      	adds	r3, #8
 800c3e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c3e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3ea:	e841 2300 	strex	r3, r2, [r1]
 800c3ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1e5      	bne.n	800c3c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d118      	bne.n	800c430 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	e853 3f00 	ldrex	r3, [r3]
 800c40a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	f023 0310 	bic.w	r3, r3, #16
 800c412:	647b      	str	r3, [r7, #68]	; 0x44
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	461a      	mov	r2, r3
 800c41a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c41c:	61bb      	str	r3, [r7, #24]
 800c41e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c420:	6979      	ldr	r1, [r7, #20]
 800c422:	69ba      	ldr	r2, [r7, #24]
 800c424:	e841 2300 	strex	r3, r2, [r1]
 800c428:	613b      	str	r3, [r7, #16]
   return(result);
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d1e6      	bne.n	800c3fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2220      	movs	r2, #32
 800c434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2200      	movs	r2, #0
 800c442:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c444:	bf00      	nop
 800c446:	3754      	adds	r7, #84	; 0x54
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr
 800c450:	effffffe 	.word	0xeffffffe

0800c454 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b090      	sub	sp, #64	; 0x40
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c460:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	69db      	ldr	r3, [r3, #28]
 800c466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c46a:	d037      	beq.n	800c4dc <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800c46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c46e:	2200      	movs	r2, #0
 800c470:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	3308      	adds	r3, #8
 800c47a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47e:	e853 3f00 	ldrex	r3, [r3]
 800c482:	623b      	str	r3, [r7, #32]
   return(result);
 800c484:	6a3b      	ldr	r3, [r7, #32]
 800c486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c48a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c48c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	3308      	adds	r3, #8
 800c492:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c494:	633a      	str	r2, [r7, #48]	; 0x30
 800c496:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c498:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c49a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c49c:	e841 2300 	strex	r3, r2, [r1]
 800c4a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d1e5      	bne.n	800c474 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c4a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	e853 3f00 	ldrex	r3, [r3]
 800c4b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4bc:	637b      	str	r3, [r7, #52]	; 0x34
 800c4be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c6:	61fb      	str	r3, [r7, #28]
 800c4c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ca:	69b9      	ldr	r1, [r7, #24]
 800c4cc:	69fa      	ldr	r2, [r7, #28]
 800c4ce:	e841 2300 	strex	r3, r2, [r1]
 800c4d2:	617b      	str	r3, [r7, #20]
   return(result);
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1e6      	bne.n	800c4a8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c4da:	e002      	b.n	800c4e2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800c4dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c4de:	f7fe fe19 	bl	800b114 <HAL_UART_TxCpltCallback>
}
 800c4e2:	bf00      	nop
 800c4e4:	3740      	adds	r7, #64	; 0x40
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b084      	sub	sp, #16
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	f7fe fe15 	bl	800b128 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4fe:	bf00      	nop
 800c500:	3710      	adds	r7, #16
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b09c      	sub	sp, #112	; 0x70
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c512:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	69db      	ldr	r3, [r3, #28]
 800c518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c51c:	d071      	beq.n	800c602 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c51e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c520:	2200      	movs	r2, #0
 800c522:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c52c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c52e:	e853 3f00 	ldrex	r3, [r3]
 800c532:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c536:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c53a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c53c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	461a      	mov	r2, r3
 800c542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c544:	65bb      	str	r3, [r7, #88]	; 0x58
 800c546:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c548:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c54a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c54c:	e841 2300 	strex	r3, r2, [r1]
 800c550:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c554:	2b00      	cmp	r3, #0
 800c556:	d1e6      	bne.n	800c526 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	3308      	adds	r3, #8
 800c55e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c562:	e853 3f00 	ldrex	r3, [r3]
 800c566:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c56a:	f023 0301 	bic.w	r3, r3, #1
 800c56e:	667b      	str	r3, [r7, #100]	; 0x64
 800c570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	3308      	adds	r3, #8
 800c576:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c578:	647a      	str	r2, [r7, #68]	; 0x44
 800c57a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c57c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c57e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c580:	e841 2300 	strex	r3, r2, [r1]
 800c584:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d1e5      	bne.n	800c558 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c58c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	3308      	adds	r3, #8
 800c592:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c596:	e853 3f00 	ldrex	r3, [r3]
 800c59a:	623b      	str	r3, [r7, #32]
   return(result);
 800c59c:	6a3b      	ldr	r3, [r7, #32]
 800c59e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5a2:	663b      	str	r3, [r7, #96]	; 0x60
 800c5a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	3308      	adds	r3, #8
 800c5aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c5ac:	633a      	str	r2, [r7, #48]	; 0x30
 800c5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5b4:	e841 2300 	strex	r3, r2, [r1]
 800c5b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1e5      	bne.n	800c58c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c5c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5c2:	2220      	movs	r2, #32
 800c5c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d118      	bne.n	800c602 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	e853 3f00 	ldrex	r3, [r3]
 800c5dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f023 0310 	bic.w	r3, r3, #16
 800c5e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5ee:	61fb      	str	r3, [r7, #28]
 800c5f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f2:	69b9      	ldr	r1, [r7, #24]
 800c5f4:	69fa      	ldr	r2, [r7, #28]
 800c5f6:	e841 2300 	strex	r3, r2, [r1]
 800c5fa:	617b      	str	r3, [r7, #20]
   return(result);
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d1e6      	bne.n	800c5d0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c604:	2200      	movs	r2, #0
 800c606:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c60a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d107      	bne.n	800c620 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c612:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c616:	4619      	mov	r1, r3
 800c618:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c61a:	f7f4 fee1 	bl	80013e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c61e:	e002      	b.n	800c626 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800c620:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c622:	f7fe fd8b 	bl	800b13c <HAL_UART_RxCpltCallback>
}
 800c626:	bf00      	nop
 800c628:	3770      	adds	r7, #112	; 0x70
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}

0800c62e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c62e:	b580      	push	{r7, lr}
 800c630:	b084      	sub	sp, #16
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c63a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2201      	movs	r2, #1
 800c640:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c646:	2b01      	cmp	r3, #1
 800c648:	d109      	bne.n	800c65e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c650:	085b      	lsrs	r3, r3, #1
 800c652:	b29b      	uxth	r3, r3
 800c654:	4619      	mov	r1, r3
 800c656:	68f8      	ldr	r0, [r7, #12]
 800c658:	f7f4 fec2 	bl	80013e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c65c:	e002      	b.n	800c664 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	f7fe fd76 	bl	800b150 <HAL_UART_RxHalfCpltCallback>
}
 800c664:	bf00      	nop
 800c666:	3710      	adds	r7, #16
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b086      	sub	sp, #24
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c678:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c680:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c688:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c694:	2b80      	cmp	r3, #128	; 0x80
 800c696:	d109      	bne.n	800c6ac <UART_DMAError+0x40>
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	2b21      	cmp	r3, #33	; 0x21
 800c69c:	d106      	bne.n	800c6ac <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c6a6:	6978      	ldr	r0, [r7, #20]
 800c6a8:	f7ff fe2c 	bl	800c304 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	689b      	ldr	r3, [r3, #8]
 800c6b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6b6:	2b40      	cmp	r3, #64	; 0x40
 800c6b8:	d109      	bne.n	800c6ce <UART_DMAError+0x62>
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2b22      	cmp	r3, #34	; 0x22
 800c6be:	d106      	bne.n	800c6ce <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c6c8:	6978      	ldr	r0, [r7, #20]
 800c6ca:	f7ff fe5d 	bl	800c388 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6d4:	f043 0210 	orr.w	r2, r3, #16
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6de:	6978      	ldr	r0, [r7, #20]
 800c6e0:	f7fe fd40 	bl	800b164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6e4:	bf00      	nop
 800c6e6:	3718      	adds	r7, #24
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2200      	movs	r2, #0
 800c706:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f7fe fd2a 	bl	800b164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c710:	bf00      	nop
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b088      	sub	sp, #32
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	e853 3f00 	ldrex	r3, [r3]
 800c72c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c734:	61fb      	str	r3, [r7, #28]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	461a      	mov	r2, r3
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	61bb      	str	r3, [r7, #24]
 800c740:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c742:	6979      	ldr	r1, [r7, #20]
 800c744:	69ba      	ldr	r2, [r7, #24]
 800c746:	e841 2300 	strex	r3, r2, [r1]
 800c74a:	613b      	str	r3, [r7, #16]
   return(result);
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d1e6      	bne.n	800c720 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2220      	movs	r2, #32
 800c756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f7fe fcd7 	bl	800b114 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c766:	bf00      	nop
 800c768:	3720      	adds	r7, #32
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}

0800c76e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c76e:	b480      	push	{r7}
 800c770:	b083      	sub	sp, #12
 800c772:	af00      	add	r7, sp, #0
 800c774:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c776:	bf00      	nop
 800c778:	370c      	adds	r7, #12
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr

0800c782 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c782:	b480      	push	{r7}
 800c784:	b083      	sub	sp, #12
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c78a:	bf00      	nop
 800c78c:	370c      	adds	r7, #12
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr

0800c796 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c796:	b480      	push	{r7}
 800c798:	b083      	sub	sp, #12
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c79e:	bf00      	nop
 800c7a0:	370c      	adds	r7, #12
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr

0800c7aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c7aa:	b480      	push	{r7}
 800c7ac:	b085      	sub	sp, #20
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d101      	bne.n	800c7c0 <HAL_UARTEx_DisableFifoMode+0x16>
 800c7bc:	2302      	movs	r3, #2
 800c7be:	e027      	b.n	800c810 <HAL_UARTEx_DisableFifoMode+0x66>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2224      	movs	r2, #36	; 0x24
 800c7cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	681a      	ldr	r2, [r3, #0]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f022 0201 	bic.w	r2, r2, #1
 800c7e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c7ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	68fa      	ldr	r2, [r7, #12]
 800c7fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2220      	movs	r2, #32
 800c802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c80e:	2300      	movs	r3, #0
}
 800c810:	4618      	mov	r0, r3
 800c812:	3714      	adds	r7, #20
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d101      	bne.n	800c834 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c830:	2302      	movs	r3, #2
 800c832:	e02d      	b.n	800c890 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2201      	movs	r2, #1
 800c838:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2224      	movs	r2, #36	; 0x24
 800c840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f022 0201 	bic.w	r2, r2, #1
 800c85a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	683a      	ldr	r2, [r7, #0]
 800c86c:	430a      	orrs	r2, r1
 800c86e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f000 f8a3 	bl	800c9bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	68fa      	ldr	r2, [r7, #12]
 800c87c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2220      	movs	r2, #32
 800c882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2200      	movs	r2, #0
 800c88a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c88e:	2300      	movs	r3, #0
}
 800c890:	4618      	mov	r0, r3
 800c892:	3710      	adds	r7, #16
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d101      	bne.n	800c8b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c8ac:	2302      	movs	r3, #2
 800c8ae:	e02d      	b.n	800c90c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2224      	movs	r2, #36	; 0x24
 800c8bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f022 0201 	bic.w	r2, r2, #1
 800c8d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	683a      	ldr	r2, [r7, #0]
 800c8e8:	430a      	orrs	r2, r1
 800c8ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 f865 	bl	800c9bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	68fa      	ldr	r2, [r7, #12]
 800c8f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2220      	movs	r2, #32
 800c8fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2200      	movs	r2, #0
 800c906:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c90a:	2300      	movs	r3, #0
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3710      	adds	r7, #16
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b08c      	sub	sp, #48	; 0x30
 800c918:	af00      	add	r7, sp, #0
 800c91a:	60f8      	str	r0, [r7, #12]
 800c91c:	60b9      	str	r1, [r7, #8]
 800c91e:	4613      	mov	r3, r2
 800c920:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c928:	2b20      	cmp	r3, #32
 800c92a:	d142      	bne.n	800c9b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d002      	beq.n	800c938 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800c932:	88fb      	ldrh	r3, [r7, #6]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d101      	bne.n	800c93c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800c938:	2301      	movs	r3, #1
 800c93a:	e03b      	b.n	800c9b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2201      	movs	r2, #1
 800c940:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2200      	movs	r2, #0
 800c946:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c948:	88fb      	ldrh	r3, [r7, #6]
 800c94a:	461a      	mov	r2, r3
 800c94c:	68b9      	ldr	r1, [r7, #8]
 800c94e:	68f8      	ldr	r0, [r7, #12]
 800c950:	f7ff fc32 	bl	800c1b8 <UART_Start_Receive_DMA>
 800c954:	4603      	mov	r3, r0
 800c956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c95a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d124      	bne.n	800c9ac <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c966:	2b01      	cmp	r3, #1
 800c968:	d11d      	bne.n	800c9a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	2210      	movs	r2, #16
 800c970:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c978:	69bb      	ldr	r3, [r7, #24]
 800c97a:	e853 3f00 	ldrex	r3, [r3]
 800c97e:	617b      	str	r3, [r7, #20]
   return(result);
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	f043 0310 	orr.w	r3, r3, #16
 800c986:	62bb      	str	r3, [r7, #40]	; 0x28
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	461a      	mov	r2, r3
 800c98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c990:	627b      	str	r3, [r7, #36]	; 0x24
 800c992:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c994:	6a39      	ldr	r1, [r7, #32]
 800c996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c998:	e841 2300 	strex	r3, r2, [r1]
 800c99c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c99e:	69fb      	ldr	r3, [r7, #28]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d1e6      	bne.n	800c972 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800c9a4:	e002      	b.n	800c9ac <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800c9ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9b0:	e000      	b.n	800c9b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c9b2:	2302      	movs	r3, #2
  }
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3730      	adds	r7, #48	; 0x30
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d108      	bne.n	800c9de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c9dc:	e031      	b.n	800ca42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c9de:	2310      	movs	r3, #16
 800c9e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c9e2:	2310      	movs	r3, #16
 800c9e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	0e5b      	lsrs	r3, r3, #25
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	f003 0307 	and.w	r3, r3, #7
 800c9f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	0f5b      	lsrs	r3, r3, #29
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	f003 0307 	and.w	r3, r3, #7
 800ca04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca06:	7bbb      	ldrb	r3, [r7, #14]
 800ca08:	7b3a      	ldrb	r2, [r7, #12]
 800ca0a:	4911      	ldr	r1, [pc, #68]	; (800ca50 <UARTEx_SetNbDataToProcess+0x94>)
 800ca0c:	5c8a      	ldrb	r2, [r1, r2]
 800ca0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ca12:	7b3a      	ldrb	r2, [r7, #12]
 800ca14:	490f      	ldr	r1, [pc, #60]	; (800ca54 <UARTEx_SetNbDataToProcess+0x98>)
 800ca16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca18:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca1c:	b29a      	uxth	r2, r3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca24:	7bfb      	ldrb	r3, [r7, #15]
 800ca26:	7b7a      	ldrb	r2, [r7, #13]
 800ca28:	4909      	ldr	r1, [pc, #36]	; (800ca50 <UARTEx_SetNbDataToProcess+0x94>)
 800ca2a:	5c8a      	ldrb	r2, [r1, r2]
 800ca2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ca30:	7b7a      	ldrb	r2, [r7, #13]
 800ca32:	4908      	ldr	r1, [pc, #32]	; (800ca54 <UARTEx_SetNbDataToProcess+0x98>)
 800ca34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca36:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ca42:	bf00      	nop
 800ca44:	3714      	adds	r7, #20
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	0800cb28 	.word	0x0800cb28
 800ca54:	0800cb30 	.word	0x0800cb30

0800ca58 <__libc_init_array>:
 800ca58:	b570      	push	{r4, r5, r6, lr}
 800ca5a:	4d0d      	ldr	r5, [pc, #52]	; (800ca90 <__libc_init_array+0x38>)
 800ca5c:	4c0d      	ldr	r4, [pc, #52]	; (800ca94 <__libc_init_array+0x3c>)
 800ca5e:	1b64      	subs	r4, r4, r5
 800ca60:	10a4      	asrs	r4, r4, #2
 800ca62:	2600      	movs	r6, #0
 800ca64:	42a6      	cmp	r6, r4
 800ca66:	d109      	bne.n	800ca7c <__libc_init_array+0x24>
 800ca68:	4d0b      	ldr	r5, [pc, #44]	; (800ca98 <__libc_init_array+0x40>)
 800ca6a:	4c0c      	ldr	r4, [pc, #48]	; (800ca9c <__libc_init_array+0x44>)
 800ca6c:	f000 f830 	bl	800cad0 <_init>
 800ca70:	1b64      	subs	r4, r4, r5
 800ca72:	10a4      	asrs	r4, r4, #2
 800ca74:	2600      	movs	r6, #0
 800ca76:	42a6      	cmp	r6, r4
 800ca78:	d105      	bne.n	800ca86 <__libc_init_array+0x2e>
 800ca7a:	bd70      	pop	{r4, r5, r6, pc}
 800ca7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca80:	4798      	blx	r3
 800ca82:	3601      	adds	r6, #1
 800ca84:	e7ee      	b.n	800ca64 <__libc_init_array+0xc>
 800ca86:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca8a:	4798      	blx	r3
 800ca8c:	3601      	adds	r6, #1
 800ca8e:	e7f2      	b.n	800ca76 <__libc_init_array+0x1e>
 800ca90:	0800cb40 	.word	0x0800cb40
 800ca94:	0800cb40 	.word	0x0800cb40
 800ca98:	0800cb40 	.word	0x0800cb40
 800ca9c:	0800cb44 	.word	0x0800cb44

0800caa0 <memcmp>:
 800caa0:	b510      	push	{r4, lr}
 800caa2:	3901      	subs	r1, #1
 800caa4:	4402      	add	r2, r0
 800caa6:	4290      	cmp	r0, r2
 800caa8:	d101      	bne.n	800caae <memcmp+0xe>
 800caaa:	2000      	movs	r0, #0
 800caac:	e005      	b.n	800caba <memcmp+0x1a>
 800caae:	7803      	ldrb	r3, [r0, #0]
 800cab0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cab4:	42a3      	cmp	r3, r4
 800cab6:	d001      	beq.n	800cabc <memcmp+0x1c>
 800cab8:	1b18      	subs	r0, r3, r4
 800caba:	bd10      	pop	{r4, pc}
 800cabc:	3001      	adds	r0, #1
 800cabe:	e7f2      	b.n	800caa6 <memcmp+0x6>

0800cac0 <memset>:
 800cac0:	4402      	add	r2, r0
 800cac2:	4603      	mov	r3, r0
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d100      	bne.n	800caca <memset+0xa>
 800cac8:	4770      	bx	lr
 800caca:	f803 1b01 	strb.w	r1, [r3], #1
 800cace:	e7f9      	b.n	800cac4 <memset+0x4>

0800cad0 <_init>:
 800cad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cad2:	bf00      	nop
 800cad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cad6:	bc08      	pop	{r3}
 800cad8:	469e      	mov	lr, r3
 800cada:	4770      	bx	lr

0800cadc <_fini>:
 800cadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cade:	bf00      	nop
 800cae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cae2:	bc08      	pop	{r3}
 800cae4:	469e      	mov	lr, r3
 800cae6:	4770      	bx	lr
