
inzynierka_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a918  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800abc4  0800abc4  0001abc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ac04  0800ac04  0001ac04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ac0c  0800ac0c  0001ac0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ac10  0800ac10  0001ac10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800ac14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002a0  24000010  0800ac24  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002b0  0800ac24  000202b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d899  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003404  00000000  00000000  0003d8d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001598  00000000  00000000  00040ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001440  00000000  00000000  00042278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033ced  00000000  00000000  000436b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ea8f  00000000  00000000  000773a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00154146  00000000  00000000  00095e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e9f7a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005ba8  00000000  00000000  001e9fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800abac 	.word	0x0800abac

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800abac 	.word	0x0800abac

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
 8000610:	615a      	str	r2, [r3, #20]
 8000612:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000614:	4b30      	ldr	r3, [pc, #192]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000616:	4a31      	ldr	r2, [pc, #196]	; (80006dc <MX_ADC1_Init+0xec>)
 8000618:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800061a:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000620:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000626:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062c:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <MX_ADC1_Init+0xe8>)
 800062e:	2204      	movs	r2, #4
 8000630:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000632:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <MX_ADC1_Init+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800063e:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000640:	2201      	movs	r2, #1
 8000642:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000644:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000646:	2200      	movs	r2, #0
 8000648:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <MX_ADC1_Init+0xe8>)
 800064c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000652:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000658:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_ADC1_Init+0xe8>)
 800065c:	2203      	movs	r2, #3
 800065e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800066c:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_ADC1_Init+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	4818      	ldr	r0, [pc, #96]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000676:	f001 fa35 	bl	8001ae4 <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000680:	f000 fb1e 	bl	8000cc0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	4619      	mov	r1, r3
 800068e:	4812      	ldr	r0, [pc, #72]	; (80006d8 <MX_ADC1_Init+0xe8>)
 8000690:	f001 ff5c 	bl	800254c <HAL_ADCEx_MultiModeConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800069a:	f000 fb11 	bl	8000cc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_ADC1_Init+0xf0>)
 80006a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a2:	2306      	movs	r3, #6
 80006a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80006a6:	2307      	movs	r3, #7
 80006a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006aa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006ae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b0:	2304      	movs	r3, #4
 80006b2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_ADC1_Init+0xe8>)
 80006c2:	f001 fb69 	bl	8001d98 <HAL_ADC_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006cc:	f000 faf8 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	3728      	adds	r7, #40	; 0x28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2400002c 	.word	0x2400002c
 80006dc:	40022000 	.word	0x40022000
 80006e0:	3ef08000 	.word	0x3ef08000

080006e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b0ba      	sub	sp, #232	; 0xe8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	22c0      	movs	r2, #192	; 0xc0
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f00a fa49 	bl	800ab9c <memset>
  if(adcHandle->Instance==ADC1)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a43      	ldr	r2, [pc, #268]	; (800081c <HAL_ADC_MspInit+0x138>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d17e      	bne.n	8000812 <HAL_ADC_MspInit+0x12e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000714:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000718:	f04f 0300 	mov.w	r3, #0
 800071c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000720:	2301      	movs	r3, #1
 8000722:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000724:	2310      	movs	r3, #16
 8000726:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 8000728:	2303      	movs	r3, #3
 800072a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800072c:	2302      	movs	r3, #2
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000734:	23c0      	movs	r3, #192	; 0xc0
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000738:	2300      	movs	r3, #0
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000740:	2300      	movs	r3, #0
 8000742:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000746:	f107 0310 	add.w	r3, r7, #16
 800074a:	4618      	mov	r0, r3
 800074c:	f004 ffba 	bl	80056c4 <HAL_RCCEx_PeriphCLKConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000756:	f000 fab3 	bl	8000cc0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800075a:	4b31      	ldr	r3, [pc, #196]	; (8000820 <HAL_ADC_MspInit+0x13c>)
 800075c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000760:	4a2f      	ldr	r2, [pc, #188]	; (8000820 <HAL_ADC_MspInit+0x13c>)
 8000762:	f043 0320 	orr.w	r3, r3, #32
 8000766:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800076a:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <HAL_ADC_MspInit+0x13c>)
 800076c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000770:	f003 0320 	and.w	r3, r3, #32
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	4b29      	ldr	r3, [pc, #164]	; (8000820 <HAL_ADC_MspInit+0x13c>)
 800077a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800077e:	4a28      	ldr	r2, [pc, #160]	; (8000820 <HAL_ADC_MspInit+0x13c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000788:	4b25      	ldr	r3, [pc, #148]	; (8000820 <HAL_ADC_MspInit+0x13c>)
 800078a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000796:	2308      	movs	r3, #8
 8000798:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800079c:	2303      	movs	r3, #3
 800079e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80007ac:	4619      	mov	r1, r3
 80007ae:	481d      	ldr	r0, [pc, #116]	; (8000824 <HAL_ADC_MspInit+0x140>)
 80007b0:	f003 fda6 	bl	8004300 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007b6:	4a1d      	ldr	r2, [pc, #116]	; (800082c <HAL_ADC_MspInit+0x148>)
 80007b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007bc:	2209      	movs	r2, #9
 80007be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007f6:	480c      	ldr	r0, [pc, #48]	; (8000828 <HAL_ADC_MspInit+0x144>)
 80007f8:	f002 f854 	bl	80028a4 <HAL_DMA_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <HAL_ADC_MspInit+0x122>
    {
      Error_Handler();
 8000802:	f000 fa5d 	bl	8000cc0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_ADC_MspInit+0x144>)
 800080a:	64da      	str	r2, [r3, #76]	; 0x4c
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <HAL_ADC_MspInit+0x144>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000812:	bf00      	nop
 8000814:	37e8      	adds	r7, #232	; 0xe8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40022000 	.word	0x40022000
 8000820:	58024400 	.word	0x58024400
 8000824:	58020000 	.word	0x58020000
 8000828:	24000090 	.word	0x24000090
 800082c:	40020010 	.word	0x40020010

08000830 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <MX_DMA_Init+0x3c>)
 8000838:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800083c:	4a0b      	ldr	r2, [pc, #44]	; (800086c <MX_DMA_Init+0x3c>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_DMA_Init+0x3c>)
 8000848:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2100      	movs	r1, #0
 8000858:	200b      	movs	r0, #11
 800085a:	f001 ffee 	bl	800283a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800085e:	200b      	movs	r0, #11
 8000860:	f002 f805 	bl	800286e <HAL_NVIC_EnableIRQ>

}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	58024400 	.word	0x58024400

08000870 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08e      	sub	sp, #56	; 0x38
 8000874:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	4b99      	ldr	r3, [pc, #612]	; (8000aec <MX_GPIO_Init+0x27c>)
 8000888:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088c:	4a97      	ldr	r2, [pc, #604]	; (8000aec <MX_GPIO_Init+0x27c>)
 800088e:	f043 0304 	orr.w	r3, r3, #4
 8000892:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000896:	4b95      	ldr	r3, [pc, #596]	; (8000aec <MX_GPIO_Init+0x27c>)
 8000898:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089c:	f003 0304 	and.w	r3, r3, #4
 80008a0:	623b      	str	r3, [r7, #32]
 80008a2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008a4:	4b91      	ldr	r3, [pc, #580]	; (8000aec <MX_GPIO_Init+0x27c>)
 80008a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008aa:	4a90      	ldr	r2, [pc, #576]	; (8000aec <MX_GPIO_Init+0x27c>)
 80008ac:	f043 0320 	orr.w	r3, r3, #32
 80008b0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008b4:	4b8d      	ldr	r3, [pc, #564]	; (8000aec <MX_GPIO_Init+0x27c>)
 80008b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ba:	f003 0320 	and.w	r3, r3, #32
 80008be:	61fb      	str	r3, [r7, #28]
 80008c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	4b8a      	ldr	r3, [pc, #552]	; (8000aec <MX_GPIO_Init+0x27c>)
 80008c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c8:	4a88      	ldr	r2, [pc, #544]	; (8000aec <MX_GPIO_Init+0x27c>)
 80008ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ce:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008d2:	4b86      	ldr	r3, [pc, #536]	; (8000aec <MX_GPIO_Init+0x27c>)
 80008d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b82      	ldr	r3, [pc, #520]	; (8000aec <MX_GPIO_Init+0x27c>)
 80008e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008e6:	4a81      	ldr	r2, [pc, #516]	; (8000aec <MX_GPIO_Init+0x27c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008f0:	4b7e      	ldr	r3, [pc, #504]	; (8000aec <MX_GPIO_Init+0x27c>)
 80008f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	4b7b      	ldr	r3, [pc, #492]	; (8000aec <MX_GPIO_Init+0x27c>)
 8000900:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000904:	4a79      	ldr	r2, [pc, #484]	; (8000aec <MX_GPIO_Init+0x27c>)
 8000906:	f043 0302 	orr.w	r3, r3, #2
 800090a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800090e:	4b77      	ldr	r3, [pc, #476]	; (8000aec <MX_GPIO_Init+0x27c>)
 8000910:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000914:	f003 0302 	and.w	r3, r3, #2
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091c:	4b73      	ldr	r3, [pc, #460]	; (8000aec <MX_GPIO_Init+0x27c>)
 800091e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000922:	4a72      	ldr	r2, [pc, #456]	; (8000aec <MX_GPIO_Init+0x27c>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800092c:	4b6f      	ldr	r3, [pc, #444]	; (8000aec <MX_GPIO_Init+0x27c>)
 800092e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000932:	f003 0308 	and.w	r3, r3, #8
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800093a:	4b6c      	ldr	r3, [pc, #432]	; (8000aec <MX_GPIO_Init+0x27c>)
 800093c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000940:	4a6a      	ldr	r2, [pc, #424]	; (8000aec <MX_GPIO_Init+0x27c>)
 8000942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000946:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800094a:	4b68      	ldr	r3, [pc, #416]	; (8000aec <MX_GPIO_Init+0x27c>)
 800094c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000958:	4b64      	ldr	r3, [pc, #400]	; (8000aec <MX_GPIO_Init+0x27c>)
 800095a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800095e:	4a63      	ldr	r2, [pc, #396]	; (8000aec <MX_GPIO_Init+0x27c>)
 8000960:	f043 0310 	orr.w	r3, r3, #16
 8000964:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000968:	4b60      	ldr	r3, [pc, #384]	; (8000aec <MX_GPIO_Init+0x27c>)
 800096a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800096e:	f003 0310 	and.w	r3, r3, #16
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800097c:	485c      	ldr	r0, [pc, #368]	; (8000af0 <MX_GPIO_Init+0x280>)
 800097e:	f003 fe6f 	bl	8004660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|ENABLE_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f244 0121 	movw	r1, #16417	; 0x4021
 8000988:	485a      	ldr	r0, [pc, #360]	; (8000af4 <MX_GPIO_Init+0x284>)
 800098a:	f003 fe69 	bl	8004660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	4859      	ldr	r0, [pc, #356]	; (8000af8 <MX_GPIO_Init+0x288>)
 8000994:	f003 fe64 	bl	8004660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HX711_CLK_GPIO_Port, HX711_CLK_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2180      	movs	r1, #128	; 0x80
 800099c:	4857      	ldr	r0, [pc, #348]	; (8000afc <MX_GPIO_Init+0x28c>)
 800099e:	f003 fe5f 	bl	8004660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2102      	movs	r1, #2
 80009a6:	4856      	ldr	r0, [pc, #344]	; (8000b00 <MX_GPIO_Init+0x290>)
 80009a8:	f003 fe5a 	bl	8004660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	4619      	mov	r1, r3
 80009c0:	484d      	ldr	r0, [pc, #308]	; (8000af8 <MX_GPIO_Init+0x288>)
 80009c2:	f003 fc9d 	bl	8004300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80009c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	4619      	mov	r1, r3
 80009de:	4844      	ldr	r0, [pc, #272]	; (8000af0 <MX_GPIO_Init+0x280>)
 80009e0:	f003 fc8e 	bl	8004300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|ENABLE_Pin;
 80009e4:	f244 0321 	movw	r3, #16417	; 0x4021
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fa:	4619      	mov	r1, r3
 80009fc:	483d      	ldr	r0, [pc, #244]	; (8000af4 <MX_GPIO_Init+0x284>)
 80009fe:	f003 fc7f 	bl	8004300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000a02:	2380      	movs	r3, #128	; 0x80
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a14:	4619      	mov	r1, r3
 8000a16:	483b      	ldr	r0, [pc, #236]	; (8000b04 <MX_GPIO_Init+0x294>)
 8000a18:	f003 fc72 	bl	8004300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	4831      	ldr	r0, [pc, #196]	; (8000af8 <MX_GPIO_Init+0x288>)
 8000a34:	f003 fc64 	bl	8004300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	482e      	ldr	r0, [pc, #184]	; (8000b08 <MX_GPIO_Init+0x298>)
 8000a4e:	f003 fc57 	bl	8004300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a64:	230a      	movs	r3, #10
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4826      	ldr	r0, [pc, #152]	; (8000b08 <MX_GPIO_Init+0x298>)
 8000a70:	f003 fc46 	bl	8004300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000a74:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	481e      	ldr	r0, [pc, #120]	; (8000b08 <MX_GPIO_Init+0x298>)
 8000a8e:	f003 fc37 	bl	8004300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX711_DT_Pin;
 8000a92:	2340      	movs	r3, #64	; 0x40
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HX711_DT_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4815      	ldr	r0, [pc, #84]	; (8000afc <MX_GPIO_Init+0x28c>)
 8000aa6:	f003 fc2b 	bl	8004300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HX711_CLK_Pin;
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HX711_CLK_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480e      	ldr	r0, [pc, #56]	; (8000afc <MX_GPIO_Init+0x28c>)
 8000ac2:	f003 fc1d 	bl	8004300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ada:	4619      	mov	r1, r3
 8000adc:	4808      	ldr	r0, [pc, #32]	; (8000b00 <MX_GPIO_Init+0x290>)
 8000ade:	f003 fc0f 	bl	8004300 <HAL_GPIO_Init>

}
 8000ae2:	bf00      	nop
 8000ae4:	3738      	adds	r7, #56	; 0x38
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	58024400 	.word	0x58024400
 8000af0:	58021400 	.word	0x58021400
 8000af4:	58020400 	.word	0x58020400
 8000af8:	58020800 	.word	0x58020800
 8000afc:	58020c00 	.word	0x58020c00
 8000b00:	58021000 	.word	0x58021000
 8000b04:	58021800 	.word	0x58021800
 8000b08:	58020000 	.word	0x58020000

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b12:	f000 fda5 	bl	8001660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b16:	f000 f849 	bl	8000bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1a:	f7ff fea9 	bl	8000870 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b1e:	f7ff fe87 	bl	8000830 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000b22:	f000 fcb5 	bl	8001490 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000b26:	f7ff fd63 	bl	80005f0 <MX_ADC1_Init>
  MX_USB_OTG_HS_USB_Init();
 8000b2a:	f000 fd67 	bl	80015fc <MX_USB_OTG_HS_USB_Init>
  MX_TIM3_Init();
 8000b2e:	f000 fbd1 	bl	80012d4 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000b32:	f000 fb01 	bl	8001138 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b36:	f000 fb55 	bl	80011e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  sharp_ir_sensor_start();
//  hx711_init(&loadcell, HX711_CLK_GPIO_Port, HX711_DT_GPIO_Port, HX711_CLK_Pin, HX711_DT_Pin, 0, 1);
  stepper_init(&stepper, &htim2, TIM_CHANNEL_1, &htim1, STEP_GPIO_Port, DIR_GPIO_Port, ENABLE_GPIO_Port, STEP_Pin, DIR_Pin, ENABLE_Pin);
 8000b3a:	2320      	movs	r3, #32
 8000b3c:	9305      	str	r3, [sp, #20]
 8000b3e:	2380      	movs	r3, #128	; 0x80
 8000b40:	9304      	str	r3, [sp, #16]
 8000b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b46:	9303      	str	r3, [sp, #12]
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <main+0x88>)
 8000b4a:	9302      	str	r3, [sp, #8]
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <main+0x8c>)
 8000b4e:	9301      	str	r3, [sp, #4]
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <main+0x90>)
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <main+0x94>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	4912      	ldr	r1, [pc, #72]	; (8000ba4 <main+0x98>)
 8000b5a:	4813      	ldr	r0, [pc, #76]	; (8000ba8 <main+0x9c>)
 8000b5c:	f000 f8b5 	bl	8000cca <stepper_init>
  stepper_set_enable_LOW(&stepper);
 8000b60:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <main+0x9c>)
 8000b62:	f000 fa09 	bl	8000f78 <stepper_set_enable_LOW>
  {
//	  HAL_Delay(500);
////	  sprintf(text,"%ld",sharp_ir_sensor_get_raw());
//	  sprintf(text,"%d",hx711_get_value_average(&loadcell,5));
//	  uart_log(text);
	  stepper_start_angle_mode(&stepper, CW, 30, 360);
 8000b66:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000b6a:	221e      	movs	r2, #30
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <main+0x9c>)
 8000b70:	f000 f9b6 	bl	8000ee0 <stepper_start_angle_mode>
//	  stepper_set_enable_HIGH(&stepper);
	  HAL_Delay(4000);
 8000b74:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000b78:	f000 fe04 	bl	8001784 <HAL_Delay>
	  stepper_start_angle_mode(&stepper, CCW, 30, 360);
 8000b7c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000b80:	221e      	movs	r2, #30
 8000b82:	2100      	movs	r1, #0
 8000b84:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <main+0x9c>)
 8000b86:	f000 f9ab 	bl	8000ee0 <stepper_start_angle_mode>
//	  stepper_set_enable_HIGH(&stepper);
	  HAL_Delay(4000);
 8000b8a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000b8e:	f000 fdf9 	bl	8001784 <HAL_Delay>
	  stepper_start_angle_mode(&stepper, CW, 30, 360);
 8000b92:	e7e8      	b.n	8000b66 <main+0x5a>
 8000b94:	58020400 	.word	0x58020400
 8000b98:	58020800 	.word	0x58020800
 8000b9c:	58020000 	.word	0x58020000
 8000ba0:	24000134 	.word	0x24000134
 8000ba4:	24000180 	.word	0x24000180
 8000ba8:	24000108 	.word	0x24000108

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b09c      	sub	sp, #112	; 0x70
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb6:	224c      	movs	r2, #76	; 0x4c
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f009 ffee 	bl	800ab9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2220      	movs	r2, #32
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f009 ffe8 	bl	800ab9c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000bcc:	4b30      	ldr	r3, [pc, #192]	; (8000c90 <SystemClock_Config+0xe4>)
 8000bce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bd6:	2004      	movs	r0, #4
 8000bd8:	f003 fd5c 	bl	8004694 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bdc:	2300      	movs	r3, #0
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <SystemClock_Config+0xe8>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a2b      	ldr	r2, [pc, #172]	; (8000c94 <SystemClock_Config+0xe8>)
 8000be6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <SystemClock_Config+0xe8>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bf8:	bf00      	nop
 8000bfa:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <SystemClock_Config+0xe8>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c06:	d1f8      	bne.n	8000bfa <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000c08:	2321      	movs	r3, #33	; 0x21
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c0c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c12:	2301      	movs	r3, #1
 8000c14:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c16:	2302      	movs	r3, #2
 8000c18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000c22:	2346      	movs	r3, #70	; 0x46
 8000c24:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c32:	230c      	movs	r3, #12
 8000c34:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4618      	mov	r0, r3
 8000c44:	f003 fd80 	bl	8004748 <HAL_RCC_OscConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c4e:	f000 f837 	bl	8000cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c52:	233f      	movs	r3, #63	; 0x3f
 8000c54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c56:	2303      	movs	r3, #3
 8000c58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c62:	2340      	movs	r3, #64	; 0x40
 8000c64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c66:	2340      	movs	r3, #64	; 0x40
 8000c68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c70:	2340      	movs	r3, #64	; 0x40
 8000c72:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2107      	movs	r1, #7
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f004 f997 	bl	8004fac <HAL_RCC_ClockConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000c84:	f000 f81c 	bl	8000cc0 <Error_Handler>
  }
}
 8000c88:	bf00      	nop
 8000c8a:	3770      	adds	r7, #112	; 0x70
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58024800 	.word	0x58024800

08000c98 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == stepper.slave_timer.htim->Instance){
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d102      	bne.n	8000cb4 <HAL_TIM_PeriodElapsedCallback+0x1c>
		stepper_stop(&stepper);
 8000cae:	4803      	ldr	r0, [pc, #12]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000cb0:	f000 f833 	bl	8000d1a <stepper_stop>
	}
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	24000108 	.word	0x24000108

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
}
 8000cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <Error_Handler+0x8>

08000cca <stepper_init>:
#include "stepper.h"
#include "tim.h"

void stepper_init(stepper_t *stepper, TIM_HandleTypeDef *timer, uint32_t channel, TIM_HandleTypeDef *slave_timer,
		GPIO_TypeDef *STEP_port, GPIO_TypeDef *DIR_port, GPIO_TypeDef *ENABLE_port,
		uint16_t STEP_pin, uint16_t DIR_pin, uint16_t ENABLE_pin){
 8000cca:	b480      	push	{r7}
 8000ccc:	b085      	sub	sp, #20
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	603b      	str	r3, [r7, #0]
	stepper->timer.htim = timer;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	601a      	str	r2, [r3, #0]
	stepper->timer.channel = channel;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	605a      	str	r2, [r3, #4]
	stepper->slave_timer.htim = slave_timer;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	609a      	str	r2, [r3, #8]

	stepper->ports.STEP_port = STEP_port;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	615a      	str	r2, [r3, #20]
	stepper->ports.DIR_port = DIR_port;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	69fa      	ldr	r2, [r7, #28]
 8000cf4:	619a      	str	r2, [r3, #24]
	stepper->ports.ENABLE_port = ENABLE_port;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	6a3a      	ldr	r2, [r7, #32]
 8000cfa:	61da      	str	r2, [r3, #28]

	stepper->pins.STEP_pin = STEP_pin;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000d00:	841a      	strh	r2, [r3, #32]
	stepper->pins.DIR_pin = DIR_pin;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d06:	845a      	strh	r2, [r3, #34]	; 0x22
	stepper->pins.ENABLE_pin = ENABLE_pin;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000d0c:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <stepper_stop>:

	HAL_TIM_PWM_Start(stepper->timer.htim, stepper->timer.channel);

}

void stepper_stop(stepper_t *stepper){
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
	stepper->mode = STOP;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	741a      	strb	r2, [r3, #16]
	__HAL_TIM_SET_COMPARE(stepper->timer.htim,stepper->timer.channel,0);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d105      	bne.n	8000d3c <stepper_stop+0x22>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2200      	movs	r2, #0
 8000d38:	635a      	str	r2, [r3, #52]	; 0x34
 8000d3a:	e02c      	b.n	8000d96 <stepper_stop+0x7c>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d105      	bne.n	8000d50 <stepper_stop+0x36>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	6393      	str	r3, [r2, #56]	; 0x38
 8000d4e:	e022      	b.n	8000d96 <stepper_stop+0x7c>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2b08      	cmp	r3, #8
 8000d56:	d105      	bne.n	8000d64 <stepper_stop+0x4a>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000d62:	e018      	b.n	8000d96 <stepper_stop+0x7c>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	2b0c      	cmp	r3, #12
 8000d6a:	d105      	bne.n	8000d78 <stepper_stop+0x5e>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	2300      	movs	r3, #0
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	e00e      	b.n	8000d96 <stepper_stop+0x7c>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2b10      	cmp	r3, #16
 8000d7e:	d105      	bne.n	8000d8c <stepper_stop+0x72>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	2300      	movs	r3, #0
 8000d88:	6593      	str	r3, [r2, #88]	; 0x58
 8000d8a:	e004      	b.n	8000d96 <stepper_stop+0x7c>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	2300      	movs	r3, #0
 8000d94:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_TIM_PWM_Stop(stepper->timer.htim, stepper->timer.channel);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4610      	mov	r0, r2
 8000da2:	f007 fb07 	bl	80083b4 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(stepper->slave_timer.htim);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f007 f964 	bl	8008078 <HAL_TIM_Base_Stop_IT>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <stepper_set_direction>:

void stepper_set_direction(stepper_t *stepper, direction_t dir){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(stepper->ports.DIR_port, stepper->pins.DIR_pin, dir);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6998      	ldr	r0, [r3, #24]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000dcc:	78fa      	ldrb	r2, [r7, #3]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f003 fc46 	bl	8004660 <HAL_GPIO_WritePin>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <stepper_set_speed>:

void stepper_set_speed(stepper_t *stepper, uint32_t speed){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]

	uint32_t timer_count, frequency;
	 if(speed > STEPPER_MAX_SPEED){
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2bc8      	cmp	r3, #200	; 0xc8
 8000dea:	d902      	bls.n	8000df2 <stepper_set_speed+0x16>
		 speed = STEPPER_MAX_SPEED;
 8000dec:	23c8      	movs	r3, #200	; 0xc8
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	e006      	b.n	8000e00 <stepper_set_speed+0x24>
	 } else if(speed == 0) {
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d103      	bne.n	8000e00 <stepper_set_speed+0x24>
		 stepper_stop(stepper);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff8e 	bl	8000d1a <stepper_stop>
		 return;
 8000dfe:	e069      	b.n	8000ed4 <stepper_set_speed+0xf8>
	 }

	 frequency = (speed * (STEPPER_MAX_FREQ - STEPPER_MIN_FREQ)) / STEPPER_MAX_SPEED;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000e06:	fb02 f303 	mul.w	r3, r2, r3
 8000e0a:	4a34      	ldr	r2, [pc, #208]	; (8000edc <stepper_set_speed+0x100>)
 8000e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e10:	099b      	lsrs	r3, r3, #6
 8000e12:	60fb      	str	r3, [r7, #12]
	 timer_count = (HAL_RCC_GetPCLK1Freq() * 2) / (stepper->timer.htim->Init.Prescaler * frequency);
 8000e14:	f004 fc2a 	bl	800566c <HAL_RCC_GetPCLK1Freq>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	005a      	lsls	r2, r3, #1
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	68f9      	ldr	r1, [r7, #12]
 8000e24:	fb01 f303 	mul.w	r3, r1, r3
 8000e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2c:	60bb      	str	r3, [r7, #8]

	 __HAL_TIM_SET_COUNTER(stepper->timer.htim,0);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2200      	movs	r2, #0
 8000e36:	625a      	str	r2, [r3, #36]	; 0x24
	 __HAL_TIM_SET_AUTORELOAD(stepper->timer.htim, timer_count - 1);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	3a01      	subs	r2, #1
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68ba      	ldr	r2, [r7, #8]
 8000e4a:	3a01      	subs	r2, #1
 8000e4c:	60da      	str	r2, [r3, #12]
	 __HAL_TIM_SET_COMPARE(stepper->timer.htim, stepper->timer.channel, (timer_count / 2) - 1);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d107      	bne.n	8000e66 <stepper_set_speed+0x8a>
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	085a      	lsrs	r2, r3, #1
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	3a01      	subs	r2, #1
 8000e62:	635a      	str	r2, [r3, #52]	; 0x34
 8000e64:	e036      	b.n	8000ed4 <stepper_set_speed+0xf8>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	d107      	bne.n	8000e7e <stepper_set_speed+0xa2>
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	085b      	lsrs	r3, r3, #1
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	6812      	ldr	r2, [r2, #0]
 8000e76:	6812      	ldr	r2, [r2, #0]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	6393      	str	r3, [r2, #56]	; 0x38
 8000e7c:	e02a      	b.n	8000ed4 <stepper_set_speed+0xf8>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b08      	cmp	r3, #8
 8000e84:	d107      	bne.n	8000e96 <stepper_set_speed+0xba>
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	085b      	lsrs	r3, r3, #1
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	6812      	ldr	r2, [r2, #0]
 8000e8e:	6812      	ldr	r2, [r2, #0]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000e94:	e01e      	b.n	8000ed4 <stepper_set_speed+0xf8>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b0c      	cmp	r3, #12
 8000e9c:	d107      	bne.n	8000eae <stepper_set_speed+0xd2>
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	085b      	lsrs	r3, r3, #1
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	6812      	ldr	r2, [r2, #0]
 8000ea6:	6812      	ldr	r2, [r2, #0]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000eac:	e012      	b.n	8000ed4 <stepper_set_speed+0xf8>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b10      	cmp	r3, #16
 8000eb4:	d107      	bne.n	8000ec6 <stepper_set_speed+0xea>
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	085b      	lsrs	r3, r3, #1
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	6812      	ldr	r2, [r2, #0]
 8000ebe:	6812      	ldr	r2, [r2, #0]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec4:	e006      	b.n	8000ed4 <stepper_set_speed+0xf8>
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	085b      	lsrs	r3, r3, #1
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	6812      	ldr	r2, [r2, #0]
 8000ece:	6812      	ldr	r2, [r2, #0]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	51eb851f 	.word	0x51eb851f

08000ee0 <stepper_start_angle_mode>:

void stepper_start_angle_mode(stepper_t *stepper, direction_t dir, uint32_t speed, uint32_t angle){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	460b      	mov	r3, r1
 8000eee:	72fb      	strb	r3, [r7, #11]

	stepper->mode = ANGLE;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	741a      	strb	r2, [r3, #16]
	stepper_set_direction(stepper, dir);
 8000ef6:	7afb      	ldrb	r3, [r7, #11]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f7ff ff5c 	bl	8000db8 <stepper_set_direction>
	stepper_set_speed(stepper, speed);
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	f7ff ff6a 	bl	8000ddc <stepper_set_speed>

	stepper->steps_to_move = (angle * STEP_PER_REV * MICRO_STEP) / 360;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8000f0e:	fb02 f303 	mul.w	r3, r2, r3
 8000f12:	08db      	lsrs	r3, r3, #3
 8000f14:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <stepper_start_angle_mode+0x94>)
 8000f16:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1a:	089a      	lsrs	r2, r3, #2
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28

	if(stepper->steps_to_move == 0){
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d103      	bne.n	8000f30 <stepper_start_angle_mode+0x50>
		stepper_stop(stepper);
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f7ff fef6 	bl	8000d1a <stepper_stop>
		return;
 8000f2e:	e01e      	b.n	8000f6e <stepper_start_angle_mode+0x8e>
	}

	__HAL_TIM_SET_COUNTER(stepper->slave_timer.htim, 0);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(stepper->slave_timer.htim, stepper->steps_to_move - 1);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	3a01      	subs	r2, #1
 8000f46:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	3a01      	subs	r2, #1
 8000f52:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(stepper->slave_timer.htim);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f007 f815 	bl	8007f88 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(stepper->timer.htim, stepper->timer.channel);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	4619      	mov	r1, r3
 8000f68:	4610      	mov	r0, r2
 8000f6a:	f007 f915 	bl	8008198 <HAL_TIM_PWM_Start>
}
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	16c16c17 	.word	0x16c16c17

08000f78 <stepper_set_enable_LOW>:

void stepper_set_enable_HIGH(stepper_t *stepper){
	HAL_GPIO_WritePin(stepper->ports.ENABLE_port, stepper->pins.ENABLE_pin, GPIO_PIN_SET);
}

void stepper_set_enable_LOW(stepper_t *stepper){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(stepper->ports.ENABLE_port, stepper->pins.ENABLE_pin, GPIO_PIN_RESET);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69d8      	ldr	r0, [r3, #28]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f003 fb68 	bl	8004660 <HAL_GPIO_WritePin>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_MspInit+0x30>)
 8000fa0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000fa4:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <HAL_MspInit+0x30>)
 8000fa6:	f043 0302 	orr.w	r3, r3, #2
 8000faa:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_MspInit+0x30>)
 8000fb0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	58024400 	.word	0x58024400

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <MemManage_Handler+0x4>

08000fde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001018:	f000 fb94 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <DMA1_Stream0_IRQHandler+0x10>)
 8001026:	f001 ffcd 	bl	8002fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	24000090 	.word	0x24000090

08001034 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <TIM1_UP_IRQHandler+0x10>)
 800103a:	f007 fa51 	bl	80084e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	24000134 	.word	0x24000134

08001048 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800104c:	4b32      	ldr	r3, [pc, #200]	; (8001118 <SystemInit+0xd0>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001052:	4a31      	ldr	r2, [pc, #196]	; (8001118 <SystemInit+0xd0>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800105c:	4b2f      	ldr	r3, [pc, #188]	; (800111c <SystemInit+0xd4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 030f 	and.w	r3, r3, #15
 8001064:	2b02      	cmp	r3, #2
 8001066:	d807      	bhi.n	8001078 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001068:	4b2c      	ldr	r3, [pc, #176]	; (800111c <SystemInit+0xd4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f023 030f 	bic.w	r3, r3, #15
 8001070:	4a2a      	ldr	r2, [pc, #168]	; (800111c <SystemInit+0xd4>)
 8001072:	f043 0303 	orr.w	r3, r3, #3
 8001076:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001078:	4b29      	ldr	r3, [pc, #164]	; (8001120 <SystemInit+0xd8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a28      	ldr	r2, [pc, #160]	; (8001120 <SystemInit+0xd8>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001084:	4b26      	ldr	r3, [pc, #152]	; (8001120 <SystemInit+0xd8>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800108a:	4b25      	ldr	r3, [pc, #148]	; (8001120 <SystemInit+0xd8>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4924      	ldr	r1, [pc, #144]	; (8001120 <SystemInit+0xd8>)
 8001090:	4b24      	ldr	r3, [pc, #144]	; (8001124 <SystemInit+0xdc>)
 8001092:	4013      	ands	r3, r2
 8001094:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001096:	4b21      	ldr	r3, [pc, #132]	; (800111c <SystemInit+0xd4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 030c 	and.w	r3, r3, #12
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d007      	beq.n	80010b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <SystemInit+0xd4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f023 030f 	bic.w	r3, r3, #15
 80010aa:	4a1c      	ldr	r2, [pc, #112]	; (800111c <SystemInit+0xd4>)
 80010ac:	f043 0303 	orr.w	r3, r3, #3
 80010b0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <SystemInit+0xd8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <SystemInit+0xd8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <SystemInit+0xd8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <SystemInit+0xd8>)
 80010c6:	4a18      	ldr	r2, [pc, #96]	; (8001128 <SystemInit+0xe0>)
 80010c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <SystemInit+0xd8>)
 80010cc:	4a17      	ldr	r2, [pc, #92]	; (800112c <SystemInit+0xe4>)
 80010ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <SystemInit+0xd8>)
 80010d2:	4a17      	ldr	r2, [pc, #92]	; (8001130 <SystemInit+0xe8>)
 80010d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <SystemInit+0xd8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <SystemInit+0xd8>)
 80010de:	4a14      	ldr	r2, [pc, #80]	; (8001130 <SystemInit+0xe8>)
 80010e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <SystemInit+0xd8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010e8:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <SystemInit+0xd8>)
 80010ea:	4a11      	ldr	r2, [pc, #68]	; (8001130 <SystemInit+0xe8>)
 80010ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <SystemInit+0xd8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <SystemInit+0xd8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a09      	ldr	r2, [pc, #36]	; (8001120 <SystemInit+0xd8>)
 80010fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <SystemInit+0xd8>)
 8001102:	2200      	movs	r2, #0
 8001104:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <SystemInit+0xec>)
 8001108:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800110c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00
 800111c:	52002000 	.word	0x52002000
 8001120:	58024400 	.word	0x58024400
 8001124:	eaf6ed7f 	.word	0xeaf6ed7f
 8001128:	02020200 	.word	0x02020200
 800112c:	01ff0000 	.word	0x01ff0000
 8001130:	01010280 	.word	0x01010280
 8001134:	52004000 	.word	0x52004000

08001138 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114e:	463b      	mov	r3, r7
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001158:	4b20      	ldr	r3, [pc, #128]	; (80011dc <MX_TIM1_Init+0xa4>)
 800115a:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <MX_TIM1_Init+0xa8>)
 800115c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800115e:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_TIM1_Init+0xa4>)
 8001160:	2200      	movs	r2, #0
 8001162:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_TIM1_Init+0xa4>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <MX_TIM1_Init+0xa4>)
 800116c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001170:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_TIM1_Init+0xa4>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <MX_TIM1_Init+0xa4>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_TIM1_Init+0xa4>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001184:	4815      	ldr	r0, [pc, #84]	; (80011dc <MX_TIM1_Init+0xa4>)
 8001186:	f006 fea7 	bl	8007ed8 <HAL_TIM_Base_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001190:	f7ff fd96 	bl	8000cc0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001194:	2307      	movs	r3, #7
 8001196:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001198:	2310      	movs	r3, #16
 800119a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	4619      	mov	r1, r3
 80011a2:	480e      	ldr	r0, [pc, #56]	; (80011dc <MX_TIM1_Init+0xa4>)
 80011a4:	f007 fcc8 	bl	8008b38 <HAL_TIM_SlaveConfigSynchro>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011ae:	f7ff fd87 	bl	8000cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011be:	463b      	mov	r3, r7
 80011c0:	4619      	mov	r1, r3
 80011c2:	4806      	ldr	r0, [pc, #24]	; (80011dc <MX_TIM1_Init+0xa4>)
 80011c4:	f008 fa40 	bl	8009648 <HAL_TIMEx_MasterConfigSynchronization>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80011ce:	f7ff fd77 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	24000134 	.word	0x24000134
 80011e0:	40010000 	.word	0x40010000

080011e4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08e      	sub	sp, #56	; 0x38
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001204:	463b      	mov	r3, r7
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]
 8001212:	615a      	str	r2, [r3, #20]
 8001214:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001216:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <MX_TIM2_Init+0xec>)
 8001218:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800121c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 28-1;
 800121e:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <MX_TIM2_Init+0xec>)
 8001220:	221b      	movs	r2, #27
 8001222:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <MX_TIM2_Init+0xec>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <MX_TIM2_Init+0xec>)
 800122c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001230:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <MX_TIM2_Init+0xec>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001238:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <MX_TIM2_Init+0xec>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800123e:	4824      	ldr	r0, [pc, #144]	; (80012d0 <MX_TIM2_Init+0xec>)
 8001240:	f006 fe4a 	bl	8007ed8 <HAL_TIM_Base_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800124a:	f7ff fd39 	bl	8000cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001254:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001258:	4619      	mov	r1, r3
 800125a:	481d      	ldr	r0, [pc, #116]	; (80012d0 <MX_TIM2_Init+0xec>)
 800125c:	f007 fb74 	bl	8008948 <HAL_TIM_ConfigClockSource>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001266:	f7ff fd2b 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800126a:	4819      	ldr	r0, [pc, #100]	; (80012d0 <MX_TIM2_Init+0xec>)
 800126c:	f006 ff33 	bl	80080d6 <HAL_TIM_PWM_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001276:	f7ff fd23 	bl	8000cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 800127a:	2340      	movs	r3, #64	; 0x40
 800127c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	4619      	mov	r1, r3
 8001288:	4811      	ldr	r0, [pc, #68]	; (80012d0 <MX_TIM2_Init+0xec>)
 800128a:	f008 f9dd 	bl	8009648 <HAL_TIMEx_MasterConfigSynchronization>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001294:	f7ff fd14 	bl	8000cc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001298:	2360      	movs	r3, #96	; 0x60
 800129a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000;
 800129c:	f241 3388 	movw	r3, #5000	; 0x1388
 80012a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012aa:	463b      	mov	r3, r7
 80012ac:	2200      	movs	r2, #0
 80012ae:	4619      	mov	r1, r3
 80012b0:	4807      	ldr	r0, [pc, #28]	; (80012d0 <MX_TIM2_Init+0xec>)
 80012b2:	f007 fa35 	bl	8008720 <HAL_TIM_PWM_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80012bc:	f7ff fd00 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <MX_TIM2_Init+0xec>)
 80012c2:	f000 f8ab 	bl	800141c <HAL_TIM_MspPostInit>

}
 80012c6:	bf00      	nop
 80012c8:	3738      	adds	r7, #56	; 0x38
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	24000180 	.word	0x24000180

080012d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <MX_TIM3_Init+0x98>)
 80012f4:	4a1e      	ldr	r2, [pc, #120]	; (8001370 <MX_TIM3_Init+0x9c>)
 80012f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28000-1;
 80012f8:	4b1c      	ldr	r3, [pc, #112]	; (800136c <MX_TIM3_Init+0x98>)
 80012fa:	f646 525f 	movw	r2, #27999	; 0x6d5f
 80012fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_TIM3_Init+0x98>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <MX_TIM3_Init+0x98>)
 8001308:	f240 32e7 	movw	r2, #999	; 0x3e7
 800130c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <MX_TIM3_Init+0x98>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_TIM3_Init+0x98>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800131a:	4814      	ldr	r0, [pc, #80]	; (800136c <MX_TIM3_Init+0x98>)
 800131c:	f006 fddc 	bl	8007ed8 <HAL_TIM_Base_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001326:	f7ff fccb 	bl	8000cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	4619      	mov	r1, r3
 8001336:	480d      	ldr	r0, [pc, #52]	; (800136c <MX_TIM3_Init+0x98>)
 8001338:	f007 fb06 	bl	8008948 <HAL_TIM_ConfigClockSource>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001342:	f7ff fcbd 	bl	8000cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001346:	2320      	movs	r3, #32
 8001348:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	4619      	mov	r1, r3
 8001352:	4806      	ldr	r0, [pc, #24]	; (800136c <MX_TIM3_Init+0x98>)
 8001354:	f008 f978 	bl	8009648 <HAL_TIMEx_MasterConfigSynchronization>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800135e:	f7ff fcaf 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	3720      	adds	r7, #32
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	240001cc 	.word	0x240001cc
 8001370:	40000400 	.word	0x40000400

08001374 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a23      	ldr	r2, [pc, #140]	; (8001410 <HAL_TIM_Base_MspInit+0x9c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d117      	bne.n	80013b6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001386:	4b23      	ldr	r3, [pc, #140]	; (8001414 <HAL_TIM_Base_MspInit+0xa0>)
 8001388:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800138c:	4a21      	ldr	r2, [pc, #132]	; (8001414 <HAL_TIM_Base_MspInit+0xa0>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <HAL_TIM_Base_MspInit+0xa0>)
 8001398:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	2019      	movs	r0, #25
 80013aa:	f001 fa46 	bl	800283a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80013ae:	2019      	movs	r0, #25
 80013b0:	f001 fa5d 	bl	800286e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80013b4:	e028      	b.n	8001408 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM2)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013be:	d10f      	bne.n	80013e0 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <HAL_TIM_Base_MspInit+0xa0>)
 80013c2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013c6:	4a13      	ldr	r2, [pc, #76]	; (8001414 <HAL_TIM_Base_MspInit+0xa0>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80013d0:	4b10      	ldr	r3, [pc, #64]	; (8001414 <HAL_TIM_Base_MspInit+0xa0>)
 80013d2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
}
 80013de:	e013      	b.n	8001408 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM3)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0c      	ldr	r2, [pc, #48]	; (8001418 <HAL_TIM_Base_MspInit+0xa4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d10e      	bne.n	8001408 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_TIM_Base_MspInit+0xa0>)
 80013ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013f0:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_TIM_Base_MspInit+0xa0>)
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_TIM_Base_MspInit+0xa0>)
 80013fc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	bf00      	nop
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40010000 	.word	0x40010000
 8001414:	58024400 	.word	0x58024400
 8001418:	40000400 	.word	0x40000400

0800141c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800143c:	d11f      	bne.n	800147e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_TIM_MspPostInit+0x6c>)
 8001440:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001444:	4a10      	ldr	r2, [pc, #64]	; (8001488 <HAL_TIM_MspPostInit+0x6c>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_TIM_MspPostInit+0x6c>)
 8001450:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP_Pin;
 800145c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001460:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800146e:	2301      	movs	r3, #1
 8001470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	4619      	mov	r1, r3
 8001478:	4804      	ldr	r0, [pc, #16]	; (800148c <HAL_TIM_MspPostInit+0x70>)
 800147a:	f002 ff41 	bl	8004300 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800147e:	bf00      	nop
 8001480:	3720      	adds	r7, #32
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	58024400 	.word	0x58024400
 800148c:	58020000 	.word	0x58020000

08001490 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001494:	4b22      	ldr	r3, [pc, #136]	; (8001520 <MX_USART3_UART_Init+0x90>)
 8001496:	4a23      	ldr	r2, [pc, #140]	; (8001524 <MX_USART3_UART_Init+0x94>)
 8001498:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800149a:	4b21      	ldr	r3, [pc, #132]	; (8001520 <MX_USART3_UART_Init+0x90>)
 800149c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014a2:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <MX_USART3_UART_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <MX_USART3_UART_Init+0x90>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014ae:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <MX_USART3_UART_Init+0x90>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_USART3_UART_Init+0x90>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <MX_USART3_UART_Init+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_USART3_UART_Init+0x90>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <MX_USART3_UART_Init+0x90>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_USART3_UART_Init+0x90>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <MX_USART3_UART_Init+0x90>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014d8:	4811      	ldr	r0, [pc, #68]	; (8001520 <MX_USART3_UART_Init+0x90>)
 80014da:	f008 f961 	bl	80097a0 <HAL_UART_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014e4:	f7ff fbec 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e8:	2100      	movs	r1, #0
 80014ea:	480d      	ldr	r0, [pc, #52]	; (8001520 <MX_USART3_UART_Init+0x90>)
 80014ec:	f009 fa67 	bl	800a9be <HAL_UARTEx_SetTxFifoThreshold>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014f6:	f7ff fbe3 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fa:	2100      	movs	r1, #0
 80014fc:	4808      	ldr	r0, [pc, #32]	; (8001520 <MX_USART3_UART_Init+0x90>)
 80014fe:	f009 fa9c 	bl	800aa3a <HAL_UARTEx_SetRxFifoThreshold>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001508:	f7ff fbda 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800150c:	4804      	ldr	r0, [pc, #16]	; (8001520 <MX_USART3_UART_Init+0x90>)
 800150e:	f009 fa1d 	bl	800a94c <HAL_UARTEx_DisableFifoMode>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001518:	f7ff fbd2 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	24000218 	.word	0x24000218
 8001524:	40004800 	.word	0x40004800

08001528 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b0ba      	sub	sp, #232	; 0xe8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	22c0      	movs	r2, #192	; 0xc0
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f009 fb27 	bl	800ab9c <memset>
  if(uartHandle->Instance==USART3)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a27      	ldr	r2, [pc, #156]	; (80015f0 <HAL_UART_MspInit+0xc8>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d146      	bne.n	80015e6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001558:	f04f 0202 	mov.w	r2, #2
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800156a:	f107 0310 	add.w	r3, r7, #16
 800156e:	4618      	mov	r0, r3
 8001570:	f004 f8a8 	bl	80056c4 <HAL_RCCEx_PeriphCLKConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800157a:	f7ff fba1 	bl	8000cc0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800157e:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <HAL_UART_MspInit+0xcc>)
 8001580:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001584:	4a1b      	ldr	r2, [pc, #108]	; (80015f4 <HAL_UART_MspInit+0xcc>)
 8001586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800158e:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_UART_MspInit+0xcc>)
 8001590:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001594:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800159c:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <HAL_UART_MspInit+0xcc>)
 800159e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015a2:	4a14      	ldr	r2, [pc, #80]	; (80015f4 <HAL_UART_MspInit+0xcc>)
 80015a4:	f043 0308 	orr.w	r3, r3, #8
 80015a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_UART_MspInit+0xcc>)
 80015ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80015ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015d4:	2307      	movs	r3, #7
 80015d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015de:	4619      	mov	r1, r3
 80015e0:	4805      	ldr	r0, [pc, #20]	; (80015f8 <HAL_UART_MspInit+0xd0>)
 80015e2:	f002 fe8d 	bl	8004300 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015e6:	bf00      	nop
 80015e8:	37e8      	adds	r7, #232	; 0xe8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40004800 	.word	0x40004800
 80015f4:	58024400 	.word	0x58024400
 80015f8:	58020c00 	.word	0x58020c00

080015fc <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800160c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001644 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001610:	f7ff fd1a 	bl	8001048 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001616:	490d      	ldr	r1, [pc, #52]	; (800164c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800161c:	e002      	b.n	8001624 <LoopCopyDataInit>

0800161e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001622:	3304      	adds	r3, #4

08001624 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001628:	d3f9      	bcc.n	800161e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800162c:	4c0a      	ldr	r4, [pc, #40]	; (8001658 <LoopFillZerobss+0x22>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001630:	e001      	b.n	8001636 <LoopFillZerobss>

08001632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001634:	3204      	adds	r2, #4

08001636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001638:	d3fb      	bcc.n	8001632 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800163a:	f009 fa8b 	bl	800ab54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163e:	f7ff fa65 	bl	8000b0c <main>
  bx  lr
 8001642:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001644:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001648:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800164c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001650:	0800ac14 	.word	0x0800ac14
  ldr r2, =_sbss
 8001654:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001658:	240002b0 	.word	0x240002b0

0800165c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC_IRQHandler>
	...

08001660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001666:	2003      	movs	r0, #3
 8001668:	f001 f8dc 	bl	8002824 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800166c:	f003 fe54 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 8001670:	4602      	mov	r2, r0
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_Init+0x68>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	4913      	ldr	r1, [pc, #76]	; (80016cc <HAL_Init+0x6c>)
 800167e:	5ccb      	ldrb	r3, [r1, r3]
 8001680:	f003 031f 	and.w	r3, r3, #31
 8001684:	fa22 f303 	lsr.w	r3, r2, r3
 8001688:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <HAL_Init+0x68>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <HAL_Init+0x6c>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	fa22 f303 	lsr.w	r3, r2, r3
 80016a0:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <HAL_Init+0x70>)
 80016a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016a4:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <HAL_Init+0x74>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016aa:	2000      	movs	r0, #0
 80016ac:	f000 f814 	bl	80016d8 <HAL_InitTick>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e002      	b.n	80016c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016ba:	f7ff fc6d 	bl	8000f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	58024400 	.word	0x58024400
 80016cc:	0800abc4 	.word	0x0800abc4
 80016d0:	24000004 	.word	0x24000004
 80016d4:	24000000 	.word	0x24000000

080016d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_InitTick+0x60>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e021      	b.n	8001730 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <HAL_InitTick+0x64>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_InitTick+0x60>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f001 f8c1 	bl	800288a <HAL_SYSTICK_Config>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e00e      	b.n	8001730 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b0f      	cmp	r3, #15
 8001716:	d80a      	bhi.n	800172e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001718:	2200      	movs	r2, #0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001720:	f001 f88b 	bl	800283a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001724:	4a06      	ldr	r2, [pc, #24]	; (8001740 <HAL_InitTick+0x68>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	2400000c 	.word	0x2400000c
 800173c:	24000000 	.word	0x24000000
 8001740:	24000008 	.word	0x24000008

08001744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x20>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x24>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <HAL_IncTick+0x24>)
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	2400000c 	.word	0x2400000c
 8001768:	240002ac 	.word	0x240002ac

0800176c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <HAL_GetTick+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	240002ac 	.word	0x240002ac

08001784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800178c:	f7ff ffee 	bl	800176c <HAL_GetTick>
 8001790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800179c:	d005      	beq.n	80017aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_Delay+0x44>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017aa:	bf00      	nop
 80017ac:	f7ff ffde 	bl	800176c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d8f7      	bhi.n	80017ac <HAL_Delay+0x28>
  {
  }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	2400000c 	.word	0x2400000c

080017cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	609a      	str	r2, [r3, #8]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	609a      	str	r2, [r3, #8]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001834:	b480      	push	{r7}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3360      	adds	r3, #96	; 0x60
 8001846:	461a      	mov	r2, r3
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	430b      	orrs	r3, r1
 8001862:	431a      	orrs	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001868:	bf00      	nop
 800186a:	371c      	adds	r7, #28
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	431a      	orrs	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	611a      	str	r2, [r3, #16]
}
 800189a:	bf00      	nop
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b087      	sub	sp, #28
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3360      	adds	r3, #96	; 0x60
 80018b6:	461a      	mov	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	431a      	orrs	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	601a      	str	r2, [r3, #0]
  }
}
 80018d0:	bf00      	nop
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	3330      	adds	r3, #48	; 0x30
 80018ec:	461a      	mov	r2, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	4413      	add	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f003 031f 	and.w	r3, r3, #31
 8001906:	211f      	movs	r1, #31
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	0e9b      	lsrs	r3, r3, #26
 8001914:	f003 011f 	and.w	r1, r3, #31
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	431a      	orrs	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001928:	bf00      	nop
 800192a:	371c      	adds	r7, #28
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001934:	b480      	push	{r7}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3314      	adds	r3, #20
 8001944:	461a      	mov	r2, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	0e5b      	lsrs	r3, r3, #25
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	4413      	add	r3, r2
 8001952:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	0d1b      	lsrs	r3, r3, #20
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	2107      	movs	r1, #7
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	401a      	ands	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	0d1b      	lsrs	r3, r3, #20
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	431a      	orrs	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800197e:	bf00      	nop
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019a4:	43db      	mvns	r3, r3
 80019a6:	401a      	ands	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0318 	and.w	r3, r3, #24
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019b0:	40d9      	lsrs	r1, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	400b      	ands	r3, r1
 80019b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019ba:	431a      	orrs	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	000fffff 	.word	0x000fffff

080019d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6093      	str	r3, [r2, #8]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	5fffffc0 	.word	0x5fffffc0

080019f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a0c:	d101      	bne.n	8001a12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <LL_ADC_EnableInternalRegulator+0x24>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	6fffffc0 	.word	0x6fffffc0

08001a48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a5c:	d101      	bne.n	8001a62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <LL_ADC_IsEnabled+0x18>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <LL_ADC_IsEnabled+0x1a>
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d101      	bne.n	8001aae <LL_ADC_REG_IsConversionOngoing+0x18>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d101      	bne.n	8001ad4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e138      	b.n	8001d70 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d109      	bne.n	8001b20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7fe fde9 	bl	80006e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff67 	bl	80019f8 <LL_ADC_IsDeepPowerDownEnabled>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d004      	beq.n	8001b3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff4d 	bl	80019d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ff82 	bl	8001a48 <LL_ADC_IsInternalRegulatorEnabled>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d114      	bne.n	8001b74 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff ff66 	bl	8001a20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b54:	4b88      	ldr	r3, [pc, #544]	; (8001d78 <HAL_ADC_Init+0x294>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	099b      	lsrs	r3, r3, #6
 8001b5a:	4a88      	ldr	r2, [pc, #544]	; (8001d7c <HAL_ADC_Init+0x298>)
 8001b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b60:	099b      	lsrs	r3, r3, #6
 8001b62:	3301      	adds	r3, #1
 8001b64:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b66:	e002      	b.n	8001b6e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f9      	bne.n	8001b68 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff65 	bl	8001a48 <LL_ADC_IsInternalRegulatorEnabled>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10d      	bne.n	8001ba0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b88:	f043 0210 	orr.w	r2, r3, #16
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b94:	f043 0201 	orr.w	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff76 	bl	8001a96 <LL_ADC_REG_IsConversionOngoing>
 8001baa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb0:	f003 0310 	and.w	r3, r3, #16
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f040 80d2 	bne.w	8001d5e <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f040 80ce 	bne.w	8001d5e <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bca:	f043 0202 	orr.w	r2, r3, #2
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ff4a 	bl	8001a70 <LL_ADC_IsEnabled>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d110      	bne.n	8001c04 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001be2:	4867      	ldr	r0, [pc, #412]	; (8001d80 <HAL_ADC_Init+0x29c>)
 8001be4:	f7ff ff44 	bl	8001a70 <LL_ADC_IsEnabled>
 8001be8:	4604      	mov	r4, r0
 8001bea:	4866      	ldr	r0, [pc, #408]	; (8001d84 <HAL_ADC_Init+0x2a0>)
 8001bec:	f7ff ff40 	bl	8001a70 <LL_ADC_IsEnabled>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4323      	orrs	r3, r4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d105      	bne.n	8001c04 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4862      	ldr	r0, [pc, #392]	; (8001d88 <HAL_ADC_Init+0x2a4>)
 8001c00:	f7ff fde4 	bl	80017cc <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7d5b      	ldrb	r3, [r3, #21]
 8001c08:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c0e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001c14:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	7f1b      	ldrb	r3, [r3, #28]
 8001c1a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7f1b      	ldrb	r3, [r3, #28]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d106      	bne.n	8001c36 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	045b      	lsls	r3, r3, #17
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d009      	beq.n	8001c52 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	4b4c      	ldr	r3, [pc, #304]	; (8001d8c <HAL_ADC_Init+0x2a8>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	69b9      	ldr	r1, [r7, #24]
 8001c62:	430b      	orrs	r3, r1
 8001c64:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff13 	bl	8001a96 <LL_ADC_REG_IsConversionOngoing>
 8001c70:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff20 	bl	8001abc <LL_ADC_INJ_IsConversionOngoing>
 8001c7c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d14a      	bne.n	8001d1a <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d147      	bne.n	8001d1a <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7d1b      	ldrb	r3, [r3, #20]
 8001c8e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	4b3c      	ldr	r3, [pc, #240]	; (8001d90 <HAL_ADC_Init+0x2ac>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	69b9      	ldr	r1, [r7, #24]
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d11b      	bne.n	8001cee <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691a      	ldr	r2, [r3, #16]
 8001cc2:	4b34      	ldr	r3, [pc, #208]	; (8001d94 <HAL_ADC_Init+0x2b0>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cca:	3a01      	subs	r2, #1
 8001ccc:	0411      	lsls	r1, r2, #16
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cd2:	4311      	orrs	r1, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cd8:	4311      	orrs	r1, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	611a      	str	r2, [r3, #16]
 8001cec:	e007      	b.n	8001cfe <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0201 	bic.w	r2, r2, #1
 8001cfc:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 fb25 	bl	8002364 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d10c      	bne.n	8001d3c <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	f023 010f 	bic.w	r1, r3, #15
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	1e5a      	subs	r2, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	631a      	str	r2, [r3, #48]	; 0x30
 8001d3a:	e007      	b.n	8001d4c <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 020f 	bic.w	r2, r2, #15
 8001d4a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d50:	f023 0303 	bic.w	r3, r3, #3
 8001d54:	f043 0201 	orr.w	r2, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	655a      	str	r2, [r3, #84]	; 0x54
 8001d5c:	e007      	b.n	8001d6e <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d62:	f043 0210 	orr.w	r2, r3, #16
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3724      	adds	r7, #36	; 0x24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd90      	pop	{r4, r7, pc}
 8001d78:	24000000 	.word	0x24000000
 8001d7c:	053e2d63 	.word	0x053e2d63
 8001d80:	40022000 	.word	0x40022000
 8001d84:	40022100 	.word	0x40022100
 8001d88:	40022300 	.word	0x40022300
 8001d8c:	fff0c003 	.word	0xfff0c003
 8001d90:	ffffbffc 	.word	0xffffbffc
 8001d94:	fc00f81e 	.word	0xfc00f81e

08001d98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b0a1      	sub	sp, #132	; 0x84
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4a9a      	ldr	r2, [pc, #616]	; (800201c <HAL_ADC_ConfigChannel+0x284>)
 8001db2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x2a>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e2bc      	b.n	800233c <HAL_ADC_ConfigChannel+0x5a4>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fe61 	bl	8001a96 <LL_ADC_REG_IsConversionOngoing>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 82a1 	bne.w	800231e <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d108      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x62>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	0e9b      	lsrs	r3, r3, #26
 8001dee:	f003 031f 	and.w	r3, r3, #31
 8001df2:	2201      	movs	r2, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	e016      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x90>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e0a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001e12:	2320      	movs	r3, #32
 8001e14:	e003      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001e16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f003 031f 	and.w	r3, r3, #31
 8001e22:	2201      	movs	r2, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	69d1      	ldr	r1, [r2, #28]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	430b      	orrs	r3, r1
 8001e34:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6859      	ldr	r1, [r3, #4]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	f7ff fd4a 	bl	80018dc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fe22 	bl	8001a96 <LL_ADC_REG_IsConversionOngoing>
 8001e52:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fe2f 	bl	8001abc <LL_ADC_INJ_IsConversionOngoing>
 8001e5e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 80a0 	bne.w	8001fa8 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 809c 	bne.w	8001fa8 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	6819      	ldr	r1, [r3, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f7ff fd59 	bl	8001934 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x110>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	695a      	ldr	r2, [r3, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	e00a      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x126>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	695a      	ldr	r2, [r3, #20]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d027      	beq.n	8001f18 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6919      	ldr	r1, [r3, #16]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ed6:	f7ff fcad 	bl	8001834 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6919      	ldr	r1, [r3, #16]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	7e5b      	ldrb	r3, [r3, #25]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d102      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x158>
 8001eea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001eee:	e000      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x15a>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f7ff fcd7 	bl	80018a6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6919      	ldr	r1, [r3, #16]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	7e1b      	ldrb	r3, [r3, #24]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d102      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x176>
 8001f08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f0c:	e000      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x178>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	461a      	mov	r2, r3
 8001f12:	f7ff fcaf 	bl	8001874 <LL_ADC_SetDataRightShift>
 8001f16:	e047      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	069b      	lsls	r3, r3, #26
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d107      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f3a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	069b      	lsls	r3, r3, #26
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d107      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f5e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	069b      	lsls	r3, r3, #26
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d107      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f82:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	069b      	lsls	r3, r3, #26
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d107      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fa6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fd5f 	bl	8001a70 <LL_ADC_IsEnabled>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f040 81bb 	bne.w	8002330 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	6819      	ldr	r1, [r3, #0]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	f7ff fce0 	bl	800198c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4a12      	ldr	r2, [pc, #72]	; (800201c <HAL_ADC_ConfigChannel+0x284>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	f040 8130 	bne.w	8002238 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10b      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x268>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0e9b      	lsrs	r3, r3, #26
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	2b09      	cmp	r3, #9
 8001ff6:	bf94      	ite	ls
 8001ff8:	2301      	movls	r3, #1
 8001ffa:	2300      	movhi	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	e01b      	b.n	8002038 <HAL_ADC_ConfigChannel+0x2a0>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800200e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002010:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002014:	2b00      	cmp	r3, #0
 8002016:	d103      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002018:	2320      	movs	r3, #32
 800201a:	e005      	b.n	8002028 <HAL_ADC_ConfigChannel+0x290>
 800201c:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	3301      	adds	r3, #1
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	2b09      	cmp	r3, #9
 8002030:	bf94      	ite	ls
 8002032:	2301      	movls	r3, #1
 8002034:	2300      	movhi	r3, #0
 8002036:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002038:	2b00      	cmp	r3, #0
 800203a:	d079      	beq.n	8002130 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002044:	2b00      	cmp	r3, #0
 8002046:	d107      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x2c0>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	0e9b      	lsrs	r3, r3, #26
 800204e:	3301      	adds	r3, #1
 8002050:	069b      	lsls	r3, r3, #26
 8002052:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002056:	e015      	b.n	8002084 <HAL_ADC_ConfigChannel+0x2ec>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002068:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800206a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002070:	2320      	movs	r3, #32
 8002072:	e003      	b.n	800207c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	3301      	adds	r3, #1
 800207e:	069b      	lsls	r3, r3, #26
 8002080:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800208c:	2b00      	cmp	r3, #0
 800208e:	d109      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x30c>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	0e9b      	lsrs	r3, r3, #26
 8002096:	3301      	adds	r3, #1
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	2101      	movs	r1, #1
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	e017      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x33c>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80020b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80020b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80020bc:	2320      	movs	r3, #32
 80020be:	e003      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 80020c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	3301      	adds	r3, #1
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	2101      	movs	r1, #1
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	ea42 0103 	orr.w	r1, r2, r3
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10a      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x362>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	0e9b      	lsrs	r3, r3, #26
 80020ea:	3301      	adds	r3, #1
 80020ec:	f003 021f 	and.w	r2, r3, #31
 80020f0:	4613      	mov	r3, r2
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4413      	add	r3, r2
 80020f6:	051b      	lsls	r3, r3, #20
 80020f8:	e018      	b.n	800212c <HAL_ADC_ConfigChannel+0x394>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800210c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002112:	2320      	movs	r3, #32
 8002114:	e003      	b.n	800211e <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	3301      	adds	r3, #1
 8002120:	f003 021f 	and.w	r2, r3, #31
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800212c:	430b      	orrs	r3, r1
 800212e:	e07e      	b.n	800222e <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002138:	2b00      	cmp	r3, #0
 800213a:	d107      	bne.n	800214c <HAL_ADC_ConfigChannel+0x3b4>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	0e9b      	lsrs	r3, r3, #26
 8002142:	3301      	adds	r3, #1
 8002144:	069b      	lsls	r3, r3, #26
 8002146:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800214a:	e015      	b.n	8002178 <HAL_ADC_ConfigChannel+0x3e0>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800215e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002164:	2320      	movs	r3, #32
 8002166:	e003      	b.n	8002170 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	3301      	adds	r3, #1
 8002172:	069b      	lsls	r3, r3, #26
 8002174:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002180:	2b00      	cmp	r3, #0
 8002182:	d109      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x400>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	0e9b      	lsrs	r3, r3, #26
 800218a:	3301      	adds	r3, #1
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	2101      	movs	r1, #1
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	e017      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x430>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	61bb      	str	r3, [r7, #24]
  return result;
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80021b0:	2320      	movs	r3, #32
 80021b2:	e003      	b.n	80021bc <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	3301      	adds	r3, #1
 80021be:	f003 031f 	and.w	r3, r3, #31
 80021c2:	2101      	movs	r1, #1
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	ea42 0103 	orr.w	r1, r2, r3
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10d      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x45c>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	0e9b      	lsrs	r3, r3, #26
 80021de:	3301      	adds	r3, #1
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	3b1e      	subs	r3, #30
 80021ec:	051b      	lsls	r3, r3, #20
 80021ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021f2:	e01b      	b.n	800222c <HAL_ADC_ConfigChannel+0x494>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	60fb      	str	r3, [r7, #12]
  return result;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 800220c:	2320      	movs	r3, #32
 800220e:	e003      	b.n	8002218 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	3301      	adds	r3, #1
 800221a:	f003 021f 	and.w	r2, r3, #31
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	3b1e      	subs	r3, #30
 8002226:	051b      	lsls	r3, r3, #20
 8002228:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800222c:	430b      	orrs	r3, r1
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	6892      	ldr	r2, [r2, #8]
 8002232:	4619      	mov	r1, r3
 8002234:	f7ff fb7e 	bl	8001934 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	da77      	bge.n	8002330 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002240:	4840      	ldr	r0, [pc, #256]	; (8002344 <HAL_ADC_ConfigChannel+0x5ac>)
 8002242:	f7ff fae9 	bl	8001818 <LL_ADC_GetCommonPathInternalCh>
 8002246:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002248:	483f      	ldr	r0, [pc, #252]	; (8002348 <HAL_ADC_ConfigChannel+0x5b0>)
 800224a:	f7ff fc11 	bl	8001a70 <LL_ADC_IsEnabled>
 800224e:	4604      	mov	r4, r0
 8002250:	483e      	ldr	r0, [pc, #248]	; (800234c <HAL_ADC_ConfigChannel+0x5b4>)
 8002252:	f7ff fc0d 	bl	8001a70 <LL_ADC_IsEnabled>
 8002256:	4603      	mov	r3, r0
 8002258:	4323      	orrs	r3, r4
 800225a:	2b00      	cmp	r3, #0
 800225c:	d155      	bne.n	800230a <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a3b      	ldr	r2, [pc, #236]	; (8002350 <HAL_ADC_ConfigChannel+0x5b8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d122      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x516>
 8002268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d11d      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a35      	ldr	r2, [pc, #212]	; (800234c <HAL_ADC_ConfigChannel+0x5b4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d159      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800227c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800227e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002282:	4619      	mov	r1, r3
 8002284:	482f      	ldr	r0, [pc, #188]	; (8002344 <HAL_ADC_ConfigChannel+0x5ac>)
 8002286:	f7ff fab4 	bl	80017f2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800228a:	4b32      	ldr	r3, [pc, #200]	; (8002354 <HAL_ADC_ConfigChannel+0x5bc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	099b      	lsrs	r3, r3, #6
 8002290:	4a31      	ldr	r2, [pc, #196]	; (8002358 <HAL_ADC_ConfigChannel+0x5c0>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	099b      	lsrs	r3, r3, #6
 8002298:	3301      	adds	r3, #1
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800229e:	e002      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1f9      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022ac:	e040      	b.n	8002330 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a2a      	ldr	r2, [pc, #168]	; (800235c <HAL_ADC_ConfigChannel+0x5c4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d111      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x544>
 80022b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10c      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a21      	ldr	r2, [pc, #132]	; (800234c <HAL_ADC_ConfigChannel+0x5b4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d131      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80022cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022d2:	4619      	mov	r1, r3
 80022d4:	481b      	ldr	r0, [pc, #108]	; (8002344 <HAL_ADC_ConfigChannel+0x5ac>)
 80022d6:	f7ff fa8c 	bl	80017f2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022da:	e029      	b.n	8002330 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a1f      	ldr	r2, [pc, #124]	; (8002360 <HAL_ADC_ConfigChannel+0x5c8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d124      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x598>
 80022e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d11f      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a15      	ldr	r2, [pc, #84]	; (800234c <HAL_ADC_ConfigChannel+0x5b4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d11a      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80022fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002300:	4619      	mov	r1, r3
 8002302:	4810      	ldr	r0, [pc, #64]	; (8002344 <HAL_ADC_ConfigChannel+0x5ac>)
 8002304:	f7ff fa75 	bl	80017f2 <LL_ADC_SetCommonPathInternalCh>
 8002308:	e012      	b.n	8002330 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230e:	f043 0220 	orr.w	r2, r3, #32
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800231c:	e008      	b.n	8002330 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002322:	f043 0220 	orr.w	r2, r3, #32
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002338:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800233c:	4618      	mov	r0, r3
 800233e:	3784      	adds	r7, #132	; 0x84
 8002340:	46bd      	mov	sp, r7
 8002342:	bd90      	pop	{r4, r7, pc}
 8002344:	40022300 	.word	0x40022300
 8002348:	40022000 	.word	0x40022000
 800234c:	40022100 	.word	0x40022100
 8002350:	cb840000 	.word	0xcb840000
 8002354:	24000000 	.word	0x24000000
 8002358:	053e2d63 	.word	0x053e2d63
 800235c:	bac04000 	.word	0xbac04000
 8002360:	cfb80000 	.word	0xcfb80000

08002364 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800236c:	4b60      	ldr	r3, [pc, #384]	; (80024f0 <ADC_ConfigureBoostMode+0x18c>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01c      	beq.n	80023b2 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002378:	f003 f948 	bl	800560c <HAL_RCC_GetHCLKFreq>
 800237c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002386:	d010      	beq.n	80023aa <ADC_ConfigureBoostMode+0x46>
 8002388:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800238c:	d873      	bhi.n	8002476 <ADC_ConfigureBoostMode+0x112>
 800238e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002392:	d002      	beq.n	800239a <ADC_ConfigureBoostMode+0x36>
 8002394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002398:	d16d      	bne.n	8002476 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	0c1b      	lsrs	r3, r3, #16
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a6:	60fb      	str	r3, [r7, #12]
        break;
 80023a8:	e068      	b.n	800247c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	089b      	lsrs	r3, r3, #2
 80023ae:	60fb      	str	r3, [r7, #12]
        break;
 80023b0:	e064      	b.n	800247c <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80023b2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80023b6:	f04f 0100 	mov.w	r1, #0
 80023ba:	f004 fb41 	bl	8006a40 <HAL_RCCEx_GetPeriphCLKFreq>
 80023be:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80023c8:	d051      	beq.n	800246e <ADC_ConfigureBoostMode+0x10a>
 80023ca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80023ce:	d854      	bhi.n	800247a <ADC_ConfigureBoostMode+0x116>
 80023d0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80023d4:	d047      	beq.n	8002466 <ADC_ConfigureBoostMode+0x102>
 80023d6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80023da:	d84e      	bhi.n	800247a <ADC_ConfigureBoostMode+0x116>
 80023dc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80023e0:	d03d      	beq.n	800245e <ADC_ConfigureBoostMode+0xfa>
 80023e2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80023e6:	d848      	bhi.n	800247a <ADC_ConfigureBoostMode+0x116>
 80023e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023ec:	d033      	beq.n	8002456 <ADC_ConfigureBoostMode+0xf2>
 80023ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023f2:	d842      	bhi.n	800247a <ADC_ConfigureBoostMode+0x116>
 80023f4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80023f8:	d029      	beq.n	800244e <ADC_ConfigureBoostMode+0xea>
 80023fa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80023fe:	d83c      	bhi.n	800247a <ADC_ConfigureBoostMode+0x116>
 8002400:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002404:	d01a      	beq.n	800243c <ADC_ConfigureBoostMode+0xd8>
 8002406:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800240a:	d836      	bhi.n	800247a <ADC_ConfigureBoostMode+0x116>
 800240c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002410:	d014      	beq.n	800243c <ADC_ConfigureBoostMode+0xd8>
 8002412:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002416:	d830      	bhi.n	800247a <ADC_ConfigureBoostMode+0x116>
 8002418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800241c:	d00e      	beq.n	800243c <ADC_ConfigureBoostMode+0xd8>
 800241e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002422:	d82a      	bhi.n	800247a <ADC_ConfigureBoostMode+0x116>
 8002424:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002428:	d008      	beq.n	800243c <ADC_ConfigureBoostMode+0xd8>
 800242a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800242e:	d824      	bhi.n	800247a <ADC_ConfigureBoostMode+0x116>
 8002430:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002434:	d002      	beq.n	800243c <ADC_ConfigureBoostMode+0xd8>
 8002436:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800243a:	d11e      	bne.n	800247a <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	0c9b      	lsrs	r3, r3, #18
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	fbb2 f3f3 	udiv	r3, r2, r3
 800244a:	60fb      	str	r3, [r7, #12]
        break;
 800244c:	e016      	b.n	800247c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	60fb      	str	r3, [r7, #12]
        break;
 8002454:	e012      	b.n	800247c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	095b      	lsrs	r3, r3, #5
 800245a:	60fb      	str	r3, [r7, #12]
        break;
 800245c:	e00e      	b.n	800247c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	099b      	lsrs	r3, r3, #6
 8002462:	60fb      	str	r3, [r7, #12]
        break;
 8002464:	e00a      	b.n	800247c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	09db      	lsrs	r3, r3, #7
 800246a:	60fb      	str	r3, [r7, #12]
        break;
 800246c:	e006      	b.n	800247c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	60fb      	str	r3, [r7, #12]
        break;
 8002474:	e002      	b.n	800247c <ADC_ConfigureBoostMode+0x118>
        break;
 8002476:	bf00      	nop
 8002478:	e000      	b.n	800247c <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 800247a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	085b      	lsrs	r3, r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4a1b      	ldr	r2, [pc, #108]	; (80024f4 <ADC_ConfigureBoostMode+0x190>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d808      	bhi.n	800249c <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002498:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800249a:	e025      	b.n	80024e8 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <ADC_ConfigureBoostMode+0x194>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d80a      	bhi.n	80024ba <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024b6:	609a      	str	r2, [r3, #8]
}
 80024b8:	e016      	b.n	80024e8 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4a0f      	ldr	r2, [pc, #60]	; (80024fc <ADC_ConfigureBoostMode+0x198>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d80a      	bhi.n	80024d8 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d4:	609a      	str	r2, [r3, #8]
}
 80024d6:	e007      	b.n	80024e8 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80024e6:	609a      	str	r2, [r3, #8]
}
 80024e8:	bf00      	nop
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40022300 	.word	0x40022300
 80024f4:	005f5e10 	.word	0x005f5e10
 80024f8:	00bebc20 	.word	0x00bebc20
 80024fc:	017d7840 	.word	0x017d7840

08002500 <LL_ADC_IsEnabled>:
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <LL_ADC_IsEnabled+0x18>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <LL_ADC_IsEnabled+0x1a>
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <LL_ADC_REG_IsConversionOngoing>:
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b04      	cmp	r3, #4
 8002538:	d101      	bne.n	800253e <LL_ADC_REG_IsConversionOngoing+0x18>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b09f      	sub	sp, #124	; 0x7c
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002566:	2302      	movs	r3, #2
 8002568:	e080      	b.n	800266c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002576:	2300      	movs	r3, #0
 8002578:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a3d      	ldr	r2, [pc, #244]	; (8002674 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d102      	bne.n	800258a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002584:	4b3c      	ldr	r3, [pc, #240]	; (8002678 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	e001      	b.n	800258e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10b      	bne.n	80025ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002598:	f043 0220 	orr.w	r2, r3, #32
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e05f      	b.n	800266c <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ffb9 	bl	8002526 <LL_ADC_REG_IsConversionOngoing>
 80025b4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ffb3 	bl	8002526 <LL_ADC_REG_IsConversionOngoing>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d141      	bne.n	800264a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80025c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d13e      	bne.n	800264a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025cc:	4b2b      	ldr	r3, [pc, #172]	; (800267c <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80025ce:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d020      	beq.n	800261a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80025d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	431a      	orrs	r2, r3
 80025e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025ea:	4822      	ldr	r0, [pc, #136]	; (8002674 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80025ec:	f7ff ff88 	bl	8002500 <LL_ADC_IsEnabled>
 80025f0:	4604      	mov	r4, r0
 80025f2:	4821      	ldr	r0, [pc, #132]	; (8002678 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80025f4:	f7ff ff84 	bl	8002500 <LL_ADC_IsEnabled>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4323      	orrs	r3, r4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d12e      	bne.n	800265e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002606:	4013      	ands	r3, r2
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	6811      	ldr	r1, [r2, #0]
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	6892      	ldr	r2, [r2, #8]
 8002610:	430a      	orrs	r2, r1
 8002612:	431a      	orrs	r2, r3
 8002614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002616:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002618:	e021      	b.n	800265e <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800261a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002624:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002626:	4813      	ldr	r0, [pc, #76]	; (8002674 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002628:	f7ff ff6a 	bl	8002500 <LL_ADC_IsEnabled>
 800262c:	4604      	mov	r4, r0
 800262e:	4812      	ldr	r0, [pc, #72]	; (8002678 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002630:	f7ff ff66 	bl	8002500 <LL_ADC_IsEnabled>
 8002634:	4603      	mov	r3, r0
 8002636:	4323      	orrs	r3, r4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d110      	bne.n	800265e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800263c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002642:	4013      	ands	r3, r2
 8002644:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002646:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002648:	e009      	b.n	800265e <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	f043 0220 	orr.w	r2, r3, #32
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800265c:	e000      	b.n	8002660 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800265e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002668:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800266c:	4618      	mov	r0, r3
 800266e:	377c      	adds	r7, #124	; 0x7c
 8002670:	46bd      	mov	sp, r7
 8002672:	bd90      	pop	{r4, r7, pc}
 8002674:	40022000 	.word	0x40022000
 8002678:	40022100 	.word	0x40022100
 800267c:	40022300 	.word	0x40022300
 8002680:	fffff0e0 	.word	0xfffff0e0

08002684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <__NVIC_SetPriorityGrouping+0x40>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026a0:	4013      	ands	r3, r2
 80026a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <__NVIC_SetPriorityGrouping+0x44>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b2:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <__NVIC_SetPriorityGrouping+0x40>)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	60d3      	str	r3, [r2, #12]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00
 80026c8:	05fa0000 	.word	0x05fa0000

080026cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <__NVIC_GetPriorityGrouping+0x18>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	f003 0307 	and.w	r3, r3, #7
}
 80026da:	4618      	mov	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	db0b      	blt.n	8002712 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	f003 021f 	and.w	r2, r3, #31
 8002700:	4907      	ldr	r1, [pc, #28]	; (8002720 <__NVIC_EnableIRQ+0x38>)
 8002702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	2001      	movs	r0, #1
 800270a:	fa00 f202 	lsl.w	r2, r0, r2
 800270e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	e000e100 	.word	0xe000e100

08002724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	6039      	str	r1, [r7, #0]
 800272e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002734:	2b00      	cmp	r3, #0
 8002736:	db0a      	blt.n	800274e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	b2da      	uxtb	r2, r3
 800273c:	490c      	ldr	r1, [pc, #48]	; (8002770 <__NVIC_SetPriority+0x4c>)
 800273e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002742:	0112      	lsls	r2, r2, #4
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	440b      	add	r3, r1
 8002748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800274c:	e00a      	b.n	8002764 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	b2da      	uxtb	r2, r3
 8002752:	4908      	ldr	r1, [pc, #32]	; (8002774 <__NVIC_SetPriority+0x50>)
 8002754:	88fb      	ldrh	r3, [r7, #6]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	3b04      	subs	r3, #4
 800275c:	0112      	lsls	r2, r2, #4
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	440b      	add	r3, r1
 8002762:	761a      	strb	r2, [r3, #24]
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000e100 	.word	0xe000e100
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002778:	b480      	push	{r7}
 800277a:	b089      	sub	sp, #36	; 0x24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f1c3 0307 	rsb	r3, r3, #7
 8002792:	2b04      	cmp	r3, #4
 8002794:	bf28      	it	cs
 8002796:	2304      	movcs	r3, #4
 8002798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3304      	adds	r3, #4
 800279e:	2b06      	cmp	r3, #6
 80027a0:	d902      	bls.n	80027a8 <NVIC_EncodePriority+0x30>
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3b03      	subs	r3, #3
 80027a6:	e000      	b.n	80027aa <NVIC_EncodePriority+0x32>
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	401a      	ands	r2, r3
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ca:	43d9      	mvns	r1, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d0:	4313      	orrs	r3, r2
         );
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3724      	adds	r7, #36	; 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f0:	d301      	bcc.n	80027f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027f2:	2301      	movs	r3, #1
 80027f4:	e00f      	b.n	8002816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027f6:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <SysTick_Config+0x40>)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027fe:	210f      	movs	r1, #15
 8002800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002804:	f7ff ff8e 	bl	8002724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <SysTick_Config+0x40>)
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800280e:	4b04      	ldr	r3, [pc, #16]	; (8002820 <SysTick_Config+0x40>)
 8002810:	2207      	movs	r2, #7
 8002812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	e000e010 	.word	0xe000e010

08002824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff ff29 	bl	8002684 <__NVIC_SetPriorityGrouping>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b086      	sub	sp, #24
 800283e:	af00      	add	r7, sp, #0
 8002840:	4603      	mov	r3, r0
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002848:	f7ff ff40 	bl	80026cc <__NVIC_GetPriorityGrouping>
 800284c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	6978      	ldr	r0, [r7, #20]
 8002854:	f7ff ff90 	bl	8002778 <NVIC_EncodePriority>
 8002858:	4602      	mov	r2, r0
 800285a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff5f 	bl	8002724 <__NVIC_SetPriority>
}
 8002866:	bf00      	nop
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	4603      	mov	r3, r0
 8002876:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002878:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff33 	bl	80026e8 <__NVIC_EnableIRQ>
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ffa4 	bl	80027e0 <SysTick_Config>
 8002898:	4603      	mov	r3, r0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80028ac:	f7fe ff5e 	bl	800176c <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e37f      	b.n	8002fbc <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a66      	ldr	r2, [pc, #408]	; (8002a5c <HAL_DMA_Init+0x1b8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d04a      	beq.n	800295c <HAL_DMA_Init+0xb8>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a65      	ldr	r2, [pc, #404]	; (8002a60 <HAL_DMA_Init+0x1bc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d045      	beq.n	800295c <HAL_DMA_Init+0xb8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a63      	ldr	r2, [pc, #396]	; (8002a64 <HAL_DMA_Init+0x1c0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d040      	beq.n	800295c <HAL_DMA_Init+0xb8>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a62      	ldr	r2, [pc, #392]	; (8002a68 <HAL_DMA_Init+0x1c4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d03b      	beq.n	800295c <HAL_DMA_Init+0xb8>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a60      	ldr	r2, [pc, #384]	; (8002a6c <HAL_DMA_Init+0x1c8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d036      	beq.n	800295c <HAL_DMA_Init+0xb8>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a5f      	ldr	r2, [pc, #380]	; (8002a70 <HAL_DMA_Init+0x1cc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d031      	beq.n	800295c <HAL_DMA_Init+0xb8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a5d      	ldr	r2, [pc, #372]	; (8002a74 <HAL_DMA_Init+0x1d0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d02c      	beq.n	800295c <HAL_DMA_Init+0xb8>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a5c      	ldr	r2, [pc, #368]	; (8002a78 <HAL_DMA_Init+0x1d4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d027      	beq.n	800295c <HAL_DMA_Init+0xb8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a5a      	ldr	r2, [pc, #360]	; (8002a7c <HAL_DMA_Init+0x1d8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d022      	beq.n	800295c <HAL_DMA_Init+0xb8>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a59      	ldr	r2, [pc, #356]	; (8002a80 <HAL_DMA_Init+0x1dc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d01d      	beq.n	800295c <HAL_DMA_Init+0xb8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a57      	ldr	r2, [pc, #348]	; (8002a84 <HAL_DMA_Init+0x1e0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d018      	beq.n	800295c <HAL_DMA_Init+0xb8>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a56      	ldr	r2, [pc, #344]	; (8002a88 <HAL_DMA_Init+0x1e4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d013      	beq.n	800295c <HAL_DMA_Init+0xb8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a54      	ldr	r2, [pc, #336]	; (8002a8c <HAL_DMA_Init+0x1e8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00e      	beq.n	800295c <HAL_DMA_Init+0xb8>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a53      	ldr	r2, [pc, #332]	; (8002a90 <HAL_DMA_Init+0x1ec>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d009      	beq.n	800295c <HAL_DMA_Init+0xb8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a51      	ldr	r2, [pc, #324]	; (8002a94 <HAL_DMA_Init+0x1f0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d004      	beq.n	800295c <HAL_DMA_Init+0xb8>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a50      	ldr	r2, [pc, #320]	; (8002a98 <HAL_DMA_Init+0x1f4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d101      	bne.n	8002960 <HAL_DMA_Init+0xbc>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <HAL_DMA_Init+0xbe>
 8002960:	2300      	movs	r3, #0
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 813c 	beq.w	8002be0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a37      	ldr	r2, [pc, #220]	; (8002a5c <HAL_DMA_Init+0x1b8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d04a      	beq.n	8002a18 <HAL_DMA_Init+0x174>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a36      	ldr	r2, [pc, #216]	; (8002a60 <HAL_DMA_Init+0x1bc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d045      	beq.n	8002a18 <HAL_DMA_Init+0x174>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a34      	ldr	r2, [pc, #208]	; (8002a64 <HAL_DMA_Init+0x1c0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d040      	beq.n	8002a18 <HAL_DMA_Init+0x174>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a33      	ldr	r2, [pc, #204]	; (8002a68 <HAL_DMA_Init+0x1c4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d03b      	beq.n	8002a18 <HAL_DMA_Init+0x174>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a31      	ldr	r2, [pc, #196]	; (8002a6c <HAL_DMA_Init+0x1c8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d036      	beq.n	8002a18 <HAL_DMA_Init+0x174>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a30      	ldr	r2, [pc, #192]	; (8002a70 <HAL_DMA_Init+0x1cc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d031      	beq.n	8002a18 <HAL_DMA_Init+0x174>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a2e      	ldr	r2, [pc, #184]	; (8002a74 <HAL_DMA_Init+0x1d0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d02c      	beq.n	8002a18 <HAL_DMA_Init+0x174>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a2d      	ldr	r2, [pc, #180]	; (8002a78 <HAL_DMA_Init+0x1d4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d027      	beq.n	8002a18 <HAL_DMA_Init+0x174>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a2b      	ldr	r2, [pc, #172]	; (8002a7c <HAL_DMA_Init+0x1d8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d022      	beq.n	8002a18 <HAL_DMA_Init+0x174>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a2a      	ldr	r2, [pc, #168]	; (8002a80 <HAL_DMA_Init+0x1dc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d01d      	beq.n	8002a18 <HAL_DMA_Init+0x174>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a28      	ldr	r2, [pc, #160]	; (8002a84 <HAL_DMA_Init+0x1e0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d018      	beq.n	8002a18 <HAL_DMA_Init+0x174>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a27      	ldr	r2, [pc, #156]	; (8002a88 <HAL_DMA_Init+0x1e4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d013      	beq.n	8002a18 <HAL_DMA_Init+0x174>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a25      	ldr	r2, [pc, #148]	; (8002a8c <HAL_DMA_Init+0x1e8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00e      	beq.n	8002a18 <HAL_DMA_Init+0x174>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a24      	ldr	r2, [pc, #144]	; (8002a90 <HAL_DMA_Init+0x1ec>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d009      	beq.n	8002a18 <HAL_DMA_Init+0x174>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a22      	ldr	r2, [pc, #136]	; (8002a94 <HAL_DMA_Init+0x1f0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d004      	beq.n	8002a18 <HAL_DMA_Init+0x174>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a21      	ldr	r2, [pc, #132]	; (8002a98 <HAL_DMA_Init+0x1f4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d108      	bne.n	8002a2a <HAL_DMA_Init+0x186>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	e007      	b.n	8002a3a <HAL_DMA_Init+0x196>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0201 	bic.w	r2, r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a3a:	e02f      	b.n	8002a9c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a3c:	f7fe fe96 	bl	800176c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b05      	cmp	r3, #5
 8002a48:	d928      	bls.n	8002a9c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2203      	movs	r2, #3
 8002a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e2af      	b.n	8002fbc <HAL_DMA_Init+0x718>
 8002a5c:	40020010 	.word	0x40020010
 8002a60:	40020028 	.word	0x40020028
 8002a64:	40020040 	.word	0x40020040
 8002a68:	40020058 	.word	0x40020058
 8002a6c:	40020070 	.word	0x40020070
 8002a70:	40020088 	.word	0x40020088
 8002a74:	400200a0 	.word	0x400200a0
 8002a78:	400200b8 	.word	0x400200b8
 8002a7c:	40020410 	.word	0x40020410
 8002a80:	40020428 	.word	0x40020428
 8002a84:	40020440 	.word	0x40020440
 8002a88:	40020458 	.word	0x40020458
 8002a8c:	40020470 	.word	0x40020470
 8002a90:	40020488 	.word	0x40020488
 8002a94:	400204a0 	.word	0x400204a0
 8002a98:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1c8      	bne.n	8002a3c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4b73      	ldr	r3, [pc, #460]	; (8002c84 <HAL_DMA_Init+0x3e0>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002ac2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ace:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ada:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d107      	bne.n	8002b00 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	4313      	orrs	r3, r2
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b28      	cmp	r3, #40	; 0x28
 8002b06:	d903      	bls.n	8002b10 <HAL_DMA_Init+0x26c>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b2e      	cmp	r3, #46	; 0x2e
 8002b0e:	d91f      	bls.n	8002b50 <HAL_DMA_Init+0x2ac>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b3e      	cmp	r3, #62	; 0x3e
 8002b16:	d903      	bls.n	8002b20 <HAL_DMA_Init+0x27c>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b42      	cmp	r3, #66	; 0x42
 8002b1e:	d917      	bls.n	8002b50 <HAL_DMA_Init+0x2ac>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b46      	cmp	r3, #70	; 0x46
 8002b26:	d903      	bls.n	8002b30 <HAL_DMA_Init+0x28c>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b48      	cmp	r3, #72	; 0x48
 8002b2e:	d90f      	bls.n	8002b50 <HAL_DMA_Init+0x2ac>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b4e      	cmp	r3, #78	; 0x4e
 8002b36:	d903      	bls.n	8002b40 <HAL_DMA_Init+0x29c>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b52      	cmp	r3, #82	; 0x52
 8002b3e:	d907      	bls.n	8002b50 <HAL_DMA_Init+0x2ac>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b73      	cmp	r3, #115	; 0x73
 8002b46:	d905      	bls.n	8002b54 <HAL_DMA_Init+0x2b0>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b77      	cmp	r3, #119	; 0x77
 8002b4e:	d801      	bhi.n	8002b54 <HAL_DMA_Init+0x2b0>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <HAL_DMA_Init+0x2b2>
 8002b54:	2300      	movs	r3, #0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b60:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f023 0307 	bic.w	r3, r3, #7
 8002b78:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d117      	bne.n	8002bbc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00e      	beq.n	8002bbc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f001 fa24 	bl	8003fec <DMA_CheckFifoParam>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2240      	movs	r2, #64	; 0x40
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e1ff      	b.n	8002fbc <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f001 f95f 	bl	8003e88 <DMA_CalcBaseAndBitshift>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	223f      	movs	r2, #63	; 0x3f
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	e0fe      	b.n	8002dde <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a28      	ldr	r2, [pc, #160]	; (8002c88 <HAL_DMA_Init+0x3e4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d04a      	beq.n	8002c80 <HAL_DMA_Init+0x3dc>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a27      	ldr	r2, [pc, #156]	; (8002c8c <HAL_DMA_Init+0x3e8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d045      	beq.n	8002c80 <HAL_DMA_Init+0x3dc>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a25      	ldr	r2, [pc, #148]	; (8002c90 <HAL_DMA_Init+0x3ec>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d040      	beq.n	8002c80 <HAL_DMA_Init+0x3dc>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a24      	ldr	r2, [pc, #144]	; (8002c94 <HAL_DMA_Init+0x3f0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d03b      	beq.n	8002c80 <HAL_DMA_Init+0x3dc>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a22      	ldr	r2, [pc, #136]	; (8002c98 <HAL_DMA_Init+0x3f4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d036      	beq.n	8002c80 <HAL_DMA_Init+0x3dc>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a21      	ldr	r2, [pc, #132]	; (8002c9c <HAL_DMA_Init+0x3f8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d031      	beq.n	8002c80 <HAL_DMA_Init+0x3dc>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a1f      	ldr	r2, [pc, #124]	; (8002ca0 <HAL_DMA_Init+0x3fc>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d02c      	beq.n	8002c80 <HAL_DMA_Init+0x3dc>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a1e      	ldr	r2, [pc, #120]	; (8002ca4 <HAL_DMA_Init+0x400>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d027      	beq.n	8002c80 <HAL_DMA_Init+0x3dc>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1c      	ldr	r2, [pc, #112]	; (8002ca8 <HAL_DMA_Init+0x404>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d022      	beq.n	8002c80 <HAL_DMA_Init+0x3dc>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1b      	ldr	r2, [pc, #108]	; (8002cac <HAL_DMA_Init+0x408>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d01d      	beq.n	8002c80 <HAL_DMA_Init+0x3dc>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a19      	ldr	r2, [pc, #100]	; (8002cb0 <HAL_DMA_Init+0x40c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d018      	beq.n	8002c80 <HAL_DMA_Init+0x3dc>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a18      	ldr	r2, [pc, #96]	; (8002cb4 <HAL_DMA_Init+0x410>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d013      	beq.n	8002c80 <HAL_DMA_Init+0x3dc>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a16      	ldr	r2, [pc, #88]	; (8002cb8 <HAL_DMA_Init+0x414>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00e      	beq.n	8002c80 <HAL_DMA_Init+0x3dc>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a15      	ldr	r2, [pc, #84]	; (8002cbc <HAL_DMA_Init+0x418>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d009      	beq.n	8002c80 <HAL_DMA_Init+0x3dc>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a13      	ldr	r2, [pc, #76]	; (8002cc0 <HAL_DMA_Init+0x41c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d004      	beq.n	8002c80 <HAL_DMA_Init+0x3dc>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <HAL_DMA_Init+0x420>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d123      	bne.n	8002cc8 <HAL_DMA_Init+0x424>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e022      	b.n	8002cca <HAL_DMA_Init+0x426>
 8002c84:	fe10803f 	.word	0xfe10803f
 8002c88:	48022c08 	.word	0x48022c08
 8002c8c:	48022c1c 	.word	0x48022c1c
 8002c90:	48022c30 	.word	0x48022c30
 8002c94:	48022c44 	.word	0x48022c44
 8002c98:	48022c58 	.word	0x48022c58
 8002c9c:	48022c6c 	.word	0x48022c6c
 8002ca0:	48022c80 	.word	0x48022c80
 8002ca4:	48022c94 	.word	0x48022c94
 8002ca8:	58025408 	.word	0x58025408
 8002cac:	5802541c 	.word	0x5802541c
 8002cb0:	58025430 	.word	0x58025430
 8002cb4:	58025444 	.word	0x58025444
 8002cb8:	58025458 	.word	0x58025458
 8002cbc:	5802546c 	.word	0x5802546c
 8002cc0:	58025480 	.word	0x58025480
 8002cc4:	58025494 	.word	0x58025494
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d07e      	beq.n	8002dcc <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a80      	ldr	r2, [pc, #512]	; (8002ed4 <HAL_DMA_Init+0x630>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d021      	beq.n	8002d1c <HAL_DMA_Init+0x478>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a7e      	ldr	r2, [pc, #504]	; (8002ed8 <HAL_DMA_Init+0x634>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d01c      	beq.n	8002d1c <HAL_DMA_Init+0x478>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a7d      	ldr	r2, [pc, #500]	; (8002edc <HAL_DMA_Init+0x638>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d017      	beq.n	8002d1c <HAL_DMA_Init+0x478>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a7b      	ldr	r2, [pc, #492]	; (8002ee0 <HAL_DMA_Init+0x63c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d012      	beq.n	8002d1c <HAL_DMA_Init+0x478>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a7a      	ldr	r2, [pc, #488]	; (8002ee4 <HAL_DMA_Init+0x640>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00d      	beq.n	8002d1c <HAL_DMA_Init+0x478>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a78      	ldr	r2, [pc, #480]	; (8002ee8 <HAL_DMA_Init+0x644>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d008      	beq.n	8002d1c <HAL_DMA_Init+0x478>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a77      	ldr	r2, [pc, #476]	; (8002eec <HAL_DMA_Init+0x648>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d003      	beq.n	8002d1c <HAL_DMA_Init+0x478>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a75      	ldr	r2, [pc, #468]	; (8002ef0 <HAL_DMA_Init+0x64c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2202      	movs	r2, #2
 8002d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4b6e      	ldr	r3, [pc, #440]	; (8002ef4 <HAL_DMA_Init+0x650>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b40      	cmp	r3, #64	; 0x40
 8002d44:	d008      	beq.n	8002d58 <HAL_DMA_Init+0x4b4>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b80      	cmp	r3, #128	; 0x80
 8002d4c:	d102      	bne.n	8002d54 <HAL_DMA_Init+0x4b0>
 8002d4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d52:	e002      	b.n	8002d5a <HAL_DMA_Init+0x4b6>
 8002d54:	2300      	movs	r3, #0
 8002d56:	e000      	b.n	8002d5a <HAL_DMA_Init+0x4b6>
 8002d58:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	68d2      	ldr	r2, [r2, #12]
 8002d5e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d88:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b56      	ldr	r3, [pc, #344]	; (8002ef8 <HAL_DMA_Init+0x654>)
 8002da0:	4413      	add	r3, r2
 8002da2:	4a56      	ldr	r2, [pc, #344]	; (8002efc <HAL_DMA_Init+0x658>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	009a      	lsls	r2, r3, #2
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f001 f869 	bl	8003e88 <DMA_CalcBaseAndBitshift>
 8002db6:	4603      	mov	r3, r0
 8002db8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	409a      	lsls	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	e008      	b.n	8002dde <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2240      	movs	r2, #64	; 0x40
 8002dd0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e0ee      	b.n	8002fbc <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a47      	ldr	r2, [pc, #284]	; (8002f00 <HAL_DMA_Init+0x65c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d072      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a45      	ldr	r2, [pc, #276]	; (8002f04 <HAL_DMA_Init+0x660>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d06d      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a44      	ldr	r2, [pc, #272]	; (8002f08 <HAL_DMA_Init+0x664>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d068      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a42      	ldr	r2, [pc, #264]	; (8002f0c <HAL_DMA_Init+0x668>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d063      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a41      	ldr	r2, [pc, #260]	; (8002f10 <HAL_DMA_Init+0x66c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d05e      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a3f      	ldr	r2, [pc, #252]	; (8002f14 <HAL_DMA_Init+0x670>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d059      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a3e      	ldr	r2, [pc, #248]	; (8002f18 <HAL_DMA_Init+0x674>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d054      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a3c      	ldr	r2, [pc, #240]	; (8002f1c <HAL_DMA_Init+0x678>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d04f      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a3b      	ldr	r2, [pc, #236]	; (8002f20 <HAL_DMA_Init+0x67c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d04a      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a39      	ldr	r2, [pc, #228]	; (8002f24 <HAL_DMA_Init+0x680>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d045      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a38      	ldr	r2, [pc, #224]	; (8002f28 <HAL_DMA_Init+0x684>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d040      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a36      	ldr	r2, [pc, #216]	; (8002f2c <HAL_DMA_Init+0x688>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d03b      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a35      	ldr	r2, [pc, #212]	; (8002f30 <HAL_DMA_Init+0x68c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d036      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a33      	ldr	r2, [pc, #204]	; (8002f34 <HAL_DMA_Init+0x690>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d031      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a32      	ldr	r2, [pc, #200]	; (8002f38 <HAL_DMA_Init+0x694>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d02c      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a30      	ldr	r2, [pc, #192]	; (8002f3c <HAL_DMA_Init+0x698>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d027      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a14      	ldr	r2, [pc, #80]	; (8002ed4 <HAL_DMA_Init+0x630>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d022      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a12      	ldr	r2, [pc, #72]	; (8002ed8 <HAL_DMA_Init+0x634>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d01d      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a11      	ldr	r2, [pc, #68]	; (8002edc <HAL_DMA_Init+0x638>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d018      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a0f      	ldr	r2, [pc, #60]	; (8002ee0 <HAL_DMA_Init+0x63c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d013      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a0e      	ldr	r2, [pc, #56]	; (8002ee4 <HAL_DMA_Init+0x640>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00e      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a0c      	ldr	r2, [pc, #48]	; (8002ee8 <HAL_DMA_Init+0x644>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d009      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a0b      	ldr	r2, [pc, #44]	; (8002eec <HAL_DMA_Init+0x648>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d004      	beq.n	8002ece <HAL_DMA_Init+0x62a>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a09      	ldr	r2, [pc, #36]	; (8002ef0 <HAL_DMA_Init+0x64c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d138      	bne.n	8002f40 <HAL_DMA_Init+0x69c>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e037      	b.n	8002f42 <HAL_DMA_Init+0x69e>
 8002ed2:	bf00      	nop
 8002ed4:	58025408 	.word	0x58025408
 8002ed8:	5802541c 	.word	0x5802541c
 8002edc:	58025430 	.word	0x58025430
 8002ee0:	58025444 	.word	0x58025444
 8002ee4:	58025458 	.word	0x58025458
 8002ee8:	5802546c 	.word	0x5802546c
 8002eec:	58025480 	.word	0x58025480
 8002ef0:	58025494 	.word	0x58025494
 8002ef4:	fffe000f 	.word	0xfffe000f
 8002ef8:	a7fdabf8 	.word	0xa7fdabf8
 8002efc:	cccccccd 	.word	0xcccccccd
 8002f00:	40020010 	.word	0x40020010
 8002f04:	40020028 	.word	0x40020028
 8002f08:	40020040 	.word	0x40020040
 8002f0c:	40020058 	.word	0x40020058
 8002f10:	40020070 	.word	0x40020070
 8002f14:	40020088 	.word	0x40020088
 8002f18:	400200a0 	.word	0x400200a0
 8002f1c:	400200b8 	.word	0x400200b8
 8002f20:	40020410 	.word	0x40020410
 8002f24:	40020428 	.word	0x40020428
 8002f28:	40020440 	.word	0x40020440
 8002f2c:	40020458 	.word	0x40020458
 8002f30:	40020470 	.word	0x40020470
 8002f34:	40020488 	.word	0x40020488
 8002f38:	400204a0 	.word	0x400204a0
 8002f3c:	400204b8 	.word	0x400204b8
 8002f40:	2300      	movs	r3, #0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d032      	beq.n	8002fac <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f001 f8cc 	bl	80040e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b80      	cmp	r3, #128	; 0x80
 8002f52:	d102      	bne.n	8002f5a <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f6e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d010      	beq.n	8002f9a <HAL_DMA_Init+0x6f6>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d80c      	bhi.n	8002f9a <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f001 f949 	bl	8004218 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	e008      	b.n	8002fac <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fd0:	4b67      	ldr	r3, [pc, #412]	; (8003170 <HAL_DMA_IRQHandler+0x1ac>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a67      	ldr	r2, [pc, #412]	; (8003174 <HAL_DMA_IRQHandler+0x1b0>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	0a9b      	lsrs	r3, r3, #10
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a5f      	ldr	r2, [pc, #380]	; (8003178 <HAL_DMA_IRQHandler+0x1b4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d04a      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a5d      	ldr	r2, [pc, #372]	; (800317c <HAL_DMA_IRQHandler+0x1b8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d045      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a5c      	ldr	r2, [pc, #368]	; (8003180 <HAL_DMA_IRQHandler+0x1bc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d040      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a5a      	ldr	r2, [pc, #360]	; (8003184 <HAL_DMA_IRQHandler+0x1c0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d03b      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a59      	ldr	r2, [pc, #356]	; (8003188 <HAL_DMA_IRQHandler+0x1c4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d036      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a57      	ldr	r2, [pc, #348]	; (800318c <HAL_DMA_IRQHandler+0x1c8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d031      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a56      	ldr	r2, [pc, #344]	; (8003190 <HAL_DMA_IRQHandler+0x1cc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d02c      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a54      	ldr	r2, [pc, #336]	; (8003194 <HAL_DMA_IRQHandler+0x1d0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d027      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a53      	ldr	r2, [pc, #332]	; (8003198 <HAL_DMA_IRQHandler+0x1d4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d022      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a51      	ldr	r2, [pc, #324]	; (800319c <HAL_DMA_IRQHandler+0x1d8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d01d      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a50      	ldr	r2, [pc, #320]	; (80031a0 <HAL_DMA_IRQHandler+0x1dc>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d018      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a4e      	ldr	r2, [pc, #312]	; (80031a4 <HAL_DMA_IRQHandler+0x1e0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a4d      	ldr	r2, [pc, #308]	; (80031a8 <HAL_DMA_IRQHandler+0x1e4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d00e      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a4b      	ldr	r2, [pc, #300]	; (80031ac <HAL_DMA_IRQHandler+0x1e8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d009      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a4a      	ldr	r2, [pc, #296]	; (80031b0 <HAL_DMA_IRQHandler+0x1ec>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d004      	beq.n	8003096 <HAL_DMA_IRQHandler+0xd2>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a48      	ldr	r2, [pc, #288]	; (80031b4 <HAL_DMA_IRQHandler+0x1f0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d101      	bne.n	800309a <HAL_DMA_IRQHandler+0xd6>
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <HAL_DMA_IRQHandler+0xd8>
 800309a:	2300      	movs	r3, #0
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 842b 	beq.w	80038f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	2208      	movs	r2, #8
 80030ac:	409a      	lsls	r2, r3
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 80a2 	beq.w	80031fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a2e      	ldr	r2, [pc, #184]	; (8003178 <HAL_DMA_IRQHandler+0x1b4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d04a      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a2d      	ldr	r2, [pc, #180]	; (800317c <HAL_DMA_IRQHandler+0x1b8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d045      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a2b      	ldr	r2, [pc, #172]	; (8003180 <HAL_DMA_IRQHandler+0x1bc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d040      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a2a      	ldr	r2, [pc, #168]	; (8003184 <HAL_DMA_IRQHandler+0x1c0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d03b      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a28      	ldr	r2, [pc, #160]	; (8003188 <HAL_DMA_IRQHandler+0x1c4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d036      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a27      	ldr	r2, [pc, #156]	; (800318c <HAL_DMA_IRQHandler+0x1c8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d031      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a25      	ldr	r2, [pc, #148]	; (8003190 <HAL_DMA_IRQHandler+0x1cc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d02c      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a24      	ldr	r2, [pc, #144]	; (8003194 <HAL_DMA_IRQHandler+0x1d0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d027      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a22      	ldr	r2, [pc, #136]	; (8003198 <HAL_DMA_IRQHandler+0x1d4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d022      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a21      	ldr	r2, [pc, #132]	; (800319c <HAL_DMA_IRQHandler+0x1d8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d01d      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1f      	ldr	r2, [pc, #124]	; (80031a0 <HAL_DMA_IRQHandler+0x1dc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d018      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1e      	ldr	r2, [pc, #120]	; (80031a4 <HAL_DMA_IRQHandler+0x1e0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d013      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1c      	ldr	r2, [pc, #112]	; (80031a8 <HAL_DMA_IRQHandler+0x1e4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00e      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1b      	ldr	r2, [pc, #108]	; (80031ac <HAL_DMA_IRQHandler+0x1e8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d009      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a19      	ldr	r2, [pc, #100]	; (80031b0 <HAL_DMA_IRQHandler+0x1ec>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d004      	beq.n	8003158 <HAL_DMA_IRQHandler+0x194>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <HAL_DMA_IRQHandler+0x1f0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d12f      	bne.n	80031b8 <HAL_DMA_IRQHandler+0x1f4>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	bf14      	ite	ne
 8003166:	2301      	movne	r3, #1
 8003168:	2300      	moveq	r3, #0
 800316a:	b2db      	uxtb	r3, r3
 800316c:	e02e      	b.n	80031cc <HAL_DMA_IRQHandler+0x208>
 800316e:	bf00      	nop
 8003170:	24000000 	.word	0x24000000
 8003174:	1b4e81b5 	.word	0x1b4e81b5
 8003178:	40020010 	.word	0x40020010
 800317c:	40020028 	.word	0x40020028
 8003180:	40020040 	.word	0x40020040
 8003184:	40020058 	.word	0x40020058
 8003188:	40020070 	.word	0x40020070
 800318c:	40020088 	.word	0x40020088
 8003190:	400200a0 	.word	0x400200a0
 8003194:	400200b8 	.word	0x400200b8
 8003198:	40020410 	.word	0x40020410
 800319c:	40020428 	.word	0x40020428
 80031a0:	40020440 	.word	0x40020440
 80031a4:	40020458 	.word	0x40020458
 80031a8:	40020470 	.word	0x40020470
 80031ac:	40020488 	.word	0x40020488
 80031b0:	400204a0 	.word	0x400204a0
 80031b4:	400204b8 	.word	0x400204b8
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	bf14      	ite	ne
 80031c6:	2301      	movne	r3, #1
 80031c8:	2300      	moveq	r3, #0
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d015      	beq.n	80031fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0204 	bic.w	r2, r2, #4
 80031de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	2208      	movs	r2, #8
 80031ea:	409a      	lsls	r2, r3
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f4:	f043 0201 	orr.w	r2, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	fa22 f303 	lsr.w	r3, r2, r3
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d06e      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a69      	ldr	r2, [pc, #420]	; (80033bc <HAL_DMA_IRQHandler+0x3f8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d04a      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a67      	ldr	r2, [pc, #412]	; (80033c0 <HAL_DMA_IRQHandler+0x3fc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d045      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a66      	ldr	r2, [pc, #408]	; (80033c4 <HAL_DMA_IRQHandler+0x400>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d040      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a64      	ldr	r2, [pc, #400]	; (80033c8 <HAL_DMA_IRQHandler+0x404>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d03b      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a63      	ldr	r2, [pc, #396]	; (80033cc <HAL_DMA_IRQHandler+0x408>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d036      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a61      	ldr	r2, [pc, #388]	; (80033d0 <HAL_DMA_IRQHandler+0x40c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d031      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a60      	ldr	r2, [pc, #384]	; (80033d4 <HAL_DMA_IRQHandler+0x410>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d02c      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a5e      	ldr	r2, [pc, #376]	; (80033d8 <HAL_DMA_IRQHandler+0x414>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d027      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a5d      	ldr	r2, [pc, #372]	; (80033dc <HAL_DMA_IRQHandler+0x418>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d022      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a5b      	ldr	r2, [pc, #364]	; (80033e0 <HAL_DMA_IRQHandler+0x41c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d01d      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a5a      	ldr	r2, [pc, #360]	; (80033e4 <HAL_DMA_IRQHandler+0x420>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d018      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a58      	ldr	r2, [pc, #352]	; (80033e8 <HAL_DMA_IRQHandler+0x424>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d013      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a57      	ldr	r2, [pc, #348]	; (80033ec <HAL_DMA_IRQHandler+0x428>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00e      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a55      	ldr	r2, [pc, #340]	; (80033f0 <HAL_DMA_IRQHandler+0x42c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d009      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a54      	ldr	r2, [pc, #336]	; (80033f4 <HAL_DMA_IRQHandler+0x430>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d004      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x2ee>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a52      	ldr	r2, [pc, #328]	; (80033f8 <HAL_DMA_IRQHandler+0x434>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d10a      	bne.n	80032c8 <HAL_DMA_IRQHandler+0x304>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bf14      	ite	ne
 80032c0:	2301      	movne	r3, #1
 80032c2:	2300      	moveq	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	e003      	b.n	80032d0 <HAL_DMA_IRQHandler+0x30c>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2300      	movs	r3, #0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00d      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	2201      	movs	r2, #1
 80032de:	409a      	lsls	r2, r3
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e8:	f043 0202 	orr.w	r2, r3, #2
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	2204      	movs	r2, #4
 80032fa:	409a      	lsls	r2, r3
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 808f 	beq.w	8003424 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a2c      	ldr	r2, [pc, #176]	; (80033bc <HAL_DMA_IRQHandler+0x3f8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d04a      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a2a      	ldr	r2, [pc, #168]	; (80033c0 <HAL_DMA_IRQHandler+0x3fc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d045      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a29      	ldr	r2, [pc, #164]	; (80033c4 <HAL_DMA_IRQHandler+0x400>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d040      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a27      	ldr	r2, [pc, #156]	; (80033c8 <HAL_DMA_IRQHandler+0x404>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d03b      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a26      	ldr	r2, [pc, #152]	; (80033cc <HAL_DMA_IRQHandler+0x408>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d036      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a24      	ldr	r2, [pc, #144]	; (80033d0 <HAL_DMA_IRQHandler+0x40c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d031      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a23      	ldr	r2, [pc, #140]	; (80033d4 <HAL_DMA_IRQHandler+0x410>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d02c      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a21      	ldr	r2, [pc, #132]	; (80033d8 <HAL_DMA_IRQHandler+0x414>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d027      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a20      	ldr	r2, [pc, #128]	; (80033dc <HAL_DMA_IRQHandler+0x418>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d022      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1e      	ldr	r2, [pc, #120]	; (80033e0 <HAL_DMA_IRQHandler+0x41c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d01d      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1d      	ldr	r2, [pc, #116]	; (80033e4 <HAL_DMA_IRQHandler+0x420>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d018      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1b      	ldr	r2, [pc, #108]	; (80033e8 <HAL_DMA_IRQHandler+0x424>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d013      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1a      	ldr	r2, [pc, #104]	; (80033ec <HAL_DMA_IRQHandler+0x428>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00e      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <HAL_DMA_IRQHandler+0x42c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d009      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a17      	ldr	r2, [pc, #92]	; (80033f4 <HAL_DMA_IRQHandler+0x430>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d004      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x3e2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a15      	ldr	r2, [pc, #84]	; (80033f8 <HAL_DMA_IRQHandler+0x434>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d12a      	bne.n	80033fc <HAL_DMA_IRQHandler+0x438>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf14      	ite	ne
 80033b4:	2301      	movne	r3, #1
 80033b6:	2300      	moveq	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e023      	b.n	8003404 <HAL_DMA_IRQHandler+0x440>
 80033bc:	40020010 	.word	0x40020010
 80033c0:	40020028 	.word	0x40020028
 80033c4:	40020040 	.word	0x40020040
 80033c8:	40020058 	.word	0x40020058
 80033cc:	40020070 	.word	0x40020070
 80033d0:	40020088 	.word	0x40020088
 80033d4:	400200a0 	.word	0x400200a0
 80033d8:	400200b8 	.word	0x400200b8
 80033dc:	40020410 	.word	0x40020410
 80033e0:	40020428 	.word	0x40020428
 80033e4:	40020440 	.word	0x40020440
 80033e8:	40020458 	.word	0x40020458
 80033ec:	40020470 	.word	0x40020470
 80033f0:	40020488 	.word	0x40020488
 80033f4:	400204a0 	.word	0x400204a0
 80033f8:	400204b8 	.word	0x400204b8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2300      	movs	r3, #0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00d      	beq.n	8003424 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	2204      	movs	r2, #4
 8003412:	409a      	lsls	r2, r3
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341c:	f043 0204 	orr.w	r2, r3, #4
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	2210      	movs	r2, #16
 800342e:	409a      	lsls	r2, r3
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80a6 	beq.w	8003586 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a85      	ldr	r2, [pc, #532]	; (8003654 <HAL_DMA_IRQHandler+0x690>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d04a      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a83      	ldr	r2, [pc, #524]	; (8003658 <HAL_DMA_IRQHandler+0x694>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d045      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a82      	ldr	r2, [pc, #520]	; (800365c <HAL_DMA_IRQHandler+0x698>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d040      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a80      	ldr	r2, [pc, #512]	; (8003660 <HAL_DMA_IRQHandler+0x69c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d03b      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a7f      	ldr	r2, [pc, #508]	; (8003664 <HAL_DMA_IRQHandler+0x6a0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d036      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a7d      	ldr	r2, [pc, #500]	; (8003668 <HAL_DMA_IRQHandler+0x6a4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d031      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a7c      	ldr	r2, [pc, #496]	; (800366c <HAL_DMA_IRQHandler+0x6a8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d02c      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a7a      	ldr	r2, [pc, #488]	; (8003670 <HAL_DMA_IRQHandler+0x6ac>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d027      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a79      	ldr	r2, [pc, #484]	; (8003674 <HAL_DMA_IRQHandler+0x6b0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d022      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a77      	ldr	r2, [pc, #476]	; (8003678 <HAL_DMA_IRQHandler+0x6b4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d01d      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a76      	ldr	r2, [pc, #472]	; (800367c <HAL_DMA_IRQHandler+0x6b8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d018      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a74      	ldr	r2, [pc, #464]	; (8003680 <HAL_DMA_IRQHandler+0x6bc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d013      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a73      	ldr	r2, [pc, #460]	; (8003684 <HAL_DMA_IRQHandler+0x6c0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00e      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a71      	ldr	r2, [pc, #452]	; (8003688 <HAL_DMA_IRQHandler+0x6c4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d009      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a70      	ldr	r2, [pc, #448]	; (800368c <HAL_DMA_IRQHandler+0x6c8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d004      	beq.n	80034da <HAL_DMA_IRQHandler+0x516>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a6e      	ldr	r2, [pc, #440]	; (8003690 <HAL_DMA_IRQHandler+0x6cc>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d10a      	bne.n	80034f0 <HAL_DMA_IRQHandler+0x52c>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e009      	b.n	8003504 <HAL_DMA_IRQHandler+0x540>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bf14      	ite	ne
 80034fe:	2301      	movne	r3, #1
 8003500:	2300      	moveq	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d03e      	beq.n	8003586 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	2210      	movs	r2, #16
 8003512:	409a      	lsls	r2, r3
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d018      	beq.n	8003558 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d108      	bne.n	8003546 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	2b00      	cmp	r3, #0
 800353a:	d024      	beq.n	8003586 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	4798      	blx	r3
 8003544:	e01f      	b.n	8003586 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354a:	2b00      	cmp	r3, #0
 800354c:	d01b      	beq.n	8003586 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	4798      	blx	r3
 8003556:	e016      	b.n	8003586 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d107      	bne.n	8003576 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0208 	bic.w	r2, r2, #8
 8003574:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358a:	f003 031f 	and.w	r3, r3, #31
 800358e:	2220      	movs	r2, #32
 8003590:	409a      	lsls	r2, r3
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	4013      	ands	r3, r2
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8110 	beq.w	80037bc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2c      	ldr	r2, [pc, #176]	; (8003654 <HAL_DMA_IRQHandler+0x690>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d04a      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a2b      	ldr	r2, [pc, #172]	; (8003658 <HAL_DMA_IRQHandler+0x694>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d045      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a29      	ldr	r2, [pc, #164]	; (800365c <HAL_DMA_IRQHandler+0x698>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d040      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a28      	ldr	r2, [pc, #160]	; (8003660 <HAL_DMA_IRQHandler+0x69c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d03b      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a26      	ldr	r2, [pc, #152]	; (8003664 <HAL_DMA_IRQHandler+0x6a0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d036      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a25      	ldr	r2, [pc, #148]	; (8003668 <HAL_DMA_IRQHandler+0x6a4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d031      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a23      	ldr	r2, [pc, #140]	; (800366c <HAL_DMA_IRQHandler+0x6a8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d02c      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a22      	ldr	r2, [pc, #136]	; (8003670 <HAL_DMA_IRQHandler+0x6ac>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d027      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a20      	ldr	r2, [pc, #128]	; (8003674 <HAL_DMA_IRQHandler+0x6b0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d022      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1f      	ldr	r2, [pc, #124]	; (8003678 <HAL_DMA_IRQHandler+0x6b4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d01d      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1d      	ldr	r2, [pc, #116]	; (800367c <HAL_DMA_IRQHandler+0x6b8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d018      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1c      	ldr	r2, [pc, #112]	; (8003680 <HAL_DMA_IRQHandler+0x6bc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d013      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1a      	ldr	r2, [pc, #104]	; (8003684 <HAL_DMA_IRQHandler+0x6c0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00e      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a19      	ldr	r2, [pc, #100]	; (8003688 <HAL_DMA_IRQHandler+0x6c4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d009      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a17      	ldr	r2, [pc, #92]	; (800368c <HAL_DMA_IRQHandler+0x6c8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <HAL_DMA_IRQHandler+0x678>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a16      	ldr	r2, [pc, #88]	; (8003690 <HAL_DMA_IRQHandler+0x6cc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d12b      	bne.n	8003694 <HAL_DMA_IRQHandler+0x6d0>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b00      	cmp	r3, #0
 8003648:	bf14      	ite	ne
 800364a:	2301      	movne	r3, #1
 800364c:	2300      	moveq	r3, #0
 800364e:	b2db      	uxtb	r3, r3
 8003650:	e02a      	b.n	80036a8 <HAL_DMA_IRQHandler+0x6e4>
 8003652:	bf00      	nop
 8003654:	40020010 	.word	0x40020010
 8003658:	40020028 	.word	0x40020028
 800365c:	40020040 	.word	0x40020040
 8003660:	40020058 	.word	0x40020058
 8003664:	40020070 	.word	0x40020070
 8003668:	40020088 	.word	0x40020088
 800366c:	400200a0 	.word	0x400200a0
 8003670:	400200b8 	.word	0x400200b8
 8003674:	40020410 	.word	0x40020410
 8003678:	40020428 	.word	0x40020428
 800367c:	40020440 	.word	0x40020440
 8003680:	40020458 	.word	0x40020458
 8003684:	40020470 	.word	0x40020470
 8003688:	40020488 	.word	0x40020488
 800368c:	400204a0 	.word	0x400204a0
 8003690:	400204b8 	.word	0x400204b8
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	bf14      	ite	ne
 80036a2:	2301      	movne	r3, #1
 80036a4:	2300      	moveq	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 8087 	beq.w	80037bc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	2220      	movs	r2, #32
 80036b8:	409a      	lsls	r2, r3
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d139      	bne.n	800373e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0216 	bic.w	r2, r2, #22
 80036d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d103      	bne.n	80036fa <HAL_DMA_IRQHandler+0x736>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d007      	beq.n	800370a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0208 	bic.w	r2, r2, #8
 8003708:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	223f      	movs	r2, #63	; 0x3f
 8003714:	409a      	lsls	r2, r3
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 8382 	beq.w	8003e38 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	4798      	blx	r3
          }
          return;
 800373c:	e37c      	b.n	8003e38 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d018      	beq.n	800377e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d108      	bne.n	800376c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	2b00      	cmp	r3, #0
 8003760:	d02c      	beq.n	80037bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	4798      	blx	r3
 800376a:	e027      	b.n	80037bc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003770:	2b00      	cmp	r3, #0
 8003772:	d023      	beq.n	80037bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	4798      	blx	r3
 800377c:	e01e      	b.n	80037bc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10f      	bne.n	80037ac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0210 	bic.w	r2, r2, #16
 800379a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 833e 	beq.w	8003e42 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 8088 	beq.w	80038e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2204      	movs	r2, #4
 80037d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a89      	ldr	r2, [pc, #548]	; (8003a08 <HAL_DMA_IRQHandler+0xa44>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d04a      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a88      	ldr	r2, [pc, #544]	; (8003a0c <HAL_DMA_IRQHandler+0xa48>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d045      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a86      	ldr	r2, [pc, #536]	; (8003a10 <HAL_DMA_IRQHandler+0xa4c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d040      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a85      	ldr	r2, [pc, #532]	; (8003a14 <HAL_DMA_IRQHandler+0xa50>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d03b      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a83      	ldr	r2, [pc, #524]	; (8003a18 <HAL_DMA_IRQHandler+0xa54>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d036      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a82      	ldr	r2, [pc, #520]	; (8003a1c <HAL_DMA_IRQHandler+0xa58>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d031      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a80      	ldr	r2, [pc, #512]	; (8003a20 <HAL_DMA_IRQHandler+0xa5c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d02c      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a7f      	ldr	r2, [pc, #508]	; (8003a24 <HAL_DMA_IRQHandler+0xa60>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d027      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a7d      	ldr	r2, [pc, #500]	; (8003a28 <HAL_DMA_IRQHandler+0xa64>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d022      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a7c      	ldr	r2, [pc, #496]	; (8003a2c <HAL_DMA_IRQHandler+0xa68>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d01d      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a7a      	ldr	r2, [pc, #488]	; (8003a30 <HAL_DMA_IRQHandler+0xa6c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d018      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a79      	ldr	r2, [pc, #484]	; (8003a34 <HAL_DMA_IRQHandler+0xa70>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d013      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a77      	ldr	r2, [pc, #476]	; (8003a38 <HAL_DMA_IRQHandler+0xa74>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00e      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a76      	ldr	r2, [pc, #472]	; (8003a3c <HAL_DMA_IRQHandler+0xa78>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d009      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a74      	ldr	r2, [pc, #464]	; (8003a40 <HAL_DMA_IRQHandler+0xa7c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d004      	beq.n	800387c <HAL_DMA_IRQHandler+0x8b8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a73      	ldr	r2, [pc, #460]	; (8003a44 <HAL_DMA_IRQHandler+0xa80>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d108      	bne.n	800388e <HAL_DMA_IRQHandler+0x8ca>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e007      	b.n	800389e <HAL_DMA_IRQHandler+0x8da>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0201 	bic.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3301      	adds	r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d307      	bcc.n	80038ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f2      	bne.n	800389e <HAL_DMA_IRQHandler+0x8da>
 80038b8:	e000      	b.n	80038bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80038ba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d004      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2203      	movs	r2, #3
 80038ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80038d2:	e003      	b.n	80038dc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 82aa 	beq.w	8003e42 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3
 80038f6:	e2a4      	b.n	8003e42 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a52      	ldr	r2, [pc, #328]	; (8003a48 <HAL_DMA_IRQHandler+0xa84>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d04a      	beq.n	8003998 <HAL_DMA_IRQHandler+0x9d4>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a51      	ldr	r2, [pc, #324]	; (8003a4c <HAL_DMA_IRQHandler+0xa88>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d045      	beq.n	8003998 <HAL_DMA_IRQHandler+0x9d4>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a4f      	ldr	r2, [pc, #316]	; (8003a50 <HAL_DMA_IRQHandler+0xa8c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d040      	beq.n	8003998 <HAL_DMA_IRQHandler+0x9d4>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a4e      	ldr	r2, [pc, #312]	; (8003a54 <HAL_DMA_IRQHandler+0xa90>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d03b      	beq.n	8003998 <HAL_DMA_IRQHandler+0x9d4>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a4c      	ldr	r2, [pc, #304]	; (8003a58 <HAL_DMA_IRQHandler+0xa94>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d036      	beq.n	8003998 <HAL_DMA_IRQHandler+0x9d4>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a4b      	ldr	r2, [pc, #300]	; (8003a5c <HAL_DMA_IRQHandler+0xa98>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d031      	beq.n	8003998 <HAL_DMA_IRQHandler+0x9d4>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a49      	ldr	r2, [pc, #292]	; (8003a60 <HAL_DMA_IRQHandler+0xa9c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d02c      	beq.n	8003998 <HAL_DMA_IRQHandler+0x9d4>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a48      	ldr	r2, [pc, #288]	; (8003a64 <HAL_DMA_IRQHandler+0xaa0>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d027      	beq.n	8003998 <HAL_DMA_IRQHandler+0x9d4>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a46      	ldr	r2, [pc, #280]	; (8003a68 <HAL_DMA_IRQHandler+0xaa4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d022      	beq.n	8003998 <HAL_DMA_IRQHandler+0x9d4>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a45      	ldr	r2, [pc, #276]	; (8003a6c <HAL_DMA_IRQHandler+0xaa8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d01d      	beq.n	8003998 <HAL_DMA_IRQHandler+0x9d4>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a43      	ldr	r2, [pc, #268]	; (8003a70 <HAL_DMA_IRQHandler+0xaac>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d018      	beq.n	8003998 <HAL_DMA_IRQHandler+0x9d4>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a42      	ldr	r2, [pc, #264]	; (8003a74 <HAL_DMA_IRQHandler+0xab0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d013      	beq.n	8003998 <HAL_DMA_IRQHandler+0x9d4>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a40      	ldr	r2, [pc, #256]	; (8003a78 <HAL_DMA_IRQHandler+0xab4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00e      	beq.n	8003998 <HAL_DMA_IRQHandler+0x9d4>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a3f      	ldr	r2, [pc, #252]	; (8003a7c <HAL_DMA_IRQHandler+0xab8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d009      	beq.n	8003998 <HAL_DMA_IRQHandler+0x9d4>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a3d      	ldr	r2, [pc, #244]	; (8003a80 <HAL_DMA_IRQHandler+0xabc>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d004      	beq.n	8003998 <HAL_DMA_IRQHandler+0x9d4>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a3c      	ldr	r2, [pc, #240]	; (8003a84 <HAL_DMA_IRQHandler+0xac0>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d101      	bne.n	800399c <HAL_DMA_IRQHandler+0x9d8>
 8003998:	2301      	movs	r3, #1
 800399a:	e000      	b.n	800399e <HAL_DMA_IRQHandler+0x9da>
 800399c:	2300      	movs	r3, #0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 824f 	beq.w	8003e42 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	2204      	movs	r2, #4
 80039b6:	409a      	lsls	r2, r3
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 80dd 	beq.w	8003b7c <HAL_DMA_IRQHandler+0xbb8>
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 80d7 	beq.w	8003b7c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	2204      	movs	r2, #4
 80039d8:	409a      	lsls	r2, r3
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d059      	beq.n	8003a9c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d14a      	bne.n	8003a88 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8220 	beq.w	8003e3c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a04:	e21a      	b.n	8003e3c <HAL_DMA_IRQHandler+0xe78>
 8003a06:	bf00      	nop
 8003a08:	40020010 	.word	0x40020010
 8003a0c:	40020028 	.word	0x40020028
 8003a10:	40020040 	.word	0x40020040
 8003a14:	40020058 	.word	0x40020058
 8003a18:	40020070 	.word	0x40020070
 8003a1c:	40020088 	.word	0x40020088
 8003a20:	400200a0 	.word	0x400200a0
 8003a24:	400200b8 	.word	0x400200b8
 8003a28:	40020410 	.word	0x40020410
 8003a2c:	40020428 	.word	0x40020428
 8003a30:	40020440 	.word	0x40020440
 8003a34:	40020458 	.word	0x40020458
 8003a38:	40020470 	.word	0x40020470
 8003a3c:	40020488 	.word	0x40020488
 8003a40:	400204a0 	.word	0x400204a0
 8003a44:	400204b8 	.word	0x400204b8
 8003a48:	48022c08 	.word	0x48022c08
 8003a4c:	48022c1c 	.word	0x48022c1c
 8003a50:	48022c30 	.word	0x48022c30
 8003a54:	48022c44 	.word	0x48022c44
 8003a58:	48022c58 	.word	0x48022c58
 8003a5c:	48022c6c 	.word	0x48022c6c
 8003a60:	48022c80 	.word	0x48022c80
 8003a64:	48022c94 	.word	0x48022c94
 8003a68:	58025408 	.word	0x58025408
 8003a6c:	5802541c 	.word	0x5802541c
 8003a70:	58025430 	.word	0x58025430
 8003a74:	58025444 	.word	0x58025444
 8003a78:	58025458 	.word	0x58025458
 8003a7c:	5802546c 	.word	0x5802546c
 8003a80:	58025480 	.word	0x58025480
 8003a84:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 81d5 	beq.w	8003e3c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a9a:	e1cf      	b.n	8003e3c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f003 0320 	and.w	r3, r3, #32
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d160      	bne.n	8003b68 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a7f      	ldr	r2, [pc, #508]	; (8003ca8 <HAL_DMA_IRQHandler+0xce4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d04a      	beq.n	8003b46 <HAL_DMA_IRQHandler+0xb82>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a7d      	ldr	r2, [pc, #500]	; (8003cac <HAL_DMA_IRQHandler+0xce8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d045      	beq.n	8003b46 <HAL_DMA_IRQHandler+0xb82>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a7c      	ldr	r2, [pc, #496]	; (8003cb0 <HAL_DMA_IRQHandler+0xcec>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d040      	beq.n	8003b46 <HAL_DMA_IRQHandler+0xb82>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a7a      	ldr	r2, [pc, #488]	; (8003cb4 <HAL_DMA_IRQHandler+0xcf0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d03b      	beq.n	8003b46 <HAL_DMA_IRQHandler+0xb82>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a79      	ldr	r2, [pc, #484]	; (8003cb8 <HAL_DMA_IRQHandler+0xcf4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d036      	beq.n	8003b46 <HAL_DMA_IRQHandler+0xb82>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a77      	ldr	r2, [pc, #476]	; (8003cbc <HAL_DMA_IRQHandler+0xcf8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d031      	beq.n	8003b46 <HAL_DMA_IRQHandler+0xb82>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a76      	ldr	r2, [pc, #472]	; (8003cc0 <HAL_DMA_IRQHandler+0xcfc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d02c      	beq.n	8003b46 <HAL_DMA_IRQHandler+0xb82>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a74      	ldr	r2, [pc, #464]	; (8003cc4 <HAL_DMA_IRQHandler+0xd00>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d027      	beq.n	8003b46 <HAL_DMA_IRQHandler+0xb82>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a73      	ldr	r2, [pc, #460]	; (8003cc8 <HAL_DMA_IRQHandler+0xd04>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d022      	beq.n	8003b46 <HAL_DMA_IRQHandler+0xb82>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a71      	ldr	r2, [pc, #452]	; (8003ccc <HAL_DMA_IRQHandler+0xd08>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d01d      	beq.n	8003b46 <HAL_DMA_IRQHandler+0xb82>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a70      	ldr	r2, [pc, #448]	; (8003cd0 <HAL_DMA_IRQHandler+0xd0c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d018      	beq.n	8003b46 <HAL_DMA_IRQHandler+0xb82>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a6e      	ldr	r2, [pc, #440]	; (8003cd4 <HAL_DMA_IRQHandler+0xd10>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d013      	beq.n	8003b46 <HAL_DMA_IRQHandler+0xb82>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a6d      	ldr	r2, [pc, #436]	; (8003cd8 <HAL_DMA_IRQHandler+0xd14>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00e      	beq.n	8003b46 <HAL_DMA_IRQHandler+0xb82>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a6b      	ldr	r2, [pc, #428]	; (8003cdc <HAL_DMA_IRQHandler+0xd18>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d009      	beq.n	8003b46 <HAL_DMA_IRQHandler+0xb82>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a6a      	ldr	r2, [pc, #424]	; (8003ce0 <HAL_DMA_IRQHandler+0xd1c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d004      	beq.n	8003b46 <HAL_DMA_IRQHandler+0xb82>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a68      	ldr	r2, [pc, #416]	; (8003ce4 <HAL_DMA_IRQHandler+0xd20>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d108      	bne.n	8003b58 <HAL_DMA_IRQHandler+0xb94>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0208 	bic.w	r2, r2, #8
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	e007      	b.n	8003b68 <HAL_DMA_IRQHandler+0xba4>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0204 	bic.w	r2, r2, #4
 8003b66:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8165 	beq.w	8003e3c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b7a:	e15f      	b.n	8003e3c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	2202      	movs	r2, #2
 8003b86:	409a      	lsls	r2, r3
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80c5 	beq.w	8003d1c <HAL_DMA_IRQHandler+0xd58>
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80bf 	beq.w	8003d1c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba2:	f003 031f 	and.w	r3, r3, #31
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	409a      	lsls	r2, r3
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d018      	beq.n	8003bea <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 813a 	beq.w	8003e40 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bd4:	e134      	b.n	8003e40 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 8130 	beq.w	8003e40 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003be8:	e12a      	b.n	8003e40 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f040 8089 	bne.w	8003d08 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a2b      	ldr	r2, [pc, #172]	; (8003ca8 <HAL_DMA_IRQHandler+0xce4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d04a      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xcd2>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a29      	ldr	r2, [pc, #164]	; (8003cac <HAL_DMA_IRQHandler+0xce8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d045      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xcd2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a28      	ldr	r2, [pc, #160]	; (8003cb0 <HAL_DMA_IRQHandler+0xcec>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d040      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xcd2>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a26      	ldr	r2, [pc, #152]	; (8003cb4 <HAL_DMA_IRQHandler+0xcf0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d03b      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xcd2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a25      	ldr	r2, [pc, #148]	; (8003cb8 <HAL_DMA_IRQHandler+0xcf4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d036      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xcd2>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a23      	ldr	r2, [pc, #140]	; (8003cbc <HAL_DMA_IRQHandler+0xcf8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d031      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xcd2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a22      	ldr	r2, [pc, #136]	; (8003cc0 <HAL_DMA_IRQHandler+0xcfc>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d02c      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xcd2>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a20      	ldr	r2, [pc, #128]	; (8003cc4 <HAL_DMA_IRQHandler+0xd00>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d027      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xcd2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1f      	ldr	r2, [pc, #124]	; (8003cc8 <HAL_DMA_IRQHandler+0xd04>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d022      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xcd2>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1d      	ldr	r2, [pc, #116]	; (8003ccc <HAL_DMA_IRQHandler+0xd08>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d01d      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xcd2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1c      	ldr	r2, [pc, #112]	; (8003cd0 <HAL_DMA_IRQHandler+0xd0c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d018      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xcd2>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a1a      	ldr	r2, [pc, #104]	; (8003cd4 <HAL_DMA_IRQHandler+0xd10>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d013      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xcd2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a19      	ldr	r2, [pc, #100]	; (8003cd8 <HAL_DMA_IRQHandler+0xd14>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00e      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xcd2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a17      	ldr	r2, [pc, #92]	; (8003cdc <HAL_DMA_IRQHandler+0xd18>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d009      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xcd2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a16      	ldr	r2, [pc, #88]	; (8003ce0 <HAL_DMA_IRQHandler+0xd1c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d004      	beq.n	8003c96 <HAL_DMA_IRQHandler+0xcd2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a14      	ldr	r2, [pc, #80]	; (8003ce4 <HAL_DMA_IRQHandler+0xd20>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d128      	bne.n	8003ce8 <HAL_DMA_IRQHandler+0xd24>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0214 	bic.w	r2, r2, #20
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	e027      	b.n	8003cf8 <HAL_DMA_IRQHandler+0xd34>
 8003ca8:	40020010 	.word	0x40020010
 8003cac:	40020028 	.word	0x40020028
 8003cb0:	40020040 	.word	0x40020040
 8003cb4:	40020058 	.word	0x40020058
 8003cb8:	40020070 	.word	0x40020070
 8003cbc:	40020088 	.word	0x40020088
 8003cc0:	400200a0 	.word	0x400200a0
 8003cc4:	400200b8 	.word	0x400200b8
 8003cc8:	40020410 	.word	0x40020410
 8003ccc:	40020428 	.word	0x40020428
 8003cd0:	40020440 	.word	0x40020440
 8003cd4:	40020458 	.word	0x40020458
 8003cd8:	40020470 	.word	0x40020470
 8003cdc:	40020488 	.word	0x40020488
 8003ce0:	400204a0 	.word	0x400204a0
 8003ce4:	400204b8 	.word	0x400204b8
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 020a 	bic.w	r2, r2, #10
 8003cf6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 8097 	beq.w	8003e40 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d1a:	e091      	b.n	8003e40 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d20:	f003 031f 	and.w	r3, r3, #31
 8003d24:	2208      	movs	r2, #8
 8003d26:	409a      	lsls	r2, r3
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8088 	beq.w	8003e42 <HAL_DMA_IRQHandler+0xe7e>
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 8082 	beq.w	8003e42 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a41      	ldr	r2, [pc, #260]	; (8003e48 <HAL_DMA_IRQHandler+0xe84>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d04a      	beq.n	8003dde <HAL_DMA_IRQHandler+0xe1a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a3f      	ldr	r2, [pc, #252]	; (8003e4c <HAL_DMA_IRQHandler+0xe88>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d045      	beq.n	8003dde <HAL_DMA_IRQHandler+0xe1a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a3e      	ldr	r2, [pc, #248]	; (8003e50 <HAL_DMA_IRQHandler+0xe8c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d040      	beq.n	8003dde <HAL_DMA_IRQHandler+0xe1a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a3c      	ldr	r2, [pc, #240]	; (8003e54 <HAL_DMA_IRQHandler+0xe90>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d03b      	beq.n	8003dde <HAL_DMA_IRQHandler+0xe1a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a3b      	ldr	r2, [pc, #236]	; (8003e58 <HAL_DMA_IRQHandler+0xe94>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d036      	beq.n	8003dde <HAL_DMA_IRQHandler+0xe1a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a39      	ldr	r2, [pc, #228]	; (8003e5c <HAL_DMA_IRQHandler+0xe98>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d031      	beq.n	8003dde <HAL_DMA_IRQHandler+0xe1a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a38      	ldr	r2, [pc, #224]	; (8003e60 <HAL_DMA_IRQHandler+0xe9c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d02c      	beq.n	8003dde <HAL_DMA_IRQHandler+0xe1a>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a36      	ldr	r2, [pc, #216]	; (8003e64 <HAL_DMA_IRQHandler+0xea0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d027      	beq.n	8003dde <HAL_DMA_IRQHandler+0xe1a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a35      	ldr	r2, [pc, #212]	; (8003e68 <HAL_DMA_IRQHandler+0xea4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d022      	beq.n	8003dde <HAL_DMA_IRQHandler+0xe1a>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a33      	ldr	r2, [pc, #204]	; (8003e6c <HAL_DMA_IRQHandler+0xea8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d01d      	beq.n	8003dde <HAL_DMA_IRQHandler+0xe1a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a32      	ldr	r2, [pc, #200]	; (8003e70 <HAL_DMA_IRQHandler+0xeac>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d018      	beq.n	8003dde <HAL_DMA_IRQHandler+0xe1a>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a30      	ldr	r2, [pc, #192]	; (8003e74 <HAL_DMA_IRQHandler+0xeb0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <HAL_DMA_IRQHandler+0xe1a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a2f      	ldr	r2, [pc, #188]	; (8003e78 <HAL_DMA_IRQHandler+0xeb4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00e      	beq.n	8003dde <HAL_DMA_IRQHandler+0xe1a>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a2d      	ldr	r2, [pc, #180]	; (8003e7c <HAL_DMA_IRQHandler+0xeb8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d009      	beq.n	8003dde <HAL_DMA_IRQHandler+0xe1a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a2c      	ldr	r2, [pc, #176]	; (8003e80 <HAL_DMA_IRQHandler+0xebc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d004      	beq.n	8003dde <HAL_DMA_IRQHandler+0xe1a>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a2a      	ldr	r2, [pc, #168]	; (8003e84 <HAL_DMA_IRQHandler+0xec0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d108      	bne.n	8003df0 <HAL_DMA_IRQHandler+0xe2c>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 021c 	bic.w	r2, r2, #28
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	e007      	b.n	8003e00 <HAL_DMA_IRQHandler+0xe3c>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 020e 	bic.w	r2, r2, #14
 8003dfe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e04:	f003 031f 	and.w	r3, r3, #31
 8003e08:	2201      	movs	r2, #1
 8003e0a:	409a      	lsls	r2, r3
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d009      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	4798      	blx	r3
 8003e36:	e004      	b.n	8003e42 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003e38:	bf00      	nop
 8003e3a:	e002      	b.n	8003e42 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e3c:	bf00      	nop
 8003e3e:	e000      	b.n	8003e42 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e40:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e42:	3728      	adds	r7, #40	; 0x28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40020010 	.word	0x40020010
 8003e4c:	40020028 	.word	0x40020028
 8003e50:	40020040 	.word	0x40020040
 8003e54:	40020058 	.word	0x40020058
 8003e58:	40020070 	.word	0x40020070
 8003e5c:	40020088 	.word	0x40020088
 8003e60:	400200a0 	.word	0x400200a0
 8003e64:	400200b8 	.word	0x400200b8
 8003e68:	40020410 	.word	0x40020410
 8003e6c:	40020428 	.word	0x40020428
 8003e70:	40020440 	.word	0x40020440
 8003e74:	40020458 	.word	0x40020458
 8003e78:	40020470 	.word	0x40020470
 8003e7c:	40020488 	.word	0x40020488
 8003e80:	400204a0 	.word	0x400204a0
 8003e84:	400204b8 	.word	0x400204b8

08003e88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a42      	ldr	r2, [pc, #264]	; (8003fa0 <DMA_CalcBaseAndBitshift+0x118>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d04a      	beq.n	8003f30 <DMA_CalcBaseAndBitshift+0xa8>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a41      	ldr	r2, [pc, #260]	; (8003fa4 <DMA_CalcBaseAndBitshift+0x11c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d045      	beq.n	8003f30 <DMA_CalcBaseAndBitshift+0xa8>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a3f      	ldr	r2, [pc, #252]	; (8003fa8 <DMA_CalcBaseAndBitshift+0x120>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d040      	beq.n	8003f30 <DMA_CalcBaseAndBitshift+0xa8>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a3e      	ldr	r2, [pc, #248]	; (8003fac <DMA_CalcBaseAndBitshift+0x124>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d03b      	beq.n	8003f30 <DMA_CalcBaseAndBitshift+0xa8>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a3c      	ldr	r2, [pc, #240]	; (8003fb0 <DMA_CalcBaseAndBitshift+0x128>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d036      	beq.n	8003f30 <DMA_CalcBaseAndBitshift+0xa8>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a3b      	ldr	r2, [pc, #236]	; (8003fb4 <DMA_CalcBaseAndBitshift+0x12c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d031      	beq.n	8003f30 <DMA_CalcBaseAndBitshift+0xa8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a39      	ldr	r2, [pc, #228]	; (8003fb8 <DMA_CalcBaseAndBitshift+0x130>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d02c      	beq.n	8003f30 <DMA_CalcBaseAndBitshift+0xa8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a38      	ldr	r2, [pc, #224]	; (8003fbc <DMA_CalcBaseAndBitshift+0x134>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d027      	beq.n	8003f30 <DMA_CalcBaseAndBitshift+0xa8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a36      	ldr	r2, [pc, #216]	; (8003fc0 <DMA_CalcBaseAndBitshift+0x138>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d022      	beq.n	8003f30 <DMA_CalcBaseAndBitshift+0xa8>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a35      	ldr	r2, [pc, #212]	; (8003fc4 <DMA_CalcBaseAndBitshift+0x13c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d01d      	beq.n	8003f30 <DMA_CalcBaseAndBitshift+0xa8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a33      	ldr	r2, [pc, #204]	; (8003fc8 <DMA_CalcBaseAndBitshift+0x140>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d018      	beq.n	8003f30 <DMA_CalcBaseAndBitshift+0xa8>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a32      	ldr	r2, [pc, #200]	; (8003fcc <DMA_CalcBaseAndBitshift+0x144>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d013      	beq.n	8003f30 <DMA_CalcBaseAndBitshift+0xa8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a30      	ldr	r2, [pc, #192]	; (8003fd0 <DMA_CalcBaseAndBitshift+0x148>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00e      	beq.n	8003f30 <DMA_CalcBaseAndBitshift+0xa8>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a2f      	ldr	r2, [pc, #188]	; (8003fd4 <DMA_CalcBaseAndBitshift+0x14c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d009      	beq.n	8003f30 <DMA_CalcBaseAndBitshift+0xa8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a2d      	ldr	r2, [pc, #180]	; (8003fd8 <DMA_CalcBaseAndBitshift+0x150>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d004      	beq.n	8003f30 <DMA_CalcBaseAndBitshift+0xa8>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a2c      	ldr	r2, [pc, #176]	; (8003fdc <DMA_CalcBaseAndBitshift+0x154>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d101      	bne.n	8003f34 <DMA_CalcBaseAndBitshift+0xac>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <DMA_CalcBaseAndBitshift+0xae>
 8003f34:	2300      	movs	r3, #0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d024      	beq.n	8003f84 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	3b10      	subs	r3, #16
 8003f42:	4a27      	ldr	r2, [pc, #156]	; (8003fe0 <DMA_CalcBaseAndBitshift+0x158>)
 8003f44:	fba2 2303 	umull	r2, r3, r2, r3
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	4a24      	ldr	r2, [pc, #144]	; (8003fe4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003f54:	5cd3      	ldrb	r3, [r2, r3]
 8003f56:	461a      	mov	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	d908      	bls.n	8003f74 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	4b1f      	ldr	r3, [pc, #124]	; (8003fe8 <DMA_CalcBaseAndBitshift+0x160>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	1d1a      	adds	r2, r3, #4
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	659a      	str	r2, [r3, #88]	; 0x58
 8003f72:	e00d      	b.n	8003f90 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b1b      	ldr	r3, [pc, #108]	; (8003fe8 <DMA_CalcBaseAndBitshift+0x160>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6593      	str	r3, [r2, #88]	; 0x58
 8003f82:	e005      	b.n	8003f90 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	40020010 	.word	0x40020010
 8003fa4:	40020028 	.word	0x40020028
 8003fa8:	40020040 	.word	0x40020040
 8003fac:	40020058 	.word	0x40020058
 8003fb0:	40020070 	.word	0x40020070
 8003fb4:	40020088 	.word	0x40020088
 8003fb8:	400200a0 	.word	0x400200a0
 8003fbc:	400200b8 	.word	0x400200b8
 8003fc0:	40020410 	.word	0x40020410
 8003fc4:	40020428 	.word	0x40020428
 8003fc8:	40020440 	.word	0x40020440
 8003fcc:	40020458 	.word	0x40020458
 8003fd0:	40020470 	.word	0x40020470
 8003fd4:	40020488 	.word	0x40020488
 8003fd8:	400204a0 	.word	0x400204a0
 8003fdc:	400204b8 	.word	0x400204b8
 8003fe0:	aaaaaaab 	.word	0xaaaaaaab
 8003fe4:	0800abd4 	.word	0x0800abd4
 8003fe8:	fffffc00 	.word	0xfffffc00

08003fec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d120      	bne.n	8004042 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004004:	2b03      	cmp	r3, #3
 8004006:	d858      	bhi.n	80040ba <DMA_CheckFifoParam+0xce>
 8004008:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <DMA_CheckFifoParam+0x24>)
 800400a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400e:	bf00      	nop
 8004010:	08004021 	.word	0x08004021
 8004014:	08004033 	.word	0x08004033
 8004018:	08004021 	.word	0x08004021
 800401c:	080040bb 	.word	0x080040bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d048      	beq.n	80040be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004030:	e045      	b.n	80040be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800403a:	d142      	bne.n	80040c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004040:	e03f      	b.n	80040c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800404a:	d123      	bne.n	8004094 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004050:	2b03      	cmp	r3, #3
 8004052:	d838      	bhi.n	80040c6 <DMA_CheckFifoParam+0xda>
 8004054:	a201      	add	r2, pc, #4	; (adr r2, 800405c <DMA_CheckFifoParam+0x70>)
 8004056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405a:	bf00      	nop
 800405c:	0800406d 	.word	0x0800406d
 8004060:	08004073 	.word	0x08004073
 8004064:	0800406d 	.word	0x0800406d
 8004068:	08004085 	.word	0x08004085
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
        break;
 8004070:	e030      	b.n	80040d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004076:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d025      	beq.n	80040ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004082:	e022      	b.n	80040ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800408c:	d11f      	bne.n	80040ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004092:	e01c      	b.n	80040ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	2b02      	cmp	r3, #2
 800409a:	d902      	bls.n	80040a2 <DMA_CheckFifoParam+0xb6>
 800409c:	2b03      	cmp	r3, #3
 800409e:	d003      	beq.n	80040a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80040a0:	e018      	b.n	80040d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	73fb      	strb	r3, [r7, #15]
        break;
 80040a6:	e015      	b.n	80040d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00e      	beq.n	80040d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
    break;
 80040b8:	e00b      	b.n	80040d2 <DMA_CheckFifoParam+0xe6>
        break;
 80040ba:	bf00      	nop
 80040bc:	e00a      	b.n	80040d4 <DMA_CheckFifoParam+0xe8>
        break;
 80040be:	bf00      	nop
 80040c0:	e008      	b.n	80040d4 <DMA_CheckFifoParam+0xe8>
        break;
 80040c2:	bf00      	nop
 80040c4:	e006      	b.n	80040d4 <DMA_CheckFifoParam+0xe8>
        break;
 80040c6:	bf00      	nop
 80040c8:	e004      	b.n	80040d4 <DMA_CheckFifoParam+0xe8>
        break;
 80040ca:	bf00      	nop
 80040cc:	e002      	b.n	80040d4 <DMA_CheckFifoParam+0xe8>
        break;
 80040ce:	bf00      	nop
 80040d0:	e000      	b.n	80040d4 <DMA_CheckFifoParam+0xe8>
    break;
 80040d2:	bf00      	nop
    }
  }

  return status;
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop

080040e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a38      	ldr	r2, [pc, #224]	; (80041d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d022      	beq.n	8004142 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a36      	ldr	r2, [pc, #216]	; (80041dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01d      	beq.n	8004142 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a35      	ldr	r2, [pc, #212]	; (80041e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d018      	beq.n	8004142 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a33      	ldr	r2, [pc, #204]	; (80041e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d013      	beq.n	8004142 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a32      	ldr	r2, [pc, #200]	; (80041e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00e      	beq.n	8004142 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a30      	ldr	r2, [pc, #192]	; (80041ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d009      	beq.n	8004142 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a2f      	ldr	r2, [pc, #188]	; (80041f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d004      	beq.n	8004142 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a2d      	ldr	r2, [pc, #180]	; (80041f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d101      	bne.n	8004146 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004146:	2300      	movs	r3, #0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01a      	beq.n	8004182 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	3b08      	subs	r3, #8
 8004154:	4a28      	ldr	r2, [pc, #160]	; (80041f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004156:	fba2 2303 	umull	r2, r3, r2, r3
 800415a:	091b      	lsrs	r3, r3, #4
 800415c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4b26      	ldr	r3, [pc, #152]	; (80041fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004162:	4413      	add	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	461a      	mov	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a24      	ldr	r2, [pc, #144]	; (8004200 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004170:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	2201      	movs	r2, #1
 800417a:	409a      	lsls	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004180:	e024      	b.n	80041cc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	3b10      	subs	r3, #16
 800418a:	4a1e      	ldr	r2, [pc, #120]	; (8004204 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800418c:	fba2 2303 	umull	r2, r3, r2, r3
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4a1c      	ldr	r2, [pc, #112]	; (8004208 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d806      	bhi.n	80041aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4a1b      	ldr	r2, [pc, #108]	; (800420c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d902      	bls.n	80041aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	3308      	adds	r3, #8
 80041a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4b18      	ldr	r3, [pc, #96]	; (8004210 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	461a      	mov	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a16      	ldr	r2, [pc, #88]	; (8004214 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80041bc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f003 031f 	and.w	r3, r3, #31
 80041c4:	2201      	movs	r2, #1
 80041c6:	409a      	lsls	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	669a      	str	r2, [r3, #104]	; 0x68
}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	58025408 	.word	0x58025408
 80041dc:	5802541c 	.word	0x5802541c
 80041e0:	58025430 	.word	0x58025430
 80041e4:	58025444 	.word	0x58025444
 80041e8:	58025458 	.word	0x58025458
 80041ec:	5802546c 	.word	0x5802546c
 80041f0:	58025480 	.word	0x58025480
 80041f4:	58025494 	.word	0x58025494
 80041f8:	cccccccd 	.word	0xcccccccd
 80041fc:	16009600 	.word	0x16009600
 8004200:	58025880 	.word	0x58025880
 8004204:	aaaaaaab 	.word	0xaaaaaaab
 8004208:	400204b8 	.word	0x400204b8
 800420c:	4002040f 	.word	0x4002040f
 8004210:	10008200 	.word	0x10008200
 8004214:	40020880 	.word	0x40020880

08004218 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d04a      	beq.n	80042c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d847      	bhi.n	80042c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a25      	ldr	r2, [pc, #148]	; (80042d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d022      	beq.n	8004284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a24      	ldr	r2, [pc, #144]	; (80042d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d01d      	beq.n	8004284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a22      	ldr	r2, [pc, #136]	; (80042d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d018      	beq.n	8004284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a21      	ldr	r2, [pc, #132]	; (80042dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d013      	beq.n	8004284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1f      	ldr	r2, [pc, #124]	; (80042e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00e      	beq.n	8004284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1e      	ldr	r2, [pc, #120]	; (80042e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d009      	beq.n	8004284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a1c      	ldr	r2, [pc, #112]	; (80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d004      	beq.n	8004284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1b      	ldr	r2, [pc, #108]	; (80042ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d101      	bne.n	8004288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004288:	2300      	movs	r3, #0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4b17      	ldr	r3, [pc, #92]	; (80042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004292:	4413      	add	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	461a      	mov	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a15      	ldr	r2, [pc, #84]	; (80042f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80042a0:	671a      	str	r2, [r3, #112]	; 0x70
 80042a2:	e009      	b.n	80042b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	461a      	mov	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a11      	ldr	r2, [pc, #68]	; (80042fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80042b6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	2201      	movs	r2, #1
 80042be:	409a      	lsls	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	58025408 	.word	0x58025408
 80042d4:	5802541c 	.word	0x5802541c
 80042d8:	58025430 	.word	0x58025430
 80042dc:	58025444 	.word	0x58025444
 80042e0:	58025458 	.word	0x58025458
 80042e4:	5802546c 	.word	0x5802546c
 80042e8:	58025480 	.word	0x58025480
 80042ec:	58025494 	.word	0x58025494
 80042f0:	1600963f 	.word	0x1600963f
 80042f4:	58025940 	.word	0x58025940
 80042f8:	1000823f 	.word	0x1000823f
 80042fc:	40020940 	.word	0x40020940

08004300 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004300:	b480      	push	{r7}
 8004302:	b089      	sub	sp, #36	; 0x24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800430e:	4b89      	ldr	r3, [pc, #548]	; (8004534 <HAL_GPIO_Init+0x234>)
 8004310:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004312:	e194      	b.n	800463e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	2101      	movs	r1, #1
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	fa01 f303 	lsl.w	r3, r1, r3
 8004320:	4013      	ands	r3, r2
 8004322:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 8186 	beq.w	8004638 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 0303 	and.w	r3, r3, #3
 8004334:	2b01      	cmp	r3, #1
 8004336:	d005      	beq.n	8004344 <HAL_GPIO_Init+0x44>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d130      	bne.n	80043a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	2203      	movs	r2, #3
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	43db      	mvns	r3, r3
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	4013      	ands	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4313      	orrs	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800437a:	2201      	movs	r2, #1
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4013      	ands	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	091b      	lsrs	r3, r3, #4
 8004390:	f003 0201 	and.w	r2, r3, #1
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4313      	orrs	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d017      	beq.n	80043e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	2203      	movs	r2, #3
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	43db      	mvns	r3, r3
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4013      	ands	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4313      	orrs	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d123      	bne.n	8004436 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	08da      	lsrs	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3208      	adds	r2, #8
 80043f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	220f      	movs	r2, #15
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	43db      	mvns	r3, r3
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4013      	ands	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4313      	orrs	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	08da      	lsrs	r2, r3, #3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3208      	adds	r2, #8
 8004430:	69b9      	ldr	r1, [r7, #24]
 8004432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	2203      	movs	r2, #3
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	43db      	mvns	r3, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4013      	ands	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f003 0203 	and.w	r2, r3, #3
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	4313      	orrs	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80e0 	beq.w	8004638 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004478:	4b2f      	ldr	r3, [pc, #188]	; (8004538 <HAL_GPIO_Init+0x238>)
 800447a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800447e:	4a2e      	ldr	r2, [pc, #184]	; (8004538 <HAL_GPIO_Init+0x238>)
 8004480:	f043 0302 	orr.w	r3, r3, #2
 8004484:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8004488:	4b2b      	ldr	r3, [pc, #172]	; (8004538 <HAL_GPIO_Init+0x238>)
 800448a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004496:	4a29      	ldr	r2, [pc, #164]	; (800453c <HAL_GPIO_Init+0x23c>)
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	089b      	lsrs	r3, r3, #2
 800449c:	3302      	adds	r3, #2
 800449e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	220f      	movs	r2, #15
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	43db      	mvns	r3, r3
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4013      	ands	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a20      	ldr	r2, [pc, #128]	; (8004540 <HAL_GPIO_Init+0x240>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d052      	beq.n	8004568 <HAL_GPIO_Init+0x268>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a1f      	ldr	r2, [pc, #124]	; (8004544 <HAL_GPIO_Init+0x244>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d031      	beq.n	800452e <HAL_GPIO_Init+0x22e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a1e      	ldr	r2, [pc, #120]	; (8004548 <HAL_GPIO_Init+0x248>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d02b      	beq.n	800452a <HAL_GPIO_Init+0x22a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a1d      	ldr	r2, [pc, #116]	; (800454c <HAL_GPIO_Init+0x24c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d025      	beq.n	8004526 <HAL_GPIO_Init+0x226>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a1c      	ldr	r2, [pc, #112]	; (8004550 <HAL_GPIO_Init+0x250>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d01f      	beq.n	8004522 <HAL_GPIO_Init+0x222>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a1b      	ldr	r2, [pc, #108]	; (8004554 <HAL_GPIO_Init+0x254>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d019      	beq.n	800451e <HAL_GPIO_Init+0x21e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a1a      	ldr	r2, [pc, #104]	; (8004558 <HAL_GPIO_Init+0x258>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <HAL_GPIO_Init+0x21a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a19      	ldr	r2, [pc, #100]	; (800455c <HAL_GPIO_Init+0x25c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00d      	beq.n	8004516 <HAL_GPIO_Init+0x216>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a18      	ldr	r2, [pc, #96]	; (8004560 <HAL_GPIO_Init+0x260>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d007      	beq.n	8004512 <HAL_GPIO_Init+0x212>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a17      	ldr	r2, [pc, #92]	; (8004564 <HAL_GPIO_Init+0x264>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d101      	bne.n	800450e <HAL_GPIO_Init+0x20e>
 800450a:	2309      	movs	r3, #9
 800450c:	e02d      	b.n	800456a <HAL_GPIO_Init+0x26a>
 800450e:	230a      	movs	r3, #10
 8004510:	e02b      	b.n	800456a <HAL_GPIO_Init+0x26a>
 8004512:	2308      	movs	r3, #8
 8004514:	e029      	b.n	800456a <HAL_GPIO_Init+0x26a>
 8004516:	2307      	movs	r3, #7
 8004518:	e027      	b.n	800456a <HAL_GPIO_Init+0x26a>
 800451a:	2306      	movs	r3, #6
 800451c:	e025      	b.n	800456a <HAL_GPIO_Init+0x26a>
 800451e:	2305      	movs	r3, #5
 8004520:	e023      	b.n	800456a <HAL_GPIO_Init+0x26a>
 8004522:	2304      	movs	r3, #4
 8004524:	e021      	b.n	800456a <HAL_GPIO_Init+0x26a>
 8004526:	2303      	movs	r3, #3
 8004528:	e01f      	b.n	800456a <HAL_GPIO_Init+0x26a>
 800452a:	2302      	movs	r3, #2
 800452c:	e01d      	b.n	800456a <HAL_GPIO_Init+0x26a>
 800452e:	2301      	movs	r3, #1
 8004530:	e01b      	b.n	800456a <HAL_GPIO_Init+0x26a>
 8004532:	bf00      	nop
 8004534:	58000080 	.word	0x58000080
 8004538:	58024400 	.word	0x58024400
 800453c:	58000400 	.word	0x58000400
 8004540:	58020000 	.word	0x58020000
 8004544:	58020400 	.word	0x58020400
 8004548:	58020800 	.word	0x58020800
 800454c:	58020c00 	.word	0x58020c00
 8004550:	58021000 	.word	0x58021000
 8004554:	58021400 	.word	0x58021400
 8004558:	58021800 	.word	0x58021800
 800455c:	58021c00 	.word	0x58021c00
 8004560:	58022000 	.word	0x58022000
 8004564:	58022400 	.word	0x58022400
 8004568:	2300      	movs	r3, #0
 800456a:	69fa      	ldr	r2, [r7, #28]
 800456c:	f002 0203 	and.w	r2, r2, #3
 8004570:	0092      	lsls	r2, r2, #2
 8004572:	4093      	lsls	r3, r2
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4313      	orrs	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800457a:	4938      	ldr	r1, [pc, #224]	; (800465c <HAL_GPIO_Init+0x35c>)
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	089b      	lsrs	r3, r3, #2
 8004580:	3302      	adds	r3, #2
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	43db      	mvns	r3, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4013      	ands	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80045ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80045b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	43db      	mvns	r3, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80045dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	43db      	mvns	r3, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	4013      	ands	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	43db      	mvns	r3, r3
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	4013      	ands	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	3301      	adds	r3, #1
 800463c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	fa22 f303 	lsr.w	r3, r2, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	f47f ae63 	bne.w	8004314 <HAL_GPIO_Init+0x14>
  }
}
 800464e:	bf00      	nop
 8004650:	bf00      	nop
 8004652:	3724      	adds	r7, #36	; 0x24
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	58000400 	.word	0x58000400

08004660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	807b      	strh	r3, [r7, #2]
 800466c:	4613      	mov	r3, r2
 800466e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004670:	787b      	ldrb	r3, [r7, #1]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004676:	887a      	ldrh	r2, [r7, #2]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800467c:	e003      	b.n	8004686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800467e:	887b      	ldrh	r3, [r7, #2]
 8004680:	041a      	lsls	r2, r3, #16
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	619a      	str	r2, [r3, #24]
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
	...

08004694 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800469c:	4b29      	ldr	r3, [pc, #164]	; (8004744 <HAL_PWREx_ConfigSupply+0xb0>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	2b06      	cmp	r3, #6
 80046a6:	d00a      	beq.n	80046be <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80046a8:	4b26      	ldr	r3, [pc, #152]	; (8004744 <HAL_PWREx_ConfigSupply+0xb0>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d001      	beq.n	80046ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e040      	b.n	800473c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	e03e      	b.n	800473c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80046be:	4b21      	ldr	r3, [pc, #132]	; (8004744 <HAL_PWREx_ConfigSupply+0xb0>)
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80046c6:	491f      	ldr	r1, [pc, #124]	; (8004744 <HAL_PWREx_ConfigSupply+0xb0>)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80046ce:	f7fd f84d 	bl	800176c <HAL_GetTick>
 80046d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046d4:	e009      	b.n	80046ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80046d6:	f7fd f849 	bl	800176c <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046e4:	d901      	bls.n	80046ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e028      	b.n	800473c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046ea:	4b16      	ldr	r3, [pc, #88]	; (8004744 <HAL_PWREx_ConfigSupply+0xb0>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f6:	d1ee      	bne.n	80046d6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b1e      	cmp	r3, #30
 80046fc:	d008      	beq.n	8004710 <HAL_PWREx_ConfigSupply+0x7c>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b2e      	cmp	r3, #46	; 0x2e
 8004702:	d005      	beq.n	8004710 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b1d      	cmp	r3, #29
 8004708:	d002      	beq.n	8004710 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b2d      	cmp	r3, #45	; 0x2d
 800470e:	d114      	bne.n	800473a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004710:	f7fd f82c 	bl	800176c <HAL_GetTick>
 8004714:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004716:	e009      	b.n	800472c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004718:	f7fd f828 	bl	800176c <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004726:	d901      	bls.n	800472c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e007      	b.n	800473c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800472c:	4b05      	ldr	r3, [pc, #20]	; (8004744 <HAL_PWREx_ConfigSupply+0xb0>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004738:	d1ee      	bne.n	8004718 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	58024800 	.word	0x58024800

08004748 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08c      	sub	sp, #48	; 0x30
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d102      	bne.n	800475c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f000 bc1f 	b.w	8004f9a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 80b3 	beq.w	80048d0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800476a:	4b95      	ldr	r3, [pc, #596]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004772:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004774:	4b92      	ldr	r3, [pc, #584]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800477a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477c:	2b10      	cmp	r3, #16
 800477e:	d007      	beq.n	8004790 <HAL_RCC_OscConfig+0x48>
 8004780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004782:	2b18      	cmp	r3, #24
 8004784:	d112      	bne.n	80047ac <HAL_RCC_OscConfig+0x64>
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d10d      	bne.n	80047ac <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004790:	4b8b      	ldr	r3, [pc, #556]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8098 	beq.w	80048ce <HAL_RCC_OscConfig+0x186>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f040 8093 	bne.w	80048ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e3f6      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b4:	d106      	bne.n	80047c4 <HAL_RCC_OscConfig+0x7c>
 80047b6:	4b82      	ldr	r3, [pc, #520]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a81      	ldr	r2, [pc, #516]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 80047bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	e058      	b.n	8004876 <HAL_RCC_OscConfig+0x12e>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d112      	bne.n	80047f2 <HAL_RCC_OscConfig+0xaa>
 80047cc:	4b7c      	ldr	r3, [pc, #496]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a7b      	ldr	r2, [pc, #492]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 80047d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	4b79      	ldr	r3, [pc, #484]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a78      	ldr	r2, [pc, #480]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 80047de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	4b76      	ldr	r3, [pc, #472]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a75      	ldr	r2, [pc, #468]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 80047ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	e041      	b.n	8004876 <HAL_RCC_OscConfig+0x12e>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047fa:	d112      	bne.n	8004822 <HAL_RCC_OscConfig+0xda>
 80047fc:	4b70      	ldr	r3, [pc, #448]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a6f      	ldr	r2, [pc, #444]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 8004802:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	4b6d      	ldr	r3, [pc, #436]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a6c      	ldr	r2, [pc, #432]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 800480e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	4b6a      	ldr	r3, [pc, #424]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a69      	ldr	r2, [pc, #420]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 800481a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	e029      	b.n	8004876 <HAL_RCC_OscConfig+0x12e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800482a:	d112      	bne.n	8004852 <HAL_RCC_OscConfig+0x10a>
 800482c:	4b64      	ldr	r3, [pc, #400]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a63      	ldr	r2, [pc, #396]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 8004832:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	4b61      	ldr	r3, [pc, #388]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a60      	ldr	r2, [pc, #384]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 800483e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	4b5e      	ldr	r3, [pc, #376]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a5d      	ldr	r2, [pc, #372]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 800484a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800484e:	6013      	str	r3, [r2, #0]
 8004850:	e011      	b.n	8004876 <HAL_RCC_OscConfig+0x12e>
 8004852:	4b5b      	ldr	r3, [pc, #364]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a5a      	ldr	r2, [pc, #360]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 8004858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	4b58      	ldr	r3, [pc, #352]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a57      	ldr	r2, [pc, #348]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 8004864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	4b55      	ldr	r3, [pc, #340]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a54      	ldr	r2, [pc, #336]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 8004870:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004874:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d013      	beq.n	80048a6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487e:	f7fc ff75 	bl	800176c <HAL_GetTick>
 8004882:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004886:	f7fc ff71 	bl	800176c <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b64      	cmp	r3, #100	; 0x64
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e380      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004898:	4b49      	ldr	r3, [pc, #292]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0f0      	beq.n	8004886 <HAL_RCC_OscConfig+0x13e>
 80048a4:	e014      	b.n	80048d0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a6:	f7fc ff61 	bl	800176c <HAL_GetTick>
 80048aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048ae:	f7fc ff5d 	bl	800176c <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b64      	cmp	r3, #100	; 0x64
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e36c      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048c0:	4b3f      	ldr	r3, [pc, #252]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f0      	bne.n	80048ae <HAL_RCC_OscConfig+0x166>
 80048cc:	e000      	b.n	80048d0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 808c 	beq.w	80049f6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048de:	4b38      	ldr	r3, [pc, #224]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048e6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048e8:	4b35      	ldr	r3, [pc, #212]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d007      	beq.n	8004904 <HAL_RCC_OscConfig+0x1bc>
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	2b18      	cmp	r3, #24
 80048f8:	d137      	bne.n	800496a <HAL_RCC_OscConfig+0x222>
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d132      	bne.n	800496a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004904:	4b2e      	ldr	r3, [pc, #184]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_RCC_OscConfig+0x1d4>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e33e      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800491c:	4b28      	ldr	r3, [pc, #160]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 0219 	bic.w	r2, r3, #25
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4925      	ldr	r1, [pc, #148]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 800492a:	4313      	orrs	r3, r2
 800492c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492e:	f7fc ff1d 	bl	800176c <HAL_GetTick>
 8004932:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004936:	f7fc ff19 	bl	800176c <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e328      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004948:	4b1d      	ldr	r3, [pc, #116]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0f0      	beq.n	8004936 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004954:	4b1a      	ldr	r3, [pc, #104]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	061b      	lsls	r3, r3, #24
 8004962:	4917      	ldr	r1, [pc, #92]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 8004964:	4313      	orrs	r3, r2
 8004966:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004968:	e045      	b.n	80049f6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d028      	beq.n	80049c4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004972:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f023 0219 	bic.w	r2, r3, #25
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	4910      	ldr	r1, [pc, #64]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 8004980:	4313      	orrs	r3, r2
 8004982:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004984:	f7fc fef2 	bl	800176c <HAL_GetTick>
 8004988:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800498c:	f7fc feee 	bl	800176c <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e2fd      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800499e:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049aa:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	061b      	lsls	r3, r3, #24
 80049b8:	4901      	ldr	r1, [pc, #4]	; (80049c0 <HAL_RCC_OscConfig+0x278>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	604b      	str	r3, [r1, #4]
 80049be:	e01a      	b.n	80049f6 <HAL_RCC_OscConfig+0x2ae>
 80049c0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049c4:	4b97      	ldr	r3, [pc, #604]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a96      	ldr	r2, [pc, #600]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 80049ca:	f023 0301 	bic.w	r3, r3, #1
 80049ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d0:	f7fc fecc 	bl	800176c <HAL_GetTick>
 80049d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049d8:	f7fc fec8 	bl	800176c <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e2d7      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049ea:	4b8e      	ldr	r3, [pc, #568]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1f0      	bne.n	80049d8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0310 	and.w	r3, r3, #16
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d06a      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a02:	4b88      	ldr	r3, [pc, #544]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a0c:	4b85      	ldr	r3, [pc, #532]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d007      	beq.n	8004a28 <HAL_RCC_OscConfig+0x2e0>
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b18      	cmp	r3, #24
 8004a1c:	d11b      	bne.n	8004a56 <HAL_RCC_OscConfig+0x30e>
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d116      	bne.n	8004a56 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a28:	4b7e      	ldr	r3, [pc, #504]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_OscConfig+0x2f8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	2b80      	cmp	r3, #128	; 0x80
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e2ac      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a40:	4b78      	ldr	r3, [pc, #480]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	061b      	lsls	r3, r3, #24
 8004a4e:	4975      	ldr	r1, [pc, #468]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a54:	e040      	b.n	8004ad8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d023      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004a5e:	4b71      	ldr	r3, [pc, #452]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a70      	ldr	r2, [pc, #448]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6a:	f7fc fe7f 	bl	800176c <HAL_GetTick>
 8004a6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a72:	f7fc fe7b 	bl	800176c <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e28a      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a84:	4b67      	ldr	r3, [pc, #412]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f0      	beq.n	8004a72 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a90:	4b64      	ldr	r3, [pc, #400]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	061b      	lsls	r3, r3, #24
 8004a9e:	4961      	ldr	r1, [pc, #388]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60cb      	str	r3, [r1, #12]
 8004aa4:	e018      	b.n	8004ad8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004aa6:	4b5f      	ldr	r3, [pc, #380]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a5e      	ldr	r2, [pc, #376]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab2:	f7fc fe5b 	bl	800176c <HAL_GetTick>
 8004ab6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004aba:	f7fc fe57 	bl	800176c <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e266      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004acc:	4b55      	ldr	r3, [pc, #340]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1f0      	bne.n	8004aba <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0308 	and.w	r3, r3, #8
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d036      	beq.n	8004b52 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d019      	beq.n	8004b20 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aec:	4b4d      	ldr	r3, [pc, #308]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af0:	4a4c      	ldr	r2, [pc, #304]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004af2:	f043 0301 	orr.w	r3, r3, #1
 8004af6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af8:	f7fc fe38 	bl	800176c <HAL_GetTick>
 8004afc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b00:	f7fc fe34 	bl	800176c <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e243      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b12:	4b44      	ldr	r3, [pc, #272]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0f0      	beq.n	8004b00 <HAL_RCC_OscConfig+0x3b8>
 8004b1e:	e018      	b.n	8004b52 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b20:	4b40      	ldr	r3, [pc, #256]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b24:	4a3f      	ldr	r2, [pc, #252]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004b26:	f023 0301 	bic.w	r3, r3, #1
 8004b2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2c:	f7fc fe1e 	bl	800176c <HAL_GetTick>
 8004b30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b34:	f7fc fe1a 	bl	800176c <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e229      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b46:	4b37      	ldr	r3, [pc, #220]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f0      	bne.n	8004b34 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d036      	beq.n	8004bcc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d019      	beq.n	8004b9a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b66:	4b2f      	ldr	r3, [pc, #188]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a2e      	ldr	r2, [pc, #184]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004b6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b72:	f7fc fdfb 	bl	800176c <HAL_GetTick>
 8004b76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b78:	e008      	b.n	8004b8c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b7a:	f7fc fdf7 	bl	800176c <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e206      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b8c:	4b25      	ldr	r3, [pc, #148]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0f0      	beq.n	8004b7a <HAL_RCC_OscConfig+0x432>
 8004b98:	e018      	b.n	8004bcc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b9a:	4b22      	ldr	r3, [pc, #136]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a21      	ldr	r2, [pc, #132]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004ba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ba4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ba6:	f7fc fde1 	bl	800176c <HAL_GetTick>
 8004baa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bae:	f7fc fddd 	bl	800176c <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e1ec      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bc0:	4b18      	ldr	r3, [pc, #96]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1f0      	bne.n	8004bae <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 80af 	beq.w	8004d38 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bda:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <HAL_RCC_OscConfig+0x4e0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a12      	ldr	r2, [pc, #72]	; (8004c28 <HAL_RCC_OscConfig+0x4e0>)
 8004be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004be6:	f7fc fdc1 	bl	800176c <HAL_GetTick>
 8004bea:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bec:	e008      	b.n	8004c00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bee:	f7fc fdbd 	bl	800176c <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b64      	cmp	r3, #100	; 0x64
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e1cc      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c00:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <HAL_RCC_OscConfig+0x4e0>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0f0      	beq.n	8004bee <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d10b      	bne.n	8004c2c <HAL_RCC_OscConfig+0x4e4>
 8004c14:	4b03      	ldr	r3, [pc, #12]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	4a02      	ldr	r2, [pc, #8]	; (8004c24 <HAL_RCC_OscConfig+0x4dc>)
 8004c1a:	f043 0301 	orr.w	r3, r3, #1
 8004c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c20:	e05b      	b.n	8004cda <HAL_RCC_OscConfig+0x592>
 8004c22:	bf00      	nop
 8004c24:	58024400 	.word	0x58024400
 8004c28:	58024800 	.word	0x58024800
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d112      	bne.n	8004c5a <HAL_RCC_OscConfig+0x512>
 8004c34:	4b9d      	ldr	r3, [pc, #628]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c38:	4a9c      	ldr	r2, [pc, #624]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004c3a:	f023 0301 	bic.w	r3, r3, #1
 8004c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c40:	4b9a      	ldr	r3, [pc, #616]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c44:	4a99      	ldr	r2, [pc, #612]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c4c:	4b97      	ldr	r3, [pc, #604]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c50:	4a96      	ldr	r2, [pc, #600]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004c52:	f023 0304 	bic.w	r3, r3, #4
 8004c56:	6713      	str	r3, [r2, #112]	; 0x70
 8004c58:	e03f      	b.n	8004cda <HAL_RCC_OscConfig+0x592>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b05      	cmp	r3, #5
 8004c60:	d112      	bne.n	8004c88 <HAL_RCC_OscConfig+0x540>
 8004c62:	4b92      	ldr	r3, [pc, #584]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c66:	4a91      	ldr	r2, [pc, #580]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004c68:	f043 0304 	orr.w	r3, r3, #4
 8004c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c6e:	4b8f      	ldr	r3, [pc, #572]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c72:	4a8e      	ldr	r2, [pc, #568]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004c74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c78:	6713      	str	r3, [r2, #112]	; 0x70
 8004c7a:	4b8c      	ldr	r3, [pc, #560]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7e:	4a8b      	ldr	r2, [pc, #556]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004c80:	f043 0301 	orr.w	r3, r3, #1
 8004c84:	6713      	str	r3, [r2, #112]	; 0x70
 8004c86:	e028      	b.n	8004cda <HAL_RCC_OscConfig+0x592>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2b85      	cmp	r3, #133	; 0x85
 8004c8e:	d112      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x56e>
 8004c90:	4b86      	ldr	r3, [pc, #536]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c94:	4a85      	ldr	r2, [pc, #532]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004c96:	f043 0304 	orr.w	r3, r3, #4
 8004c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c9c:	4b83      	ldr	r3, [pc, #524]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca0:	4a82      	ldr	r2, [pc, #520]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca8:	4b80      	ldr	r3, [pc, #512]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cac:	4a7f      	ldr	r2, [pc, #508]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb4:	e011      	b.n	8004cda <HAL_RCC_OscConfig+0x592>
 8004cb6:	4b7d      	ldr	r3, [pc, #500]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cba:	4a7c      	ldr	r2, [pc, #496]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004cbc:	f023 0301 	bic.w	r3, r3, #1
 8004cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc2:	4b7a      	ldr	r3, [pc, #488]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc6:	4a79      	ldr	r2, [pc, #484]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004cc8:	f023 0304 	bic.w	r3, r3, #4
 8004ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8004cce:	4b77      	ldr	r3, [pc, #476]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd2:	4a76      	ldr	r2, [pc, #472]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d015      	beq.n	8004d0e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce2:	f7fc fd43 	bl	800176c <HAL_GetTick>
 8004ce6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ce8:	e00a      	b.n	8004d00 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cea:	f7fc fd3f 	bl	800176c <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e14c      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d00:	4b6a      	ldr	r3, [pc, #424]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0ee      	beq.n	8004cea <HAL_RCC_OscConfig+0x5a2>
 8004d0c:	e014      	b.n	8004d38 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0e:	f7fc fd2d 	bl	800176c <HAL_GetTick>
 8004d12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d14:	e00a      	b.n	8004d2c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d16:	f7fc fd29 	bl	800176c <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e136      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d2c:	4b5f      	ldr	r3, [pc, #380]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1ee      	bne.n	8004d16 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 812b 	beq.w	8004f98 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004d42:	4b5a      	ldr	r3, [pc, #360]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d4a:	2b18      	cmp	r3, #24
 8004d4c:	f000 80bb 	beq.w	8004ec6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	f040 8095 	bne.w	8004e84 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5a:	4b54      	ldr	r3, [pc, #336]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a53      	ldr	r2, [pc, #332]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004d60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d66:	f7fc fd01 	bl	800176c <HAL_GetTick>
 8004d6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d6e:	f7fc fcfd 	bl	800176c <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e10c      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d80:	4b4a      	ldr	r3, [pc, #296]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1f0      	bne.n	8004d6e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d8c:	4b47      	ldr	r3, [pc, #284]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004d8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d90:	4b47      	ldr	r3, [pc, #284]	; (8004eb0 <HAL_RCC_OscConfig+0x768>)
 8004d92:	4013      	ands	r3, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d9c:	0112      	lsls	r2, r2, #4
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	4942      	ldr	r1, [pc, #264]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	628b      	str	r3, [r1, #40]	; 0x28
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	3b01      	subs	r3, #1
 8004dac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db4:	3b01      	subs	r3, #1
 8004db6:	025b      	lsls	r3, r3, #9
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	041b      	lsls	r3, r3, #16
 8004dc4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	061b      	lsls	r3, r3, #24
 8004dd2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004dd6:	4935      	ldr	r1, [pc, #212]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004ddc:	4b33      	ldr	r3, [pc, #204]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	4a32      	ldr	r2, [pc, #200]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004de2:	f023 0301 	bic.w	r3, r3, #1
 8004de6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004de8:	4b30      	ldr	r3, [pc, #192]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dec:	4b31      	ldr	r3, [pc, #196]	; (8004eb4 <HAL_RCC_OscConfig+0x76c>)
 8004dee:	4013      	ands	r3, r2
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004df4:	00d2      	lsls	r2, r2, #3
 8004df6:	492d      	ldr	r1, [pc, #180]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004dfc:	4b2b      	ldr	r3, [pc, #172]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	f023 020c 	bic.w	r2, r3, #12
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e08:	4928      	ldr	r1, [pc, #160]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004e0e:	4b27      	ldr	r3, [pc, #156]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	f023 0202 	bic.w	r2, r3, #2
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1a:	4924      	ldr	r1, [pc, #144]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e20:	4b22      	ldr	r3, [pc, #136]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e24:	4a21      	ldr	r2, [pc, #132]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e2c:	4b1f      	ldr	r3, [pc, #124]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	4a1e      	ldr	r2, [pc, #120]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004e38:	4b1c      	ldr	r3, [pc, #112]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	4a1b      	ldr	r2, [pc, #108]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004e3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004e44:	4b19      	ldr	r3, [pc, #100]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	4a18      	ldr	r2, [pc, #96]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004e4a:	f043 0301 	orr.w	r3, r3, #1
 8004e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e50:	4b16      	ldr	r3, [pc, #88]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a15      	ldr	r2, [pc, #84]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5c:	f7fc fc86 	bl	800176c <HAL_GetTick>
 8004e60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e64:	f7fc fc82 	bl	800176c <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e091      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e76:	4b0d      	ldr	r3, [pc, #52]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0f0      	beq.n	8004e64 <HAL_RCC_OscConfig+0x71c>
 8004e82:	e089      	b.n	8004f98 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e84:	4b09      	ldr	r3, [pc, #36]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a08      	ldr	r2, [pc, #32]	; (8004eac <HAL_RCC_OscConfig+0x764>)
 8004e8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e90:	f7fc fc6c 	bl	800176c <HAL_GetTick>
 8004e94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e96:	e00f      	b.n	8004eb8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e98:	f7fc fc68 	bl	800176c <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d908      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e077      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
 8004eaa:	bf00      	nop
 8004eac:	58024400 	.word	0x58024400
 8004eb0:	fffffc0c 	.word	0xfffffc0c
 8004eb4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eb8:	4b3a      	ldr	r3, [pc, #232]	; (8004fa4 <HAL_RCC_OscConfig+0x85c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1e9      	bne.n	8004e98 <HAL_RCC_OscConfig+0x750>
 8004ec4:	e068      	b.n	8004f98 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ec6:	4b37      	ldr	r3, [pc, #220]	; (8004fa4 <HAL_RCC_OscConfig+0x85c>)
 8004ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eca:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ecc:	4b35      	ldr	r3, [pc, #212]	; (8004fa4 <HAL_RCC_OscConfig+0x85c>)
 8004ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d031      	beq.n	8004f3e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f003 0203 	and.w	r2, r3, #3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d12a      	bne.n	8004f3e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	091b      	lsrs	r3, r3, #4
 8004eec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d122      	bne.n	8004f3e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d11a      	bne.n	8004f3e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	0a5b      	lsrs	r3, r3, #9
 8004f0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f14:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d111      	bne.n	8004f3e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	0c1b      	lsrs	r3, r3, #16
 8004f1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f26:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d108      	bne.n	8004f3e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	0e1b      	lsrs	r3, r3, #24
 8004f30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f38:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d001      	beq.n	8004f42 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e02b      	b.n	8004f9a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004f42:	4b18      	ldr	r3, [pc, #96]	; (8004fa4 <HAL_RCC_OscConfig+0x85c>)
 8004f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f46:	08db      	lsrs	r3, r3, #3
 8004f48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f4c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d01f      	beq.n	8004f98 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004f58:	4b12      	ldr	r3, [pc, #72]	; (8004fa4 <HAL_RCC_OscConfig+0x85c>)
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	4a11      	ldr	r2, [pc, #68]	; (8004fa4 <HAL_RCC_OscConfig+0x85c>)
 8004f5e:	f023 0301 	bic.w	r3, r3, #1
 8004f62:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f64:	f7fc fc02 	bl	800176c <HAL_GetTick>
 8004f68:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004f6a:	bf00      	nop
 8004f6c:	f7fc fbfe 	bl	800176c <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d0f9      	beq.n	8004f6c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f78:	4b0a      	ldr	r3, [pc, #40]	; (8004fa4 <HAL_RCC_OscConfig+0x85c>)
 8004f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f7c:	4b0a      	ldr	r3, [pc, #40]	; (8004fa8 <HAL_RCC_OscConfig+0x860>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f84:	00d2      	lsls	r2, r2, #3
 8004f86:	4907      	ldr	r1, [pc, #28]	; (8004fa4 <HAL_RCC_OscConfig+0x85c>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004f8c:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <HAL_RCC_OscConfig+0x85c>)
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	4a04      	ldr	r2, [pc, #16]	; (8004fa4 <HAL_RCC_OscConfig+0x85c>)
 8004f92:	f043 0301 	orr.w	r3, r3, #1
 8004f96:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3730      	adds	r7, #48	; 0x30
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	58024400 	.word	0x58024400
 8004fa8:	ffff0007 	.word	0xffff0007

08004fac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e19c      	b.n	80052fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc0:	4b8a      	ldr	r3, [pc, #552]	; (80051ec <HAL_RCC_ClockConfig+0x240>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 030f 	and.w	r3, r3, #15
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d910      	bls.n	8004ff0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fce:	4b87      	ldr	r3, [pc, #540]	; (80051ec <HAL_RCC_ClockConfig+0x240>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f023 020f 	bic.w	r2, r3, #15
 8004fd6:	4985      	ldr	r1, [pc, #532]	; (80051ec <HAL_RCC_ClockConfig+0x240>)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fde:	4b83      	ldr	r3, [pc, #524]	; (80051ec <HAL_RCC_ClockConfig+0x240>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d001      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e184      	b.n	80052fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d010      	beq.n	800501e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	4b7b      	ldr	r3, [pc, #492]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005008:	429a      	cmp	r2, r3
 800500a:	d908      	bls.n	800501e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800500c:	4b78      	ldr	r3, [pc, #480]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	4975      	ldr	r1, [pc, #468]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 800501a:	4313      	orrs	r3, r2
 800501c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d010      	beq.n	800504c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695a      	ldr	r2, [r3, #20]
 800502e:	4b70      	ldr	r3, [pc, #448]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005036:	429a      	cmp	r2, r3
 8005038:	d908      	bls.n	800504c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800503a:	4b6d      	ldr	r3, [pc, #436]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	496a      	ldr	r1, [pc, #424]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 8005048:	4313      	orrs	r3, r2
 800504a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0310 	and.w	r3, r3, #16
 8005054:	2b00      	cmp	r3, #0
 8005056:	d010      	beq.n	800507a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	699a      	ldr	r2, [r3, #24]
 800505c:	4b64      	ldr	r3, [pc, #400]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005064:	429a      	cmp	r2, r3
 8005066:	d908      	bls.n	800507a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005068:	4b61      	ldr	r3, [pc, #388]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	495e      	ldr	r1, [pc, #376]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 8005076:	4313      	orrs	r3, r2
 8005078:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b00      	cmp	r3, #0
 8005084:	d010      	beq.n	80050a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69da      	ldr	r2, [r3, #28]
 800508a:	4b59      	ldr	r3, [pc, #356]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005092:	429a      	cmp	r2, r3
 8005094:	d908      	bls.n	80050a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005096:	4b56      	ldr	r3, [pc, #344]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	4953      	ldr	r1, [pc, #332]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d010      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	4b4d      	ldr	r3, [pc, #308]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	f003 030f 	and.w	r3, r3, #15
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d908      	bls.n	80050d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c4:	4b4a      	ldr	r3, [pc, #296]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	f023 020f 	bic.w	r2, r3, #15
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	4947      	ldr	r1, [pc, #284]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d055      	beq.n	800518e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80050e2:	4b43      	ldr	r3, [pc, #268]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	4940      	ldr	r1, [pc, #256]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d107      	bne.n	800510c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050fc:	4b3c      	ldr	r3, [pc, #240]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d121      	bne.n	800514c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e0f6      	b.n	80052fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b03      	cmp	r3, #3
 8005112:	d107      	bne.n	8005124 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005114:	4b36      	ldr	r3, [pc, #216]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d115      	bne.n	800514c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e0ea      	b.n	80052fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d107      	bne.n	800513c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800512c:	4b30      	ldr	r3, [pc, #192]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005134:	2b00      	cmp	r3, #0
 8005136:	d109      	bne.n	800514c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e0de      	b.n	80052fa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800513c:	4b2c      	ldr	r3, [pc, #176]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e0d6      	b.n	80052fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800514c:	4b28      	ldr	r3, [pc, #160]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f023 0207 	bic.w	r2, r3, #7
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	4925      	ldr	r1, [pc, #148]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 800515a:	4313      	orrs	r3, r2
 800515c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800515e:	f7fc fb05 	bl	800176c <HAL_GetTick>
 8005162:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005164:	e00a      	b.n	800517c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005166:	f7fc fb01 	bl	800176c <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	f241 3288 	movw	r2, #5000	; 0x1388
 8005174:	4293      	cmp	r3, r2
 8005176:	d901      	bls.n	800517c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e0be      	b.n	80052fa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800517c:	4b1c      	ldr	r3, [pc, #112]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	429a      	cmp	r2, r3
 800518c:	d1eb      	bne.n	8005166 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d010      	beq.n	80051bc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	4b14      	ldr	r3, [pc, #80]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	f003 030f 	and.w	r3, r3, #15
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d208      	bcs.n	80051bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051aa:	4b11      	ldr	r3, [pc, #68]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	f023 020f 	bic.w	r2, r3, #15
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	490e      	ldr	r1, [pc, #56]	; (80051f0 <HAL_RCC_ClockConfig+0x244>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051bc:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <HAL_RCC_ClockConfig+0x240>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 030f 	and.w	r3, r3, #15
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d214      	bcs.n	80051f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ca:	4b08      	ldr	r3, [pc, #32]	; (80051ec <HAL_RCC_ClockConfig+0x240>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f023 020f 	bic.w	r2, r3, #15
 80051d2:	4906      	ldr	r1, [pc, #24]	; (80051ec <HAL_RCC_ClockConfig+0x240>)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051da:	4b04      	ldr	r3, [pc, #16]	; (80051ec <HAL_RCC_ClockConfig+0x240>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e086      	b.n	80052fa <HAL_RCC_ClockConfig+0x34e>
 80051ec:	52002000 	.word	0x52002000
 80051f0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d010      	beq.n	8005222 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	4b3f      	ldr	r3, [pc, #252]	; (8005304 <HAL_RCC_ClockConfig+0x358>)
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800520c:	429a      	cmp	r2, r3
 800520e:	d208      	bcs.n	8005222 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005210:	4b3c      	ldr	r3, [pc, #240]	; (8005304 <HAL_RCC_ClockConfig+0x358>)
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	4939      	ldr	r1, [pc, #228]	; (8005304 <HAL_RCC_ClockConfig+0x358>)
 800521e:	4313      	orrs	r3, r2
 8005220:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b00      	cmp	r3, #0
 800522c:	d010      	beq.n	8005250 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	695a      	ldr	r2, [r3, #20]
 8005232:	4b34      	ldr	r3, [pc, #208]	; (8005304 <HAL_RCC_ClockConfig+0x358>)
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800523a:	429a      	cmp	r2, r3
 800523c:	d208      	bcs.n	8005250 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800523e:	4b31      	ldr	r3, [pc, #196]	; (8005304 <HAL_RCC_ClockConfig+0x358>)
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	492e      	ldr	r1, [pc, #184]	; (8005304 <HAL_RCC_ClockConfig+0x358>)
 800524c:	4313      	orrs	r3, r2
 800524e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b00      	cmp	r3, #0
 800525a:	d010      	beq.n	800527e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	699a      	ldr	r2, [r3, #24]
 8005260:	4b28      	ldr	r3, [pc, #160]	; (8005304 <HAL_RCC_ClockConfig+0x358>)
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005268:	429a      	cmp	r2, r3
 800526a:	d208      	bcs.n	800527e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800526c:	4b25      	ldr	r3, [pc, #148]	; (8005304 <HAL_RCC_ClockConfig+0x358>)
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	4922      	ldr	r1, [pc, #136]	; (8005304 <HAL_RCC_ClockConfig+0x358>)
 800527a:	4313      	orrs	r3, r2
 800527c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	d010      	beq.n	80052ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69da      	ldr	r2, [r3, #28]
 800528e:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <HAL_RCC_ClockConfig+0x358>)
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005296:	429a      	cmp	r2, r3
 8005298:	d208      	bcs.n	80052ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800529a:	4b1a      	ldr	r3, [pc, #104]	; (8005304 <HAL_RCC_ClockConfig+0x358>)
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	4917      	ldr	r1, [pc, #92]	; (8005304 <HAL_RCC_ClockConfig+0x358>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80052ac:	f000 f834 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 80052b0:	4602      	mov	r2, r0
 80052b2:	4b14      	ldr	r3, [pc, #80]	; (8005304 <HAL_RCC_ClockConfig+0x358>)
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	0a1b      	lsrs	r3, r3, #8
 80052b8:	f003 030f 	and.w	r3, r3, #15
 80052bc:	4912      	ldr	r1, [pc, #72]	; (8005308 <HAL_RCC_ClockConfig+0x35c>)
 80052be:	5ccb      	ldrb	r3, [r1, r3]
 80052c0:	f003 031f 	and.w	r3, r3, #31
 80052c4:	fa22 f303 	lsr.w	r3, r2, r3
 80052c8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80052ca:	4b0e      	ldr	r3, [pc, #56]	; (8005304 <HAL_RCC_ClockConfig+0x358>)
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	4a0d      	ldr	r2, [pc, #52]	; (8005308 <HAL_RCC_ClockConfig+0x35c>)
 80052d4:	5cd3      	ldrb	r3, [r2, r3]
 80052d6:	f003 031f 	and.w	r3, r3, #31
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	fa22 f303 	lsr.w	r3, r2, r3
 80052e0:	4a0a      	ldr	r2, [pc, #40]	; (800530c <HAL_RCC_ClockConfig+0x360>)
 80052e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052e4:	4a0a      	ldr	r2, [pc, #40]	; (8005310 <HAL_RCC_ClockConfig+0x364>)
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80052ea:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <HAL_RCC_ClockConfig+0x368>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fc f9f2 	bl	80016d8 <HAL_InitTick>
 80052f4:	4603      	mov	r3, r0
 80052f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	58024400 	.word	0x58024400
 8005308:	0800abc4 	.word	0x0800abc4
 800530c:	24000004 	.word	0x24000004
 8005310:	24000000 	.word	0x24000000
 8005314:	24000008 	.word	0x24000008

08005318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005318:	b480      	push	{r7}
 800531a:	b089      	sub	sp, #36	; 0x24
 800531c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800531e:	4bb3      	ldr	r3, [pc, #716]	; (80055ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005326:	2b18      	cmp	r3, #24
 8005328:	f200 8155 	bhi.w	80055d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800532c:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <HAL_RCC_GetSysClockFreq+0x1c>)
 800532e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005332:	bf00      	nop
 8005334:	08005399 	.word	0x08005399
 8005338:	080055d7 	.word	0x080055d7
 800533c:	080055d7 	.word	0x080055d7
 8005340:	080055d7 	.word	0x080055d7
 8005344:	080055d7 	.word	0x080055d7
 8005348:	080055d7 	.word	0x080055d7
 800534c:	080055d7 	.word	0x080055d7
 8005350:	080055d7 	.word	0x080055d7
 8005354:	080053bf 	.word	0x080053bf
 8005358:	080055d7 	.word	0x080055d7
 800535c:	080055d7 	.word	0x080055d7
 8005360:	080055d7 	.word	0x080055d7
 8005364:	080055d7 	.word	0x080055d7
 8005368:	080055d7 	.word	0x080055d7
 800536c:	080055d7 	.word	0x080055d7
 8005370:	080055d7 	.word	0x080055d7
 8005374:	080053c5 	.word	0x080053c5
 8005378:	080055d7 	.word	0x080055d7
 800537c:	080055d7 	.word	0x080055d7
 8005380:	080055d7 	.word	0x080055d7
 8005384:	080055d7 	.word	0x080055d7
 8005388:	080055d7 	.word	0x080055d7
 800538c:	080055d7 	.word	0x080055d7
 8005390:	080055d7 	.word	0x080055d7
 8005394:	080053cb 	.word	0x080053cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005398:	4b94      	ldr	r3, [pc, #592]	; (80055ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d009      	beq.n	80053b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053a4:	4b91      	ldr	r3, [pc, #580]	; (80055ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	08db      	lsrs	r3, r3, #3
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	4a90      	ldr	r2, [pc, #576]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053b0:	fa22 f303 	lsr.w	r3, r2, r3
 80053b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80053b6:	e111      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80053b8:	4b8d      	ldr	r3, [pc, #564]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053ba:	61bb      	str	r3, [r7, #24]
      break;
 80053bc:	e10e      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80053be:	4b8d      	ldr	r3, [pc, #564]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053c0:	61bb      	str	r3, [r7, #24]
      break;
 80053c2:	e10b      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80053c4:	4b8c      	ldr	r3, [pc, #560]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80053c6:	61bb      	str	r3, [r7, #24]
      break;
 80053c8:	e108      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053ca:	4b88      	ldr	r3, [pc, #544]	; (80055ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80053d4:	4b85      	ldr	r3, [pc, #532]	; (80055ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d8:	091b      	lsrs	r3, r3, #4
 80053da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80053e0:	4b82      	ldr	r3, [pc, #520]	; (80055ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80053ea:	4b80      	ldr	r3, [pc, #512]	; (80055ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ee:	08db      	lsrs	r3, r3, #3
 80053f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	fb02 f303 	mul.w	r3, r2, r3
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005402:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 80e1 	beq.w	80055d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b02      	cmp	r3, #2
 8005412:	f000 8083 	beq.w	800551c <HAL_RCC_GetSysClockFreq+0x204>
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2b02      	cmp	r3, #2
 800541a:	f200 80a1 	bhi.w	8005560 <HAL_RCC_GetSysClockFreq+0x248>
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <HAL_RCC_GetSysClockFreq+0x114>
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d056      	beq.n	80054d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800542a:	e099      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800542c:	4b6f      	ldr	r3, [pc, #444]	; (80055ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0320 	and.w	r3, r3, #32
 8005434:	2b00      	cmp	r3, #0
 8005436:	d02d      	beq.n	8005494 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005438:	4b6c      	ldr	r3, [pc, #432]	; (80055ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	08db      	lsrs	r3, r3, #3
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	4a6b      	ldr	r2, [pc, #428]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005444:	fa22 f303 	lsr.w	r3, r2, r3
 8005448:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	ee07 3a90 	vmov	s15, r3
 8005450:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005462:	4b62      	ldr	r3, [pc, #392]	; (80055ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005472:	ed97 6a02 	vldr	s12, [r7, #8]
 8005476:	eddf 5a61 	vldr	s11, [pc, #388]	; 80055fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800547a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800547e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800548a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005492:	e087      	b.n	80055a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005600 <HAL_RCC_GetSysClockFreq+0x2e8>
 80054a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a6:	4b51      	ldr	r3, [pc, #324]	; (80055ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80054ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 80055fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80054be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054d6:	e065      	b.n	80055a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005604 <HAL_RCC_GetSysClockFreq+0x2ec>
 80054e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ea:	4b40      	ldr	r3, [pc, #256]	; (80055ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f2:	ee07 3a90 	vmov	s15, r3
 80054f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80054fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80055fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800550a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800550e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005516:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800551a:	e043      	b.n	80055a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005526:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005608 <HAL_RCC_GetSysClockFreq+0x2f0>
 800552a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800552e:	4b2f      	ldr	r3, [pc, #188]	; (80055ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005542:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80055fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800554a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800554e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800555a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800555e:	e021      	b.n	80055a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	ee07 3a90 	vmov	s15, r3
 8005566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005604 <HAL_RCC_GetSysClockFreq+0x2ec>
 800556e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005572:	4b1e      	ldr	r3, [pc, #120]	; (80055ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557a:	ee07 3a90 	vmov	s15, r3
 800557e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005582:	ed97 6a02 	vldr	s12, [r7, #8]
 8005586:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80055fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800558a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800558e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800559a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800559e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80055a4:	4b11      	ldr	r3, [pc, #68]	; (80055ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a8:	0a5b      	lsrs	r3, r3, #9
 80055aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ae:	3301      	adds	r3, #1
 80055b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	ee07 3a90 	vmov	s15, r3
 80055b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80055c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055c8:	ee17 3a90 	vmov	r3, s15
 80055cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80055ce:	e005      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61bb      	str	r3, [r7, #24]
      break;
 80055d4:	e002      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80055d6:	4b07      	ldr	r3, [pc, #28]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80055d8:	61bb      	str	r3, [r7, #24]
      break;
 80055da:	bf00      	nop
  }

  return sysclockfreq;
 80055dc:	69bb      	ldr	r3, [r7, #24]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3724      	adds	r7, #36	; 0x24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	58024400 	.word	0x58024400
 80055f0:	03d09000 	.word	0x03d09000
 80055f4:	003d0900 	.word	0x003d0900
 80055f8:	007a1200 	.word	0x007a1200
 80055fc:	46000000 	.word	0x46000000
 8005600:	4c742400 	.word	0x4c742400
 8005604:	4a742400 	.word	0x4a742400
 8005608:	4af42400 	.word	0x4af42400

0800560c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005612:	f7ff fe81 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 8005616:	4602      	mov	r2, r0
 8005618:	4b10      	ldr	r3, [pc, #64]	; (800565c <HAL_RCC_GetHCLKFreq+0x50>)
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	0a1b      	lsrs	r3, r3, #8
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	490f      	ldr	r1, [pc, #60]	; (8005660 <HAL_RCC_GetHCLKFreq+0x54>)
 8005624:	5ccb      	ldrb	r3, [r1, r3]
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	fa22 f303 	lsr.w	r3, r2, r3
 800562e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005630:	4b0a      	ldr	r3, [pc, #40]	; (800565c <HAL_RCC_GetHCLKFreq+0x50>)
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	f003 030f 	and.w	r3, r3, #15
 8005638:	4a09      	ldr	r2, [pc, #36]	; (8005660 <HAL_RCC_GetHCLKFreq+0x54>)
 800563a:	5cd3      	ldrb	r3, [r2, r3]
 800563c:	f003 031f 	and.w	r3, r3, #31
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	fa22 f303 	lsr.w	r3, r2, r3
 8005646:	4a07      	ldr	r2, [pc, #28]	; (8005664 <HAL_RCC_GetHCLKFreq+0x58>)
 8005648:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800564a:	4a07      	ldr	r2, [pc, #28]	; (8005668 <HAL_RCC_GetHCLKFreq+0x5c>)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005650:	4b04      	ldr	r3, [pc, #16]	; (8005664 <HAL_RCC_GetHCLKFreq+0x58>)
 8005652:	681b      	ldr	r3, [r3, #0]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	58024400 	.word	0x58024400
 8005660:	0800abc4 	.word	0x0800abc4
 8005664:	24000004 	.word	0x24000004
 8005668:	24000000 	.word	0x24000000

0800566c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005670:	f7ff ffcc 	bl	800560c <HAL_RCC_GetHCLKFreq>
 8005674:	4602      	mov	r2, r0
 8005676:	4b06      	ldr	r3, [pc, #24]	; (8005690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	091b      	lsrs	r3, r3, #4
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	4904      	ldr	r1, [pc, #16]	; (8005694 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005682:	5ccb      	ldrb	r3, [r1, r3]
 8005684:	f003 031f 	and.w	r3, r3, #31
 8005688:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800568c:	4618      	mov	r0, r3
 800568e:	bd80      	pop	{r7, pc}
 8005690:	58024400 	.word	0x58024400
 8005694:	0800abc4 	.word	0x0800abc4

08005698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800569c:	f7ff ffb6 	bl	800560c <HAL_RCC_GetHCLKFreq>
 80056a0:	4602      	mov	r2, r0
 80056a2:	4b06      	ldr	r3, [pc, #24]	; (80056bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	0a1b      	lsrs	r3, r3, #8
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	4904      	ldr	r1, [pc, #16]	; (80056c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056ae:	5ccb      	ldrb	r3, [r1, r3]
 80056b0:	f003 031f 	and.w	r3, r3, #31
 80056b4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	58024400 	.word	0x58024400
 80056c0:	0800abc4 	.word	0x0800abc4

080056c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056c8:	b0c8      	sub	sp, #288	; 0x120
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056d0:	2300      	movs	r3, #0
 80056d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056d6:	2300      	movs	r3, #0
 80056d8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80056e8:	2500      	movs	r5, #0
 80056ea:	ea54 0305 	orrs.w	r3, r4, r5
 80056ee:	d049      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80056f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056fa:	d02f      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80056fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005700:	d828      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005702:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005706:	d01a      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005708:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800570c:	d822      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005716:	d007      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005718:	e01c      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800571a:	4ba7      	ldr	r3, [pc, #668]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571e:	4aa6      	ldr	r2, [pc, #664]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005724:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005726:	e01a      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005728:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800572c:	3308      	adds	r3, #8
 800572e:	2102      	movs	r1, #2
 8005730:	4618      	mov	r0, r3
 8005732:	f002 fa6d 	bl	8007c10 <RCCEx_PLL2_Config>
 8005736:	4603      	mov	r3, r0
 8005738:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800573c:	e00f      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800573e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005742:	3328      	adds	r3, #40	; 0x28
 8005744:	2102      	movs	r1, #2
 8005746:	4618      	mov	r0, r3
 8005748:	f002 fb14 	bl	8007d74 <RCCEx_PLL3_Config>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005752:	e004      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800575a:	e000      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800575c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800575e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10a      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005766:	4b94      	ldr	r3, [pc, #592]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800576a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800576e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005774:	4a90      	ldr	r2, [pc, #576]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005776:	430b      	orrs	r3, r1
 8005778:	6513      	str	r3, [r2, #80]	; 0x50
 800577a:	e003      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005780:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005790:	f04f 0900 	mov.w	r9, #0
 8005794:	ea58 0309 	orrs.w	r3, r8, r9
 8005798:	d047      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800579a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800579e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	d82a      	bhi.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80057a4:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80057a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057aa:	bf00      	nop
 80057ac:	080057c1 	.word	0x080057c1
 80057b0:	080057cf 	.word	0x080057cf
 80057b4:	080057e5 	.word	0x080057e5
 80057b8:	08005803 	.word	0x08005803
 80057bc:	08005803 	.word	0x08005803
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057c0:	4b7d      	ldr	r3, [pc, #500]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	4a7c      	ldr	r2, [pc, #496]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057cc:	e01a      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d2:	3308      	adds	r3, #8
 80057d4:	2100      	movs	r1, #0
 80057d6:	4618      	mov	r0, r3
 80057d8:	f002 fa1a 	bl	8007c10 <RCCEx_PLL2_Config>
 80057dc:	4603      	mov	r3, r0
 80057de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057e2:	e00f      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e8:	3328      	adds	r3, #40	; 0x28
 80057ea:	2100      	movs	r1, #0
 80057ec:	4618      	mov	r0, r3
 80057ee:	f002 fac1 	bl	8007d74 <RCCEx_PLL3_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057f8:	e004      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005800:	e000      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005804:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10a      	bne.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800580c:	4b6a      	ldr	r3, [pc, #424]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800580e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005810:	f023 0107 	bic.w	r1, r3, #7
 8005814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581a:	4a67      	ldr	r2, [pc, #412]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800581c:	430b      	orrs	r3, r1
 800581e:	6513      	str	r3, [r2, #80]	; 0x50
 8005820:	e003      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005822:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005826:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800582a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005836:	f04f 0b00 	mov.w	fp, #0
 800583a:	ea5a 030b 	orrs.w	r3, sl, fp
 800583e:	d054      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005846:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800584a:	d036      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800584c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005850:	d82f      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005856:	d032      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800585c:	d829      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800585e:	2bc0      	cmp	r3, #192	; 0xc0
 8005860:	d02f      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8005862:	2bc0      	cmp	r3, #192	; 0xc0
 8005864:	d825      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005866:	2b80      	cmp	r3, #128	; 0x80
 8005868:	d018      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800586a:	2b80      	cmp	r3, #128	; 0x80
 800586c:	d821      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005872:	2b40      	cmp	r3, #64	; 0x40
 8005874:	d007      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005876:	e01c      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005878:	4b4f      	ldr	r3, [pc, #316]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	4a4e      	ldr	r2, [pc, #312]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800587e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005882:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005884:	e01e      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800588a:	3308      	adds	r3, #8
 800588c:	2100      	movs	r1, #0
 800588e:	4618      	mov	r0, r3
 8005890:	f002 f9be 	bl	8007c10 <RCCEx_PLL2_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800589a:	e013      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800589c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058a0:	3328      	adds	r3, #40	; 0x28
 80058a2:	2100      	movs	r1, #0
 80058a4:	4618      	mov	r0, r3
 80058a6:	f002 fa65 	bl	8007d74 <RCCEx_PLL3_Config>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80058b0:	e008      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80058b8:	e004      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80058ba:	bf00      	nop
 80058bc:	e002      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80058be:	bf00      	nop
 80058c0:	e000      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80058c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10a      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80058cc:	4b3a      	ldr	r3, [pc, #232]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80058d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058da:	4a37      	ldr	r2, [pc, #220]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058dc:	430b      	orrs	r3, r1
 80058de:	6513      	str	r3, [r2, #80]	; 0x50
 80058e0:	e003      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80058ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80058f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058fa:	2300      	movs	r3, #0
 80058fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005900:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005904:	460b      	mov	r3, r1
 8005906:	4313      	orrs	r3, r2
 8005908:	d05c      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800590a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800590e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005910:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005914:	d03b      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005916:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800591a:	d834      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800591c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005920:	d037      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005926:	d82e      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005928:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800592c:	d033      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800592e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005932:	d828      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005938:	d01a      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800593a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800593e:	d822      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005948:	d007      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800594a:	e01c      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800594c:	4b1a      	ldr	r3, [pc, #104]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	4a19      	ldr	r2, [pc, #100]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005956:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005958:	e01e      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800595a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800595e:	3308      	adds	r3, #8
 8005960:	2100      	movs	r1, #0
 8005962:	4618      	mov	r0, r3
 8005964:	f002 f954 	bl	8007c10 <RCCEx_PLL2_Config>
 8005968:	4603      	mov	r3, r0
 800596a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800596e:	e013      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005974:	3328      	adds	r3, #40	; 0x28
 8005976:	2100      	movs	r1, #0
 8005978:	4618      	mov	r0, r3
 800597a:	f002 f9fb 	bl	8007d74 <RCCEx_PLL3_Config>
 800597e:	4603      	mov	r3, r0
 8005980:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005984:	e008      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800598c:	e004      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800598e:	bf00      	nop
 8005990:	e002      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005992:	bf00      	nop
 8005994:	e000      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005998:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10d      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80059a0:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80059a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ae:	4a02      	ldr	r2, [pc, #8]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059b0:	430b      	orrs	r3, r1
 80059b2:	6513      	str	r3, [r2, #80]	; 0x50
 80059b4:	e006      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80059b6:	bf00      	nop
 80059b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80059c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059cc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80059d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80059d4:	2300      	movs	r3, #0
 80059d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80059da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80059de:	460b      	mov	r3, r1
 80059e0:	4313      	orrs	r3, r2
 80059e2:	d03a      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80059e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ea:	2b30      	cmp	r3, #48	; 0x30
 80059ec:	d01f      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80059ee:	2b30      	cmp	r3, #48	; 0x30
 80059f0:	d819      	bhi.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	d00c      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d815      	bhi.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d019      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80059fe:	2b10      	cmp	r3, #16
 8005a00:	d111      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a02:	4bae      	ldr	r3, [pc, #696]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a06:	4aad      	ldr	r2, [pc, #692]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005a0e:	e011      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a14:	3308      	adds	r3, #8
 8005a16:	2102      	movs	r1, #2
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f002 f8f9 	bl	8007c10 <RCCEx_PLL2_Config>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005a24:	e006      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005a2c:	e002      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005a2e:	bf00      	nop
 8005a30:	e000      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005a32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10a      	bne.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005a3c:	4b9f      	ldr	r3, [pc, #636]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a40:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4a:	4a9c      	ldr	r2, [pc, #624]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a4c:	430b      	orrs	r3, r1
 8005a4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a50:	e003      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a56:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a62:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005a66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a70:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4313      	orrs	r3, r2
 8005a78:	d051      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a84:	d035      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005a86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a8a:	d82e      	bhi.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005a8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a90:	d031      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8005a92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a96:	d828      	bhi.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a9c:	d01a      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa2:	d822      	bhi.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aac:	d007      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005aae:	e01c      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ab0:	4b82      	ldr	r3, [pc, #520]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	4a81      	ldr	r2, [pc, #516]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005abc:	e01c      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f002 f8a2 	bl	8007c10 <RCCEx_PLL2_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ad2:	e011      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ad8:	3328      	adds	r3, #40	; 0x28
 8005ada:	2100      	movs	r1, #0
 8005adc:	4618      	mov	r0, r3
 8005ade:	f002 f949 	bl	8007d74 <RCCEx_PLL3_Config>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ae8:	e006      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005af0:	e002      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005af2:	bf00      	nop
 8005af4:	e000      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005af8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10a      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005b00:	4b6e      	ldr	r3, [pc, #440]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b04:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b0e:	4a6b      	ldr	r2, [pc, #428]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b10:	430b      	orrs	r3, r1
 8005b12:	6513      	str	r3, [r2, #80]	; 0x50
 8005b14:	e003      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b1a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b26:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b34:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	d053      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b48:	d033      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005b4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b4e:	d82c      	bhi.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005b50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b54:	d02f      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005b56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b5a:	d826      	bhi.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005b5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b60:	d02b      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005b62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b66:	d820      	bhi.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005b68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b6c:	d012      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005b6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b72:	d81a      	bhi.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d022      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b7c:	d115      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b82:	3308      	adds	r3, #8
 8005b84:	2101      	movs	r1, #1
 8005b86:	4618      	mov	r0, r3
 8005b88:	f002 f842 	bl	8007c10 <RCCEx_PLL2_Config>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b92:	e015      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b98:	3328      	adds	r3, #40	; 0x28
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f002 f8e9 	bl	8007d74 <RCCEx_PLL3_Config>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005ba8:	e00a      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005bb0:	e006      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005bb2:	bf00      	nop
 8005bb4:	e004      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005bb6:	bf00      	nop
 8005bb8:	e002      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005bba:	bf00      	nop
 8005bbc:	e000      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10a      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005bc8:	4b3c      	ldr	r3, [pc, #240]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bcc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bd6:	4a39      	ldr	r2, [pc, #228]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005bd8:	430b      	orrs	r3, r1
 8005bda:	6513      	str	r3, [r2, #80]	; 0x50
 8005bdc:	e003      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bde:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005be2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bee:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005bf2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bfc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005c00:	460b      	mov	r3, r1
 8005c02:	4313      	orrs	r3, r2
 8005c04:	d060      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c0e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005c12:	d039      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005c14:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005c18:	d832      	bhi.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005c1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c1e:	d035      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c24:	d82c      	bhi.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c2a:	d031      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c30:	d826      	bhi.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005c32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c36:	d02d      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005c38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c3c:	d820      	bhi.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c42:	d012      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c48:	d81a      	bhi.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d024      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005c4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c52:	d115      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c58:	3308      	adds	r3, #8
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f001 ffd7 	bl	8007c10 <RCCEx_PLL2_Config>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c68:	e017      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c6e:	3328      	adds	r3, #40	; 0x28
 8005c70:	2101      	movs	r1, #1
 8005c72:	4618      	mov	r0, r3
 8005c74:	f002 f87e 	bl	8007d74 <RCCEx_PLL3_Config>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c7e:	e00c      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005c86:	e008      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005c88:	bf00      	nop
 8005c8a:	e006      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005c8c:	bf00      	nop
 8005c8e:	e004      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005c90:	bf00      	nop
 8005c92:	e002      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005c94:	bf00      	nop
 8005c96:	e000      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10e      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ca2:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cb2:	4a02      	ldr	r2, [pc, #8]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005cb4:	430b      	orrs	r3, r1
 8005cb6:	6593      	str	r3, [r2, #88]	; 0x58
 8005cb8:	e006      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005cba:	bf00      	nop
 8005cbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005cc4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005cde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	d037      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cf2:	d00e      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cf8:	d816      	bhi.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d018      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005cfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d02:	d111      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d04:	4bc4      	ldr	r3, [pc, #784]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	4ac3      	ldr	r2, [pc, #780]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d10:	e00f      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d16:	3308      	adds	r3, #8
 8005d18:	2101      	movs	r1, #1
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f001 ff78 	bl	8007c10 <RCCEx_PLL2_Config>
 8005d20:	4603      	mov	r3, r0
 8005d22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d26:	e004      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005d2e:	e000      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10a      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d3a:	4bb7      	ldr	r3, [pc, #732]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d3e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d48:	4ab3      	ldr	r2, [pc, #716]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	6513      	str	r3, [r2, #80]	; 0x50
 8005d4e:	e003      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d54:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d60:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005d64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d6e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4313      	orrs	r3, r2
 8005d76:	d039      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d81c      	bhi.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005d82:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d88:	08005dc5 	.word	0x08005dc5
 8005d8c:	08005d99 	.word	0x08005d99
 8005d90:	08005da7 	.word	0x08005da7
 8005d94:	08005dc5 	.word	0x08005dc5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d98:	4b9f      	ldr	r3, [pc, #636]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	4a9e      	ldr	r2, [pc, #632]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005da2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005da4:	e00f      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005daa:	3308      	adds	r3, #8
 8005dac:	2102      	movs	r1, #2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f001 ff2e 	bl	8007c10 <RCCEx_PLL2_Config>
 8005db4:	4603      	mov	r3, r0
 8005db6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005dba:	e004      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005dc2:	e000      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005dc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dc6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10a      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005dce:	4b92      	ldr	r3, [pc, #584]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd2:	f023 0103 	bic.w	r1, r3, #3
 8005dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ddc:	4a8e      	ldr	r2, [pc, #568]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dde:	430b      	orrs	r3, r1
 8005de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005de2:	e003      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005de8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005df8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e02:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005e06:	460b      	mov	r3, r1
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	f000 8099 	beq.w	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e0e:	4b83      	ldr	r3, [pc, #524]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a82      	ldr	r2, [pc, #520]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e1a:	f7fb fca7 	bl	800176c <HAL_GetTick>
 8005e1e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e22:	e00b      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e24:	f7fb fca2 	bl	800176c <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b64      	cmp	r3, #100	; 0x64
 8005e32:	d903      	bls.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005e3a:	e005      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e3c:	4b77      	ldr	r3, [pc, #476]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0ed      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005e48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d173      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e50:	4b71      	ldr	r3, [pc, #452]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e5c:	4053      	eors	r3, r2
 8005e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d015      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e66:	4b6c      	ldr	r3, [pc, #432]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e6e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e72:	4b69      	ldr	r3, [pc, #420]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e76:	4a68      	ldr	r2, [pc, #416]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e7c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e7e:	4b66      	ldr	r3, [pc, #408]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e82:	4a65      	ldr	r2, [pc, #404]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e88:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e8a:	4a63      	ldr	r2, [pc, #396]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e90:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e9e:	d118      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea0:	f7fb fc64 	bl	800176c <HAL_GetTick>
 8005ea4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ea8:	e00d      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eaa:	f7fb fc5f 	bl	800176c <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005eb4:	1ad2      	subs	r2, r2, r3
 8005eb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d903      	bls.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8005ec4:	e005      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ec6:	4b54      	ldr	r3, [pc, #336]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0eb      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005ed2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d129      	bne.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ede:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eea:	d10e      	bne.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005eec:	4b4a      	ldr	r3, [pc, #296]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ef8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005efc:	091a      	lsrs	r2, r3, #4
 8005efe:	4b48      	ldr	r3, [pc, #288]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	4a45      	ldr	r2, [pc, #276]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f04:	430b      	orrs	r3, r1
 8005f06:	6113      	str	r3, [r2, #16]
 8005f08:	e005      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005f0a:	4b43      	ldr	r3, [pc, #268]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	4a42      	ldr	r2, [pc, #264]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005f14:	6113      	str	r3, [r2, #16]
 8005f16:	4b40      	ldr	r3, [pc, #256]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f18:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f26:	4a3c      	ldr	r2, [pc, #240]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f28:	430b      	orrs	r3, r1
 8005f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f2c:	e008      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f32:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005f36:	e003      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f3c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	f002 0301 	and.w	r3, r2, #1
 8005f4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f50:	2300      	movs	r3, #0
 8005f52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f56:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	f000 8090 	beq.w	8006082 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f6a:	2b28      	cmp	r3, #40	; 0x28
 8005f6c:	d870      	bhi.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005f6e:	a201      	add	r2, pc, #4	; (adr r2, 8005f74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f74:	08006059 	.word	0x08006059
 8005f78:	08006051 	.word	0x08006051
 8005f7c:	08006051 	.word	0x08006051
 8005f80:	08006051 	.word	0x08006051
 8005f84:	08006051 	.word	0x08006051
 8005f88:	08006051 	.word	0x08006051
 8005f8c:	08006051 	.word	0x08006051
 8005f90:	08006051 	.word	0x08006051
 8005f94:	08006025 	.word	0x08006025
 8005f98:	08006051 	.word	0x08006051
 8005f9c:	08006051 	.word	0x08006051
 8005fa0:	08006051 	.word	0x08006051
 8005fa4:	08006051 	.word	0x08006051
 8005fa8:	08006051 	.word	0x08006051
 8005fac:	08006051 	.word	0x08006051
 8005fb0:	08006051 	.word	0x08006051
 8005fb4:	0800603b 	.word	0x0800603b
 8005fb8:	08006051 	.word	0x08006051
 8005fbc:	08006051 	.word	0x08006051
 8005fc0:	08006051 	.word	0x08006051
 8005fc4:	08006051 	.word	0x08006051
 8005fc8:	08006051 	.word	0x08006051
 8005fcc:	08006051 	.word	0x08006051
 8005fd0:	08006051 	.word	0x08006051
 8005fd4:	08006059 	.word	0x08006059
 8005fd8:	08006051 	.word	0x08006051
 8005fdc:	08006051 	.word	0x08006051
 8005fe0:	08006051 	.word	0x08006051
 8005fe4:	08006051 	.word	0x08006051
 8005fe8:	08006051 	.word	0x08006051
 8005fec:	08006051 	.word	0x08006051
 8005ff0:	08006051 	.word	0x08006051
 8005ff4:	08006059 	.word	0x08006059
 8005ff8:	08006051 	.word	0x08006051
 8005ffc:	08006051 	.word	0x08006051
 8006000:	08006051 	.word	0x08006051
 8006004:	08006051 	.word	0x08006051
 8006008:	08006051 	.word	0x08006051
 800600c:	08006051 	.word	0x08006051
 8006010:	08006051 	.word	0x08006051
 8006014:	08006059 	.word	0x08006059
 8006018:	58024400 	.word	0x58024400
 800601c:	58024800 	.word	0x58024800
 8006020:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006024:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006028:	3308      	adds	r3, #8
 800602a:	2101      	movs	r1, #1
 800602c:	4618      	mov	r0, r3
 800602e:	f001 fdef 	bl	8007c10 <RCCEx_PLL2_Config>
 8006032:	4603      	mov	r3, r0
 8006034:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006038:	e00f      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800603a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800603e:	3328      	adds	r3, #40	; 0x28
 8006040:	2101      	movs	r1, #1
 8006042:	4618      	mov	r0, r3
 8006044:	f001 fe96 	bl	8007d74 <RCCEx_PLL3_Config>
 8006048:	4603      	mov	r3, r0
 800604a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800604e:	e004      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006056:	e000      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800605a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10b      	bne.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006062:	4bc0      	ldr	r3, [pc, #768]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006066:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800606a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800606e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006072:	4abc      	ldr	r2, [pc, #752]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006074:	430b      	orrs	r3, r1
 8006076:	6553      	str	r3, [r2, #84]	; 0x54
 8006078:	e003      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800607a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800607e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608a:	f002 0302 	and.w	r3, r2, #2
 800608e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006092:	2300      	movs	r3, #0
 8006094:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006098:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800609c:	460b      	mov	r3, r1
 800609e:	4313      	orrs	r3, r2
 80060a0:	d043      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80060a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060aa:	2b05      	cmp	r3, #5
 80060ac:	d824      	bhi.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80060ae:	a201      	add	r2, pc, #4	; (adr r2, 80060b4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80060b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b4:	08006101 	.word	0x08006101
 80060b8:	080060cd 	.word	0x080060cd
 80060bc:	080060e3 	.word	0x080060e3
 80060c0:	08006101 	.word	0x08006101
 80060c4:	08006101 	.word	0x08006101
 80060c8:	08006101 	.word	0x08006101
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060d0:	3308      	adds	r3, #8
 80060d2:	2101      	movs	r1, #1
 80060d4:	4618      	mov	r0, r3
 80060d6:	f001 fd9b 	bl	8007c10 <RCCEx_PLL2_Config>
 80060da:	4603      	mov	r3, r0
 80060dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060e0:	e00f      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060e6:	3328      	adds	r3, #40	; 0x28
 80060e8:	2101      	movs	r1, #1
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 fe42 	bl	8007d74 <RCCEx_PLL3_Config>
 80060f0:	4603      	mov	r3, r0
 80060f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060f6:	e004      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80060fe:	e000      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8006100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006102:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10b      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800610a:	4b96      	ldr	r3, [pc, #600]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800610c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610e:	f023 0107 	bic.w	r1, r3, #7
 8006112:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800611a:	4a92      	ldr	r2, [pc, #584]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800611c:	430b      	orrs	r3, r1
 800611e:	6553      	str	r3, [r2, #84]	; 0x54
 8006120:	e003      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006122:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006126:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800612a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800612e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006132:	f002 0304 	and.w	r3, r2, #4
 8006136:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800613a:	2300      	movs	r3, #0
 800613c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006140:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006144:	460b      	mov	r3, r1
 8006146:	4313      	orrs	r3, r2
 8006148:	d043      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800614a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800614e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006152:	2b05      	cmp	r3, #5
 8006154:	d824      	bhi.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006156:	a201      	add	r2, pc, #4	; (adr r2, 800615c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615c:	080061a9 	.word	0x080061a9
 8006160:	08006175 	.word	0x08006175
 8006164:	0800618b 	.word	0x0800618b
 8006168:	080061a9 	.word	0x080061a9
 800616c:	080061a9 	.word	0x080061a9
 8006170:	080061a9 	.word	0x080061a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006178:	3308      	adds	r3, #8
 800617a:	2101      	movs	r1, #1
 800617c:	4618      	mov	r0, r3
 800617e:	f001 fd47 	bl	8007c10 <RCCEx_PLL2_Config>
 8006182:	4603      	mov	r3, r0
 8006184:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006188:	e00f      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800618a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800618e:	3328      	adds	r3, #40	; 0x28
 8006190:	2101      	movs	r1, #1
 8006192:	4618      	mov	r0, r3
 8006194:	f001 fdee 	bl	8007d74 <RCCEx_PLL3_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800619e:	e004      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80061a6:	e000      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80061a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10b      	bne.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061b2:	4b6c      	ldr	r3, [pc, #432]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80061b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b6:	f023 0107 	bic.w	r1, r3, #7
 80061ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061c2:	4a68      	ldr	r2, [pc, #416]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80061c4:	430b      	orrs	r3, r1
 80061c6:	6593      	str	r3, [r2, #88]	; 0x58
 80061c8:	e003      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061da:	f002 0320 	and.w	r3, r2, #32
 80061de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061e2:	2300      	movs	r3, #0
 80061e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80061ec:	460b      	mov	r3, r1
 80061ee:	4313      	orrs	r3, r2
 80061f0:	d055      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80061f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061fe:	d033      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006200:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006204:	d82c      	bhi.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620a:	d02f      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800620c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006210:	d826      	bhi.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006212:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006216:	d02b      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006218:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800621c:	d820      	bhi.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800621e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006222:	d012      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006228:	d81a      	bhi.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d022      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800622e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006232:	d115      	bne.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006234:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006238:	3308      	adds	r3, #8
 800623a:	2100      	movs	r1, #0
 800623c:	4618      	mov	r0, r3
 800623e:	f001 fce7 	bl	8007c10 <RCCEx_PLL2_Config>
 8006242:	4603      	mov	r3, r0
 8006244:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006248:	e015      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800624a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800624e:	3328      	adds	r3, #40	; 0x28
 8006250:	2102      	movs	r1, #2
 8006252:	4618      	mov	r0, r3
 8006254:	f001 fd8e 	bl	8007d74 <RCCEx_PLL3_Config>
 8006258:	4603      	mov	r3, r0
 800625a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800625e:	e00a      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006266:	e006      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006268:	bf00      	nop
 800626a:	e004      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800626c:	bf00      	nop
 800626e:	e002      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006270:	bf00      	nop
 8006272:	e000      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006276:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10b      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800627e:	4b39      	ldr	r3, [pc, #228]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006282:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800628a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800628e:	4a35      	ldr	r2, [pc, #212]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006290:	430b      	orrs	r3, r1
 8006292:	6553      	str	r3, [r2, #84]	; 0x54
 8006294:	e003      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006296:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800629a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800629e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80062aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062ae:	2300      	movs	r3, #0
 80062b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4313      	orrs	r3, r2
 80062bc:	d058      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80062be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80062ca:	d033      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80062cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80062d0:	d82c      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80062d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d6:	d02f      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80062d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062dc:	d826      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80062de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062e2:	d02b      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80062e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062e8:	d820      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80062ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ee:	d012      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80062f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062f4:	d81a      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d022      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80062fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062fe:	d115      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006304:	3308      	adds	r3, #8
 8006306:	2100      	movs	r1, #0
 8006308:	4618      	mov	r0, r3
 800630a:	f001 fc81 	bl	8007c10 <RCCEx_PLL2_Config>
 800630e:	4603      	mov	r3, r0
 8006310:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006314:	e015      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800631a:	3328      	adds	r3, #40	; 0x28
 800631c:	2102      	movs	r1, #2
 800631e:	4618      	mov	r0, r3
 8006320:	f001 fd28 	bl	8007d74 <RCCEx_PLL3_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800632a:	e00a      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006332:	e006      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006334:	bf00      	nop
 8006336:	e004      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006338:	bf00      	nop
 800633a:	e002      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800633c:	bf00      	nop
 800633e:	e000      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006342:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10e      	bne.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800634a:	4b06      	ldr	r3, [pc, #24]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800634c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006356:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800635a:	4a02      	ldr	r2, [pc, #8]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800635c:	430b      	orrs	r3, r1
 800635e:	6593      	str	r3, [r2, #88]	; 0x58
 8006360:	e006      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8006362:	bf00      	nop
 8006364:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006368:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800636c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800637c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006380:	2300      	movs	r3, #0
 8006382:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006386:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800638a:	460b      	mov	r3, r1
 800638c:	4313      	orrs	r3, r2
 800638e:	d055      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006390:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006394:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006398:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800639c:	d033      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800639e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80063a2:	d82c      	bhi.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80063a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a8:	d02f      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80063aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ae:	d826      	bhi.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80063b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80063b4:	d02b      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80063b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80063ba:	d820      	bhi.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80063bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063c0:	d012      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80063c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063c6:	d81a      	bhi.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d022      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80063cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063d0:	d115      	bne.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063d6:	3308      	adds	r3, #8
 80063d8:	2100      	movs	r1, #0
 80063da:	4618      	mov	r0, r3
 80063dc:	f001 fc18 	bl	8007c10 <RCCEx_PLL2_Config>
 80063e0:	4603      	mov	r3, r0
 80063e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063e6:	e015      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ec:	3328      	adds	r3, #40	; 0x28
 80063ee:	2102      	movs	r1, #2
 80063f0:	4618      	mov	r0, r3
 80063f2:	f001 fcbf 	bl	8007d74 <RCCEx_PLL3_Config>
 80063f6:	4603      	mov	r3, r0
 80063f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063fc:	e00a      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006404:	e006      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006406:	bf00      	nop
 8006408:	e004      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800640a:	bf00      	nop
 800640c:	e002      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800640e:	bf00      	nop
 8006410:	e000      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006414:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10b      	bne.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800641c:	4ba1      	ldr	r3, [pc, #644]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800641e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006420:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006424:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006428:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800642c:	4a9d      	ldr	r2, [pc, #628]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800642e:	430b      	orrs	r3, r1
 8006430:	6593      	str	r3, [r2, #88]	; 0x58
 8006432:	e003      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006434:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006438:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800643c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	f002 0308 	and.w	r3, r2, #8
 8006448:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800644c:	2300      	movs	r3, #0
 800644e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006452:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006456:	460b      	mov	r3, r1
 8006458:	4313      	orrs	r3, r2
 800645a:	d01e      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800645c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006468:	d10c      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800646a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800646e:	3328      	adds	r3, #40	; 0x28
 8006470:	2102      	movs	r1, #2
 8006472:	4618      	mov	r0, r3
 8006474:	f001 fc7e 	bl	8007d74 <RCCEx_PLL3_Config>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006484:	4b87      	ldr	r3, [pc, #540]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006488:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800648c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006494:	4a83      	ldr	r2, [pc, #524]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006496:	430b      	orrs	r3, r1
 8006498:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800649a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800649e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a2:	f002 0310 	and.w	r3, r2, #16
 80064a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064aa:	2300      	movs	r3, #0
 80064ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80064b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80064b4:	460b      	mov	r3, r1
 80064b6:	4313      	orrs	r3, r2
 80064b8:	d01e      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80064ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c6:	d10c      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80064c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064cc:	3328      	adds	r3, #40	; 0x28
 80064ce:	2102      	movs	r1, #2
 80064d0:	4618      	mov	r0, r3
 80064d2:	f001 fc4f 	bl	8007d74 <RCCEx_PLL3_Config>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064e2:	4b70      	ldr	r3, [pc, #448]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064f2:	4a6c      	ldr	r2, [pc, #432]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064f4:	430b      	orrs	r3, r1
 80064f6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006500:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006504:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006508:	2300      	movs	r3, #0
 800650a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800650e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006512:	460b      	mov	r3, r1
 8006514:	4313      	orrs	r3, r2
 8006516:	d03e      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006518:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800651c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006524:	d022      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800652a:	d81b      	bhi.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006534:	d00b      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006536:	e015      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800653c:	3308      	adds	r3, #8
 800653e:	2100      	movs	r1, #0
 8006540:	4618      	mov	r0, r3
 8006542:	f001 fb65 	bl	8007c10 <RCCEx_PLL2_Config>
 8006546:	4603      	mov	r3, r0
 8006548:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800654c:	e00f      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800654e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006552:	3328      	adds	r3, #40	; 0x28
 8006554:	2102      	movs	r1, #2
 8006556:	4618      	mov	r0, r3
 8006558:	f001 fc0c 	bl	8007d74 <RCCEx_PLL3_Config>
 800655c:	4603      	mov	r3, r0
 800655e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006562:	e004      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800656a:	e000      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800656c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800656e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10b      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006576:	4b4b      	ldr	r3, [pc, #300]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800657e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006582:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006586:	4a47      	ldr	r2, [pc, #284]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006588:	430b      	orrs	r3, r1
 800658a:	6593      	str	r3, [r2, #88]	; 0x58
 800658c:	e003      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006592:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80065a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80065a4:	2300      	movs	r3, #0
 80065a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80065ac:	460b      	mov	r3, r1
 80065ae:	4313      	orrs	r3, r2
 80065b0:	d03b      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80065b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065be:	d01f      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80065c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065c4:	d818      	bhi.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80065c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ca:	d003      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80065cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065d0:	d007      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80065d2:	e011      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065d4:	4b33      	ldr	r3, [pc, #204]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	4a32      	ldr	r2, [pc, #200]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80065da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80065e0:	e00f      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065e6:	3328      	adds	r3, #40	; 0x28
 80065e8:	2101      	movs	r1, #1
 80065ea:	4618      	mov	r0, r3
 80065ec:	f001 fbc2 	bl	8007d74 <RCCEx_PLL3_Config>
 80065f0:	4603      	mov	r3, r0
 80065f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80065f6:	e004      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80065fe:	e000      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006602:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10b      	bne.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800660a:	4b26      	ldr	r3, [pc, #152]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800660c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661a:	4a22      	ldr	r2, [pc, #136]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800661c:	430b      	orrs	r3, r1
 800661e:	6553      	str	r3, [r2, #84]	; 0x54
 8006620:	e003      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006622:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006626:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800662a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800662e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006632:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006636:	673b      	str	r3, [r7, #112]	; 0x70
 8006638:	2300      	movs	r3, #0
 800663a:	677b      	str	r3, [r7, #116]	; 0x74
 800663c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006640:	460b      	mov	r3, r1
 8006642:	4313      	orrs	r3, r2
 8006644:	d034      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800664a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800664c:	2b00      	cmp	r3, #0
 800664e:	d003      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006654:	d007      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006656:	e011      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006658:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800665a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665c:	4a11      	ldr	r2, [pc, #68]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800665e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006662:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006664:	e00e      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006666:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800666a:	3308      	adds	r3, #8
 800666c:	2102      	movs	r1, #2
 800666e:	4618      	mov	r0, r3
 8006670:	f001 face 	bl	8007c10 <RCCEx_PLL2_Config>
 8006674:	4603      	mov	r3, r0
 8006676:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800667a:	e003      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006682:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006684:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10d      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800668c:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800668e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006690:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669a:	4a02      	ldr	r2, [pc, #8]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800669c:	430b      	orrs	r3, r1
 800669e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066a0:	e006      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80066a2:	bf00      	nop
 80066a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80066bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80066be:	2300      	movs	r3, #0
 80066c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80066c6:	460b      	mov	r3, r1
 80066c8:	4313      	orrs	r3, r2
 80066ca:	d00c      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066d0:	3328      	adds	r3, #40	; 0x28
 80066d2:	2102      	movs	r1, #2
 80066d4:	4618      	mov	r0, r3
 80066d6:	f001 fb4d 	bl	8007d74 <RCCEx_PLL3_Config>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80066f2:	663b      	str	r3, [r7, #96]	; 0x60
 80066f4:	2300      	movs	r3, #0
 80066f6:	667b      	str	r3, [r7, #100]	; 0x64
 80066f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80066fc:	460b      	mov	r3, r1
 80066fe:	4313      	orrs	r3, r2
 8006700:	d038      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800670e:	d018      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006714:	d811      	bhi.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800671a:	d014      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800671c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006720:	d80b      	bhi.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006722:	2b00      	cmp	r3, #0
 8006724:	d011      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800672a:	d106      	bne.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800672c:	4bc3      	ldr	r3, [pc, #780]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800672e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006730:	4ac2      	ldr	r2, [pc, #776]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006736:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006738:	e008      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006740:	e004      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006742:	bf00      	nop
 8006744:	e002      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006746:	bf00      	nop
 8006748:	e000      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800674a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800674c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10b      	bne.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006754:	4bb9      	ldr	r3, [pc, #740]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006758:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800675c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006764:	4ab5      	ldr	r2, [pc, #724]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006766:	430b      	orrs	r3, r1
 8006768:	6553      	str	r3, [r2, #84]	; 0x54
 800676a:	e003      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006770:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006780:	65bb      	str	r3, [r7, #88]	; 0x58
 8006782:	2300      	movs	r3, #0
 8006784:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006786:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800678a:	460b      	mov	r3, r1
 800678c:	4313      	orrs	r3, r2
 800678e:	d009      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006790:	4baa      	ldr	r3, [pc, #680]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006794:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800679c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800679e:	4aa7      	ldr	r2, [pc, #668]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80067a0:	430b      	orrs	r3, r1
 80067a2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80067b0:	653b      	str	r3, [r7, #80]	; 0x50
 80067b2:	2300      	movs	r3, #0
 80067b4:	657b      	str	r3, [r7, #84]	; 0x54
 80067b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80067ba:	460b      	mov	r3, r1
 80067bc:	4313      	orrs	r3, r2
 80067be:	d009      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067c0:	4b9e      	ldr	r3, [pc, #632]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80067c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80067c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ce:	4a9b      	ldr	r2, [pc, #620]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80067d0:	430b      	orrs	r3, r1
 80067d2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80067d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80067e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80067e2:	2300      	movs	r3, #0
 80067e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067e6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80067ea:	460b      	mov	r3, r1
 80067ec:	4313      	orrs	r3, r2
 80067ee:	d009      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80067f0:	4b92      	ldr	r3, [pc, #584]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80067f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f4:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80067f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067fe:	4a8f      	ldr	r2, [pc, #572]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006800:	430b      	orrs	r3, r1
 8006802:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006810:	643b      	str	r3, [r7, #64]	; 0x40
 8006812:	2300      	movs	r3, #0
 8006814:	647b      	str	r3, [r7, #68]	; 0x44
 8006816:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800681a:	460b      	mov	r3, r1
 800681c:	4313      	orrs	r3, r2
 800681e:	d00e      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006820:	4b86      	ldr	r3, [pc, #536]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	4a85      	ldr	r2, [pc, #532]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006826:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800682a:	6113      	str	r3, [r2, #16]
 800682c:	4b83      	ldr	r3, [pc, #524]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800682e:	6919      	ldr	r1, [r3, #16]
 8006830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006834:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006838:	4a80      	ldr	r2, [pc, #512]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800683a:	430b      	orrs	r3, r1
 800683c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800683e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800684a:	63bb      	str	r3, [r7, #56]	; 0x38
 800684c:	2300      	movs	r3, #0
 800684e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006850:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006854:	460b      	mov	r3, r1
 8006856:	4313      	orrs	r3, r2
 8006858:	d009      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800685a:	4b78      	ldr	r3, [pc, #480]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800685c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800685e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006868:	4a74      	ldr	r2, [pc, #464]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800686a:	430b      	orrs	r3, r1
 800686c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800686e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800687a:	633b      	str	r3, [r7, #48]	; 0x30
 800687c:	2300      	movs	r3, #0
 800687e:	637b      	str	r3, [r7, #52]	; 0x34
 8006880:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006884:	460b      	mov	r3, r1
 8006886:	4313      	orrs	r3, r2
 8006888:	d00a      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800688a:	4b6c      	ldr	r3, [pc, #432]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800688c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800689a:	4a68      	ldr	r2, [pc, #416]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800689c:	430b      	orrs	r3, r1
 800689e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80068a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a8:	2100      	movs	r1, #0
 80068aa:	62b9      	str	r1, [r7, #40]	; 0x28
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068b2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80068b6:	460b      	mov	r3, r1
 80068b8:	4313      	orrs	r3, r2
 80068ba:	d011      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068c0:	3308      	adds	r3, #8
 80068c2:	2100      	movs	r1, #0
 80068c4:	4618      	mov	r0, r3
 80068c6:	f001 f9a3 	bl	8007c10 <RCCEx_PLL2_Config>
 80068ca:	4603      	mov	r3, r0
 80068cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80068d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80068e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e8:	2100      	movs	r1, #0
 80068ea:	6239      	str	r1, [r7, #32]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24
 80068f2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80068f6:	460b      	mov	r3, r1
 80068f8:	4313      	orrs	r3, r2
 80068fa:	d011      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006900:	3308      	adds	r3, #8
 8006902:	2101      	movs	r1, #1
 8006904:	4618      	mov	r0, r3
 8006906:	f001 f983 	bl	8007c10 <RCCEx_PLL2_Config>
 800690a:	4603      	mov	r3, r0
 800690c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006910:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006914:	2b00      	cmp	r3, #0
 8006916:	d003      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006918:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800691c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006928:	2100      	movs	r1, #0
 800692a:	61b9      	str	r1, [r7, #24]
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	61fb      	str	r3, [r7, #28]
 8006932:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006936:	460b      	mov	r3, r1
 8006938:	4313      	orrs	r3, r2
 800693a:	d011      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800693c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006940:	3308      	adds	r3, #8
 8006942:	2102      	movs	r1, #2
 8006944:	4618      	mov	r0, r3
 8006946:	f001 f963 	bl	8007c10 <RCCEx_PLL2_Config>
 800694a:	4603      	mov	r3, r0
 800694c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006950:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006958:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800695c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006968:	2100      	movs	r1, #0
 800696a:	6139      	str	r1, [r7, #16]
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	617b      	str	r3, [r7, #20]
 8006972:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006976:	460b      	mov	r3, r1
 8006978:	4313      	orrs	r3, r2
 800697a:	d011      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800697c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006980:	3328      	adds	r3, #40	; 0x28
 8006982:	2100      	movs	r1, #0
 8006984:	4618      	mov	r0, r3
 8006986:	f001 f9f5 	bl	8007d74 <RCCEx_PLL3_Config>
 800698a:	4603      	mov	r3, r0
 800698c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8006990:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006998:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800699c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80069a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a8:	2100      	movs	r1, #0
 80069aa:	60b9      	str	r1, [r7, #8]
 80069ac:	f003 0310 	and.w	r3, r3, #16
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80069b6:	460b      	mov	r3, r1
 80069b8:	4313      	orrs	r3, r2
 80069ba:	d011      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069c0:	3328      	adds	r3, #40	; 0x28
 80069c2:	2101      	movs	r1, #1
 80069c4:	4618      	mov	r0, r3
 80069c6:	f001 f9d5 	bl	8007d74 <RCCEx_PLL3_Config>
 80069ca:	4603      	mov	r3, r0
 80069cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80069d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80069dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80069e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e8:	2100      	movs	r1, #0
 80069ea:	6039      	str	r1, [r7, #0]
 80069ec:	f003 0320 	and.w	r3, r3, #32
 80069f0:	607b      	str	r3, [r7, #4]
 80069f2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80069f6:	460b      	mov	r3, r1
 80069f8:	4313      	orrs	r3, r2
 80069fa:	d011      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a00:	3328      	adds	r3, #40	; 0x28
 8006a02:	2102      	movs	r1, #2
 8006a04:	4618      	mov	r0, r3
 8006a06:	f001 f9b5 	bl	8007d74 <RCCEx_PLL3_Config>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006a10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8006a20:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	e000      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006a34:	46bd      	mov	sp, r7
 8006a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a3a:	bf00      	nop
 8006a3c:	58024400 	.word	0x58024400

08006a40 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b090      	sub	sp, #64	; 0x40
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006a4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a4e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006a52:	430b      	orrs	r3, r1
 8006a54:	f040 8094 	bne.w	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006a58:	4b97      	ldr	r3, [pc, #604]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a5c:	f003 0307 	and.w	r3, r3, #7
 8006a60:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	2b04      	cmp	r3, #4
 8006a66:	f200 8087 	bhi.w	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006a6a:	a201      	add	r2, pc, #4	; (adr r2, 8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a70:	08006a85 	.word	0x08006a85
 8006a74:	08006aad 	.word	0x08006aad
 8006a78:	08006ad5 	.word	0x08006ad5
 8006a7c:	08006b71 	.word	0x08006b71
 8006a80:	08006afd 	.word	0x08006afd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a84:	4b8c      	ldr	r3, [pc, #560]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a90:	d108      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 ff68 	bl	800796c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aa0:	f000 bc97 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aa8:	f000 bc93 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006aac:	4b82      	ldr	r3, [pc, #520]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ab4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ab8:	d108      	bne.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aba:	f107 0318 	add.w	r3, r7, #24
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fcac 	bl	800741c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ac8:	f000 bc83 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006acc:	2300      	movs	r3, #0
 8006ace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ad0:	f000 bc7f 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ad4:	4b78      	ldr	r3, [pc, #480]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ae0:	d108      	bne.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ae2:	f107 030c 	add.w	r3, r7, #12
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fdec 	bl	80076c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006af0:	f000 bc6f 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006af8:	f000 bc6b 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006afc:	4b6e      	ldr	r3, [pc, #440]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b04:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b06:	4b6c      	ldr	r3, [pc, #432]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0304 	and.w	r3, r3, #4
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	d10c      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d109      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b18:	4b67      	ldr	r3, [pc, #412]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	08db      	lsrs	r3, r3, #3
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	4a66      	ldr	r2, [pc, #408]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006b24:	fa22 f303 	lsr.w	r3, r2, r3
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b2a:	e01f      	b.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b2c:	4b62      	ldr	r3, [pc, #392]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b38:	d106      	bne.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b40:	d102      	bne.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b42:	4b5f      	ldr	r3, [pc, #380]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006b44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b46:	e011      	b.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b48:	4b5b      	ldr	r3, [pc, #364]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b54:	d106      	bne.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b5c:	d102      	bne.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b5e:	4b59      	ldr	r3, [pc, #356]	; (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006b60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b62:	e003      	b.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b64:	2300      	movs	r3, #0
 8006b66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006b68:	f000 bc33 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006b6c:	f000 bc31 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b70:	4b55      	ldr	r3, [pc, #340]	; (8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b74:	f000 bc2d 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b7c:	f000 bc29 	b.w	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8006b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b84:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	f040 809f 	bne.w	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8006b8e:	4b4a      	ldr	r3, [pc, #296]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b92:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006b96:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b9e:	d04d      	beq.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ba6:	f200 8084 	bhi.w	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	2bc0      	cmp	r3, #192	; 0xc0
 8006bae:	d07d      	beq.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb2:	2bc0      	cmp	r3, #192	; 0xc0
 8006bb4:	d87d      	bhi.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	2b80      	cmp	r3, #128	; 0x80
 8006bba:	d02d      	beq.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	2b80      	cmp	r3, #128	; 0x80
 8006bc0:	d877      	bhi.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	2b40      	cmp	r3, #64	; 0x40
 8006bcc:	d012      	beq.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006bce:	e070      	b.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bd0:	4b39      	ldr	r3, [pc, #228]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bdc:	d107      	bne.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fec2 	bl	800796c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bec:	e3f1      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bf2:	e3ee      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bf4:	4b30      	ldr	r3, [pc, #192]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c00:	d107      	bne.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c02:	f107 0318 	add.w	r3, r7, #24
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 fc08 	bl	800741c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c10:	e3df      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006c12:	2300      	movs	r3, #0
 8006c14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c16:	e3dc      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c18:	4b27      	ldr	r3, [pc, #156]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c24:	d107      	bne.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c26:	f107 030c 	add.w	r3, r7, #12
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 fd4a 	bl	80076c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c34:	e3cd      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c3a:	e3ca      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c3c:	4b1e      	ldr	r3, [pc, #120]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c44:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c46:	4b1c      	ldr	r3, [pc, #112]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	2b04      	cmp	r3, #4
 8006c50:	d10c      	bne.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8006c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d109      	bne.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c58:	4b17      	ldr	r3, [pc, #92]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	08db      	lsrs	r3, r3, #3
 8006c5e:	f003 0303 	and.w	r3, r3, #3
 8006c62:	4a16      	ldr	r2, [pc, #88]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006c64:	fa22 f303 	lsr.w	r3, r2, r3
 8006c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c6a:	e01e      	b.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c6c:	4b12      	ldr	r3, [pc, #72]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c78:	d106      	bne.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8006c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c80:	d102      	bne.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c82:	4b0f      	ldr	r3, [pc, #60]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c86:	e010      	b.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c88:	4b0b      	ldr	r3, [pc, #44]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c94:	d106      	bne.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c9c:	d102      	bne.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c9e:	4b09      	ldr	r3, [pc, #36]	; (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ca2:	e002      	b.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006ca8:	e393      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006caa:	e392      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006cac:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cb0:	e38f      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cb6:	e38c      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006cb8:	58024400 	.word	0x58024400
 8006cbc:	03d09000 	.word	0x03d09000
 8006cc0:	003d0900 	.word	0x003d0900
 8006cc4:	007a1200 	.word	0x007a1200
 8006cc8:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8006ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cd0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006cd4:	430b      	orrs	r3, r1
 8006cd6:	f040 809c 	bne.w	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8006cda:	4b9e      	ldr	r3, [pc, #632]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cde:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006ce2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cea:	d054      	beq.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cf2:	f200 808b 	bhi.w	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006cfc:	f000 8083 	beq.w	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8006d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d02:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d06:	f200 8081 	bhi.w	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d10:	d02f      	beq.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d18:	d878      	bhi.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d004      	beq.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d26:	d012      	beq.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8006d28:	e070      	b.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d2a:	4b8a      	ldr	r3, [pc, #552]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d36:	d107      	bne.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 fe15 	bl	800796c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d46:	e344      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d4c:	e341      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d4e:	4b81      	ldr	r3, [pc, #516]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d5a:	d107      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d5c:	f107 0318 	add.w	r3, r7, #24
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 fb5b 	bl	800741c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d6a:	e332      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d70:	e32f      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d72:	4b78      	ldr	r3, [pc, #480]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d7e:	d107      	bne.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d80:	f107 030c 	add.w	r3, r7, #12
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 fc9d 	bl	80076c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d8e:	e320      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d94:	e31d      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d96:	4b6f      	ldr	r3, [pc, #444]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d9e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006da0:	4b6c      	ldr	r3, [pc, #432]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	d10c      	bne.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8006dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d109      	bne.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006db2:	4b68      	ldr	r3, [pc, #416]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	08db      	lsrs	r3, r3, #3
 8006db8:	f003 0303 	and.w	r3, r3, #3
 8006dbc:	4a66      	ldr	r2, [pc, #408]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dc4:	e01e      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006dc6:	4b63      	ldr	r3, [pc, #396]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dd2:	d106      	bne.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dda:	d102      	bne.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ddc:	4b5f      	ldr	r3, [pc, #380]	; (8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006de0:	e010      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006de2:	4b5c      	ldr	r3, [pc, #368]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dee:	d106      	bne.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006df6:	d102      	bne.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006df8:	4b59      	ldr	r3, [pc, #356]	; (8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dfc:	e002      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8006e02:	e2e6      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006e04:	e2e5      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e06:	4b57      	ldr	r3, [pc, #348]	; (8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006e08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e0a:	e2e2      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e10:	e2df      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e16:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006e1a:	430b      	orrs	r3, r1
 8006e1c:	f040 80a7 	bne.w	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006e20:	4b4c      	ldr	r3, [pc, #304]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e24:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006e28:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e30:	d055      	beq.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8006e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e38:	f200 8096 	bhi.w	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e42:	f000 8084 	beq.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e4c:	f200 808c 	bhi.w	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e56:	d030      	beq.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8006e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e5e:	f200 8083 	bhi.w	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d004      	beq.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8006e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e6e:	d012      	beq.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8006e70:	e07a      	b.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e72:	4b38      	ldr	r3, [pc, #224]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e7e:	d107      	bne.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 fd71 	bl	800796c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e8e:	e2a0      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e94:	e29d      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e96:	4b2f      	ldr	r3, [pc, #188]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ea2:	d107      	bne.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ea4:	f107 0318 	add.w	r3, r7, #24
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fab7 	bl	800741c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eb2:	e28e      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eb8:	e28b      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006eba:	4b26      	ldr	r3, [pc, #152]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ec6:	d107      	bne.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ec8:	f107 030c 	add.w	r3, r7, #12
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fbf9 	bl	80076c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ed6:	e27c      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006edc:	e279      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ede:	4b1d      	ldr	r3, [pc, #116]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ee6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ee8:	4b1a      	ldr	r3, [pc, #104]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0304 	and.w	r3, r3, #4
 8006ef0:	2b04      	cmp	r3, #4
 8006ef2:	d10c      	bne.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8006ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d109      	bne.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006efa:	4b16      	ldr	r3, [pc, #88]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	08db      	lsrs	r3, r3, #3
 8006f00:	f003 0303 	and.w	r3, r3, #3
 8006f04:	4a14      	ldr	r2, [pc, #80]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006f06:	fa22 f303 	lsr.w	r3, r2, r3
 8006f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f0c:	e01e      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f0e:	4b11      	ldr	r3, [pc, #68]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f1a:	d106      	bne.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f22:	d102      	bne.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f24:	4b0d      	ldr	r3, [pc, #52]	; (8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f28:	e010      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f2a:	4b0a      	ldr	r3, [pc, #40]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f36:	d106      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f3e:	d102      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f40:	4b07      	ldr	r3, [pc, #28]	; (8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f44:	e002      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006f4a:	e242      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006f4c:	e241      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f4e:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006f50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f52:	e23e      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006f54:	58024400 	.word	0x58024400
 8006f58:	03d09000 	.word	0x03d09000
 8006f5c:	003d0900 	.word	0x003d0900
 8006f60:	007a1200 	.word	0x007a1200
 8006f64:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f6c:	e231      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f72:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006f76:	430b      	orrs	r3, r1
 8006f78:	f040 8085 	bne.w	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006f7c:	4b9c      	ldr	r3, [pc, #624]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f80:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006f84:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f8c:	d06b      	beq.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f94:	d874      	bhi.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f9c:	d056      	beq.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fa4:	d86c      	bhi.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fac:	d03b      	beq.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8006fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fb4:	d864      	bhi.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fbc:	d021      	beq.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fc4:	d85c      	bhi.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d004      	beq.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd2:	d004      	beq.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8006fd4:	e054      	b.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006fd6:	f7fe fb49 	bl	800566c <HAL_RCC_GetPCLK1Freq>
 8006fda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006fdc:	e1f9      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fde:	4b84      	ldr	r3, [pc, #528]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fea:	d107      	bne.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fec:	f107 0318 	add.w	r3, r7, #24
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 fa13 	bl	800741c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ffa:	e1ea      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007000:	e1e7      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007002:	4b7b      	ldr	r3, [pc, #492]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800700a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800700e:	d107      	bne.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007010:	f107 030c 	add.w	r3, r7, #12
 8007014:	4618      	mov	r0, r3
 8007016:	f000 fb55 	bl	80076c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800701e:	e1d8      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007020:	2300      	movs	r3, #0
 8007022:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007024:	e1d5      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007026:	4b72      	ldr	r3, [pc, #456]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0304 	and.w	r3, r3, #4
 800702e:	2b04      	cmp	r3, #4
 8007030:	d109      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007032:	4b6f      	ldr	r3, [pc, #444]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	08db      	lsrs	r3, r3, #3
 8007038:	f003 0303 	and.w	r3, r3, #3
 800703c:	4a6d      	ldr	r2, [pc, #436]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800703e:	fa22 f303 	lsr.w	r3, r2, r3
 8007042:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007044:	e1c5      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800704a:	e1c2      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800704c:	4b68      	ldr	r3, [pc, #416]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007058:	d102      	bne.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800705a:	4b67      	ldr	r3, [pc, #412]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800705c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800705e:	e1b8      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007060:	2300      	movs	r3, #0
 8007062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007064:	e1b5      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007066:	4b62      	ldr	r3, [pc, #392]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800706e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007072:	d102      	bne.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8007074:	4b61      	ldr	r3, [pc, #388]	; (80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8007076:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007078:	e1ab      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800707a:	2300      	movs	r3, #0
 800707c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800707e:	e1a8      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007080:	2300      	movs	r3, #0
 8007082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007084:	e1a5      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800708a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800708e:	430b      	orrs	r3, r1
 8007090:	d173      	bne.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007092:	4b57      	ldr	r3, [pc, #348]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007096:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800709a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800709c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070a2:	d02f      	beq.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 80070a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070aa:	d863      	bhi.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d004      	beq.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80070b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b8:	d012      	beq.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80070ba:	e05b      	b.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070bc:	4b4c      	ldr	r3, [pc, #304]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070c8:	d107      	bne.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070ca:	f107 0318 	add.w	r3, r7, #24
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 f9a4 	bl	800741c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070d8:	e17b      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80070da:	2300      	movs	r3, #0
 80070dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070de:	e178      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070e0:	4b43      	ldr	r3, [pc, #268]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ec:	d107      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070ee:	f107 030c 	add.w	r3, r7, #12
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 fae6 	bl	80076c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070fc:	e169      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007102:	e166      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007104:	4b3a      	ldr	r3, [pc, #232]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007108:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800710c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800710e:	4b38      	ldr	r3, [pc, #224]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0304 	and.w	r3, r3, #4
 8007116:	2b04      	cmp	r3, #4
 8007118:	d10c      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800711a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800711c:	2b00      	cmp	r3, #0
 800711e:	d109      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007120:	4b33      	ldr	r3, [pc, #204]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	08db      	lsrs	r3, r3, #3
 8007126:	f003 0303 	and.w	r3, r3, #3
 800712a:	4a32      	ldr	r2, [pc, #200]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800712c:	fa22 f303 	lsr.w	r3, r2, r3
 8007130:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007132:	e01e      	b.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007134:	4b2e      	ldr	r3, [pc, #184]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007140:	d106      	bne.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8007142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007144:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007148:	d102      	bne.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800714a:	4b2b      	ldr	r3, [pc, #172]	; (80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800714c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800714e:	e010      	b.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007150:	4b27      	ldr	r3, [pc, #156]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800715c:	d106      	bne.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800715e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007164:	d102      	bne.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007166:	4b25      	ldr	r3, [pc, #148]	; (80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8007168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800716a:	e002      	b.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800716c:	2300      	movs	r3, #0
 800716e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007170:	e12f      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007172:	e12e      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007178:	e12b      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800717a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800717e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007182:	430b      	orrs	r3, r1
 8007184:	d13c      	bne.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007186:	4b1a      	ldr	r3, [pc, #104]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800718e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007192:	2b00      	cmp	r3, #0
 8007194:	d004      	beq.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8007196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800719c:	d012      	beq.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800719e:	e023      	b.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071a0:	4b13      	ldr	r3, [pc, #76]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071ac:	d107      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 fbda 	bl	800796c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071bc:	e109      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80071be:	2300      	movs	r3, #0
 80071c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071c2:	e106      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071c4:	4b0a      	ldr	r3, [pc, #40]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071d0:	d107      	bne.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071d2:	f107 0318 	add.w	r3, r7, #24
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 f920 	bl	800741c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071e0:	e0f7      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80071e2:	2300      	movs	r3, #0
 80071e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071e6:	e0f4      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ec:	e0f1      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80071ee:	bf00      	nop
 80071f0:	58024400 	.word	0x58024400
 80071f4:	03d09000 	.word	0x03d09000
 80071f8:	003d0900 	.word	0x003d0900
 80071fc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007200:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007204:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007208:	430b      	orrs	r3, r1
 800720a:	f040 8091 	bne.w	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800720e:	4b73      	ldr	r3, [pc, #460]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007212:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007216:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800721e:	f000 8081 	beq.w	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007224:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007228:	d87f      	bhi.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800722a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007230:	d06b      	beq.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8007232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007238:	d877      	bhi.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800723a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007240:	d056      	beq.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8007242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007248:	d86f      	bhi.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800724a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007250:	d03b      	beq.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8007252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007254:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007258:	d867      	bhi.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800725a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007260:	d021      	beq.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8007262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007268:	d85f      	bhi.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800726a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726c:	2b00      	cmp	r3, #0
 800726e:	d004      	beq.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007276:	d004      	beq.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8007278:	e057      	b.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800727a:	f000 f8b9 	bl	80073f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800727e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007280:	e0a7      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007282:	4b56      	ldr	r3, [pc, #344]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800728a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800728e:	d107      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007290:	f107 0318 	add.w	r3, r7, #24
 8007294:	4618      	mov	r0, r3
 8007296:	f000 f8c1 	bl	800741c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800729e:	e098      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80072a0:	2300      	movs	r3, #0
 80072a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072a4:	e095      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072a6:	4b4d      	ldr	r3, [pc, #308]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072b2:	d107      	bne.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072b4:	f107 030c 	add.w	r3, r7, #12
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 fa03 	bl	80076c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072c2:	e086      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80072c4:	2300      	movs	r3, #0
 80072c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072c8:	e083      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072ca:	4b44      	ldr	r3, [pc, #272]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0304 	and.w	r3, r3, #4
 80072d2:	2b04      	cmp	r3, #4
 80072d4:	d109      	bne.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072d6:	4b41      	ldr	r3, [pc, #260]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	08db      	lsrs	r3, r3, #3
 80072dc:	f003 0303 	and.w	r3, r3, #3
 80072e0:	4a3f      	ldr	r2, [pc, #252]	; (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80072e2:	fa22 f303 	lsr.w	r3, r2, r3
 80072e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072e8:	e073      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80072ea:	2300      	movs	r3, #0
 80072ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072ee:	e070      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80072f0:	4b3a      	ldr	r3, [pc, #232]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072fc:	d102      	bne.n	8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80072fe:	4b39      	ldr	r3, [pc, #228]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8007300:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007302:	e066      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007304:	2300      	movs	r3, #0
 8007306:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007308:	e063      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800730a:	4b34      	ldr	r3, [pc, #208]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007312:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007316:	d102      	bne.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8007318:	4b33      	ldr	r3, [pc, #204]	; (80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800731a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800731c:	e059      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800731e:	2300      	movs	r3, #0
 8007320:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007322:	e056      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007324:	4b31      	ldr	r3, [pc, #196]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8007326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007328:	e053      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800732a:	2300      	movs	r3, #0
 800732c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800732e:	e050      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007334:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007338:	430b      	orrs	r3, r1
 800733a:	d148      	bne.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800733c:	4b27      	ldr	r3, [pc, #156]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800733e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007340:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007344:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800734c:	d02a      	beq.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007350:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007354:	d838      	bhi.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007358:	2b00      	cmp	r3, #0
 800735a:	d004      	beq.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800735c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007362:	d00d      	beq.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8007364:	e030      	b.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007366:	4b1d      	ldr	r3, [pc, #116]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800736e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007372:	d102      	bne.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8007374:	4b1c      	ldr	r3, [pc, #112]	; (80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007378:	e02b      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800737a:	2300      	movs	r3, #0
 800737c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800737e:	e028      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007380:	4b16      	ldr	r3, [pc, #88]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007388:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800738c:	d107      	bne.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800738e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007392:	4618      	mov	r0, r3
 8007394:	f000 faea 	bl	800796c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800739c:	e019      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073a2:	e016      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073a4:	4b0d      	ldr	r3, [pc, #52]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073b0:	d107      	bne.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073b2:	f107 0318 	add.w	r3, r7, #24
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 f830 	bl	800741c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073c0:	e007      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073c6:	e004      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073cc:	e001      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80073d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3740      	adds	r7, #64	; 0x40
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	58024400 	.word	0x58024400
 80073e0:	03d09000 	.word	0x03d09000
 80073e4:	003d0900 	.word	0x003d0900
 80073e8:	007a1200 	.word	0x007a1200
 80073ec:	00bb8000 	.word	0x00bb8000

080073f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80073f4:	f7fe f90a 	bl	800560c <HAL_RCC_GetHCLKFreq>
 80073f8:	4602      	mov	r2, r0
 80073fa:	4b06      	ldr	r3, [pc, #24]	; (8007414 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	091b      	lsrs	r3, r3, #4
 8007400:	f003 0307 	and.w	r3, r3, #7
 8007404:	4904      	ldr	r1, [pc, #16]	; (8007418 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007406:	5ccb      	ldrb	r3, [r1, r3]
 8007408:	f003 031f 	and.w	r3, r3, #31
 800740c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007410:	4618      	mov	r0, r3
 8007412:	bd80      	pop	{r7, pc}
 8007414:	58024400 	.word	0x58024400
 8007418:	0800abc4 	.word	0x0800abc4

0800741c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800741c:	b480      	push	{r7}
 800741e:	b089      	sub	sp, #36	; 0x24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007424:	4ba1      	ldr	r3, [pc, #644]	; (80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007428:	f003 0303 	and.w	r3, r3, #3
 800742c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800742e:	4b9f      	ldr	r3, [pc, #636]	; (80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007432:	0b1b      	lsrs	r3, r3, #12
 8007434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007438:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800743a:	4b9c      	ldr	r3, [pc, #624]	; (80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800743c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743e:	091b      	lsrs	r3, r3, #4
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007446:	4b99      	ldr	r3, [pc, #612]	; (80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744a:	08db      	lsrs	r3, r3, #3
 800744c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	fb02 f303 	mul.w	r3, r2, r3
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 8111 	beq.w	800768c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	2b02      	cmp	r3, #2
 800746e:	f000 8083 	beq.w	8007578 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	2b02      	cmp	r3, #2
 8007476:	f200 80a1 	bhi.w	80075bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d003      	beq.n	8007488 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d056      	beq.n	8007534 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007486:	e099      	b.n	80075bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007488:	4b88      	ldr	r3, [pc, #544]	; (80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0320 	and.w	r3, r3, #32
 8007490:	2b00      	cmp	r3, #0
 8007492:	d02d      	beq.n	80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007494:	4b85      	ldr	r3, [pc, #532]	; (80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	08db      	lsrs	r3, r3, #3
 800749a:	f003 0303 	and.w	r3, r3, #3
 800749e:	4a84      	ldr	r2, [pc, #528]	; (80076b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80074a0:	fa22 f303 	lsr.w	r3, r2, r3
 80074a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	ee07 3a90 	vmov	s15, r3
 80074ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	ee07 3a90 	vmov	s15, r3
 80074b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074be:	4b7b      	ldr	r3, [pc, #492]	; (80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c6:	ee07 3a90 	vmov	s15, r3
 80074ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80074d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80074ee:	e087      	b.n	8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	ee07 3a90 	vmov	s15, r3
 80074f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80076b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80074fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007502:	4b6a      	ldr	r3, [pc, #424]	; (80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007512:	ed97 6a03 	vldr	s12, [r7, #12]
 8007516:	eddf 5a67 	vldr	s11, [pc, #412]	; 80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800751a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800751e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800752a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800752e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007532:	e065      	b.n	8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	ee07 3a90 	vmov	s15, r3
 800753a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80076bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007546:	4b59      	ldr	r3, [pc, #356]	; (80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800754e:	ee07 3a90 	vmov	s15, r3
 8007552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007556:	ed97 6a03 	vldr	s12, [r7, #12]
 800755a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800755e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800756a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800756e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007576:	e043      	b.n	8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	ee07 3a90 	vmov	s15, r3
 800757e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007582:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80076c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800758a:	4b48      	ldr	r3, [pc, #288]	; (80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800758c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007592:	ee07 3a90 	vmov	s15, r3
 8007596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800759a:	ed97 6a03 	vldr	s12, [r7, #12]
 800759e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ba:	e021      	b.n	8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	ee07 3a90 	vmov	s15, r3
 80075c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80076bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80075ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ce:	4b37      	ldr	r3, [pc, #220]	; (80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d6:	ee07 3a90 	vmov	s15, r3
 80075da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075de:	ed97 6a03 	vldr	s12, [r7, #12]
 80075e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007600:	4b2a      	ldr	r3, [pc, #168]	; (80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007604:	0a5b      	lsrs	r3, r3, #9
 8007606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007612:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007616:	ee37 7a87 	vadd.f32	s14, s15, s14
 800761a:	edd7 6a07 	vldr	s13, [r7, #28]
 800761e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007626:	ee17 2a90 	vmov	r2, s15
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800762e:	4b1f      	ldr	r3, [pc, #124]	; (80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007632:	0c1b      	lsrs	r3, r3, #16
 8007634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007638:	ee07 3a90 	vmov	s15, r3
 800763c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007640:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007644:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007648:	edd7 6a07 	vldr	s13, [r7, #28]
 800764c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007654:	ee17 2a90 	vmov	r2, s15
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800765c:	4b13      	ldr	r3, [pc, #76]	; (80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800765e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007660:	0e1b      	lsrs	r3, r3, #24
 8007662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007666:	ee07 3a90 	vmov	s15, r3
 800766a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007672:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007676:	edd7 6a07 	vldr	s13, [r7, #28]
 800767a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800767e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007682:	ee17 2a90 	vmov	r2, s15
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800768a:	e008      	b.n	800769e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	609a      	str	r2, [r3, #8]
}
 800769e:	bf00      	nop
 80076a0:	3724      	adds	r7, #36	; 0x24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	58024400 	.word	0x58024400
 80076b0:	03d09000 	.word	0x03d09000
 80076b4:	46000000 	.word	0x46000000
 80076b8:	4c742400 	.word	0x4c742400
 80076bc:	4a742400 	.word	0x4a742400
 80076c0:	4af42400 	.word	0x4af42400

080076c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b089      	sub	sp, #36	; 0x24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076cc:	4ba1      	ldr	r3, [pc, #644]	; (8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d0:	f003 0303 	and.w	r3, r3, #3
 80076d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80076d6:	4b9f      	ldr	r3, [pc, #636]	; (8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076da:	0d1b      	lsrs	r3, r3, #20
 80076dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80076e2:	4b9c      	ldr	r3, [pc, #624]	; (8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e6:	0a1b      	lsrs	r3, r3, #8
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80076ee:	4b99      	ldr	r3, [pc, #612]	; (8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f2:	08db      	lsrs	r3, r3, #3
 80076f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	fb02 f303 	mul.w	r3, r2, r3
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007706:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 8111 	beq.w	8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	2b02      	cmp	r3, #2
 8007716:	f000 8083 	beq.w	8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	2b02      	cmp	r3, #2
 800771e:	f200 80a1 	bhi.w	8007864 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d003      	beq.n	8007730 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d056      	beq.n	80077dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800772e:	e099      	b.n	8007864 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007730:	4b88      	ldr	r3, [pc, #544]	; (8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0320 	and.w	r3, r3, #32
 8007738:	2b00      	cmp	r3, #0
 800773a:	d02d      	beq.n	8007798 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800773c:	4b85      	ldr	r3, [pc, #532]	; (8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	08db      	lsrs	r3, r3, #3
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	4a84      	ldr	r2, [pc, #528]	; (8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007748:	fa22 f303 	lsr.w	r3, r2, r3
 800774c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	ee07 3a90 	vmov	s15, r3
 8007754:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	ee07 3a90 	vmov	s15, r3
 800775e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007766:	4b7b      	ldr	r3, [pc, #492]	; (8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800776e:	ee07 3a90 	vmov	s15, r3
 8007772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007776:	ed97 6a03 	vldr	s12, [r7, #12]
 800777a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800795c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800777e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800778a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800778e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007792:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007796:	e087      	b.n	80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	ee07 3a90 	vmov	s15, r3
 800779e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007960 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80077a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077aa:	4b6a      	ldr	r3, [pc, #424]	; (8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077b2:	ee07 3a90 	vmov	s15, r3
 80077b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80077be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800795c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077da:	e065      	b.n	80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	ee07 3a90 	vmov	s15, r3
 80077e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007964 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ee:	4b59      	ldr	r3, [pc, #356]	; (8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077f6:	ee07 3a90 	vmov	s15, r3
 80077fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007802:	eddf 5a56 	vldr	s11, [pc, #344]	; 800795c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800780a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800780e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800781a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800781e:	e043      	b.n	80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	ee07 3a90 	vmov	s15, r3
 8007826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800782a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007968 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800782e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007832:	4b48      	ldr	r3, [pc, #288]	; (8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800783a:	ee07 3a90 	vmov	s15, r3
 800783e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007842:	ed97 6a03 	vldr	s12, [r7, #12]
 8007846:	eddf 5a45 	vldr	s11, [pc, #276]	; 800795c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800784a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800784e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800785a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800785e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007862:	e021      	b.n	80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	ee07 3a90 	vmov	s15, r3
 800786a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800786e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007964 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007876:	4b37      	ldr	r3, [pc, #220]	; (8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800787e:	ee07 3a90 	vmov	s15, r3
 8007882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007886:	ed97 6a03 	vldr	s12, [r7, #12]
 800788a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800795c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800788e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800789a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800789e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80078a8:	4b2a      	ldr	r3, [pc, #168]	; (8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ac:	0a5b      	lsrs	r3, r3, #9
 80078ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b2:	ee07 3a90 	vmov	s15, r3
 80078b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80078c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ce:	ee17 2a90 	vmov	r2, s15
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80078d6:	4b1f      	ldr	r3, [pc, #124]	; (8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078da:	0c1b      	lsrs	r3, r3, #16
 80078dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078e0:	ee07 3a90 	vmov	s15, r3
 80078e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80078f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078fc:	ee17 2a90 	vmov	r2, s15
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007904:	4b13      	ldr	r3, [pc, #76]	; (8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007908:	0e1b      	lsrs	r3, r3, #24
 800790a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800790e:	ee07 3a90 	vmov	s15, r3
 8007912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800791a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800791e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800792a:	ee17 2a90 	vmov	r2, s15
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007932:	e008      	b.n	8007946 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	609a      	str	r2, [r3, #8]
}
 8007946:	bf00      	nop
 8007948:	3724      	adds	r7, #36	; 0x24
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	58024400 	.word	0x58024400
 8007958:	03d09000 	.word	0x03d09000
 800795c:	46000000 	.word	0x46000000
 8007960:	4c742400 	.word	0x4c742400
 8007964:	4a742400 	.word	0x4a742400
 8007968:	4af42400 	.word	0x4af42400

0800796c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800796c:	b480      	push	{r7}
 800796e:	b089      	sub	sp, #36	; 0x24
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007974:	4ba0      	ldr	r3, [pc, #640]	; (8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007978:	f003 0303 	and.w	r3, r3, #3
 800797c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800797e:	4b9e      	ldr	r3, [pc, #632]	; (8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007982:	091b      	lsrs	r3, r3, #4
 8007984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007988:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800798a:	4b9b      	ldr	r3, [pc, #620]	; (8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800798c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007994:	4b98      	ldr	r3, [pc, #608]	; (8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007998:	08db      	lsrs	r3, r3, #3
 800799a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	fb02 f303 	mul.w	r3, r2, r3
 80079a4:	ee07 3a90 	vmov	s15, r3
 80079a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 8111 	beq.w	8007bda <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	f000 8083 	beq.w	8007ac6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	f200 80a1 	bhi.w	8007b0a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d056      	beq.n	8007a82 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80079d4:	e099      	b.n	8007b0a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079d6:	4b88      	ldr	r3, [pc, #544]	; (8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0320 	and.w	r3, r3, #32
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d02d      	beq.n	8007a3e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079e2:	4b85      	ldr	r3, [pc, #532]	; (8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	08db      	lsrs	r3, r3, #3
 80079e8:	f003 0303 	and.w	r3, r3, #3
 80079ec:	4a83      	ldr	r2, [pc, #524]	; (8007bfc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80079ee:	fa22 f303 	lsr.w	r3, r2, r3
 80079f2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	ee07 3a90 	vmov	s15, r3
 80079fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	ee07 3a90 	vmov	s15, r3
 8007a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a0c:	4b7a      	ldr	r3, [pc, #488]	; (8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a14:	ee07 3a90 	vmov	s15, r3
 8007a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a20:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007c00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a38:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a3c:	e087      	b.n	8007b4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	ee07 3a90 	vmov	s15, r3
 8007a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a48:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007c04 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a50:	4b69      	ldr	r3, [pc, #420]	; (8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a58:	ee07 3a90 	vmov	s15, r3
 8007a5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a60:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a64:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007c00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a80:	e065      	b.n	8007b4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	ee07 3a90 	vmov	s15, r3
 8007a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007c08 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007a90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a94:	4b58      	ldr	r3, [pc, #352]	; (8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a9c:	ee07 3a90 	vmov	s15, r3
 8007aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aa4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aa8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007c00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007aac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ab0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ab4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ab8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ac0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ac4:	e043      	b.n	8007b4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	ee07 3a90 	vmov	s15, r3
 8007acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007c0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007ad4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ad8:	4b47      	ldr	r3, [pc, #284]	; (8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae0:	ee07 3a90 	vmov	s15, r3
 8007ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aec:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007c00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007af0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007af4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007af8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007afc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b08:	e021      	b.n	8007b4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	ee07 3a90 	vmov	s15, r3
 8007b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b14:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007c04 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007b18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b1c:	4b36      	ldr	r3, [pc, #216]	; (8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b24:	ee07 3a90 	vmov	s15, r3
 8007b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b30:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007c00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b4c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007b4e:	4b2a      	ldr	r3, [pc, #168]	; (8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b52:	0a5b      	lsrs	r3, r3, #9
 8007b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b58:	ee07 3a90 	vmov	s15, r3
 8007b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b68:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b74:	ee17 2a90 	vmov	r2, s15
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007b7c:	4b1e      	ldr	r3, [pc, #120]	; (8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b80:	0c1b      	lsrs	r3, r3, #16
 8007b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b86:	ee07 3a90 	vmov	s15, r3
 8007b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b96:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ba2:	ee17 2a90 	vmov	r2, s15
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007baa:	4b13      	ldr	r3, [pc, #76]	; (8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bae:	0e1b      	lsrs	r3, r3, #24
 8007bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bb4:	ee07 3a90 	vmov	s15, r3
 8007bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bd0:	ee17 2a90 	vmov	r2, s15
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007bd8:	e008      	b.n	8007bec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	609a      	str	r2, [r3, #8]
}
 8007bec:	bf00      	nop
 8007bee:	3724      	adds	r7, #36	; 0x24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	58024400 	.word	0x58024400
 8007bfc:	03d09000 	.word	0x03d09000
 8007c00:	46000000 	.word	0x46000000
 8007c04:	4c742400 	.word	0x4c742400
 8007c08:	4a742400 	.word	0x4a742400
 8007c0c:	4af42400 	.word	0x4af42400

08007c10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c1e:	4b53      	ldr	r3, [pc, #332]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d101      	bne.n	8007c2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e099      	b.n	8007d62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c2e:	4b4f      	ldr	r3, [pc, #316]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a4e      	ldr	r2, [pc, #312]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007c34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c3a:	f7f9 fd97 	bl	800176c <HAL_GetTick>
 8007c3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c40:	e008      	b.n	8007c54 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c42:	f7f9 fd93 	bl	800176c <HAL_GetTick>
 8007c46:	4602      	mov	r2, r0
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d901      	bls.n	8007c54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e086      	b.n	8007d62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c54:	4b45      	ldr	r3, [pc, #276]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1f0      	bne.n	8007c42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c60:	4b42      	ldr	r3, [pc, #264]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	031b      	lsls	r3, r3, #12
 8007c6e:	493f      	ldr	r1, [pc, #252]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	628b      	str	r3, [r1, #40]	; 0x28
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	025b      	lsls	r3, r3, #9
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	041b      	lsls	r3, r3, #16
 8007c92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c96:	431a      	orrs	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	061b      	lsls	r3, r3, #24
 8007ca0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ca4:	4931      	ldr	r1, [pc, #196]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007caa:	4b30      	ldr	r3, [pc, #192]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	492d      	ldr	r1, [pc, #180]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007cbc:	4b2b      	ldr	r3, [pc, #172]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	f023 0220 	bic.w	r2, r3, #32
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	4928      	ldr	r1, [pc, #160]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007cce:	4b27      	ldr	r3, [pc, #156]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd2:	4a26      	ldr	r2, [pc, #152]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007cd4:	f023 0310 	bic.w	r3, r3, #16
 8007cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007cda:	4b24      	ldr	r3, [pc, #144]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007cdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cde:	4b24      	ldr	r3, [pc, #144]	; (8007d70 <RCCEx_PLL2_Config+0x160>)
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	69d2      	ldr	r2, [r2, #28]
 8007ce6:	00d2      	lsls	r2, r2, #3
 8007ce8:	4920      	ldr	r1, [pc, #128]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007cee:	4b1f      	ldr	r3, [pc, #124]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf2:	4a1e      	ldr	r2, [pc, #120]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007cf4:	f043 0310 	orr.w	r3, r3, #16
 8007cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d106      	bne.n	8007d0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007d00:	4b1a      	ldr	r3, [pc, #104]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d04:	4a19      	ldr	r2, [pc, #100]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007d06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d0c:	e00f      	b.n	8007d2e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d106      	bne.n	8007d22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007d14:	4b15      	ldr	r3, [pc, #84]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d18:	4a14      	ldr	r2, [pc, #80]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d20:	e005      	b.n	8007d2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007d22:	4b12      	ldr	r3, [pc, #72]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d26:	4a11      	ldr	r2, [pc, #68]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007d28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d2e:	4b0f      	ldr	r3, [pc, #60]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a0e      	ldr	r2, [pc, #56]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007d34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d3a:	f7f9 fd17 	bl	800176c <HAL_GetTick>
 8007d3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d40:	e008      	b.n	8007d54 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d42:	f7f9 fd13 	bl	800176c <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d901      	bls.n	8007d54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e006      	b.n	8007d62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d54:	4b05      	ldr	r3, [pc, #20]	; (8007d6c <RCCEx_PLL2_Config+0x15c>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d0f0      	beq.n	8007d42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	58024400 	.word	0x58024400
 8007d70:	ffff0007 	.word	0xffff0007

08007d74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d82:	4b53      	ldr	r3, [pc, #332]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d86:	f003 0303 	and.w	r3, r3, #3
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d101      	bne.n	8007d92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e099      	b.n	8007ec6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d92:	4b4f      	ldr	r3, [pc, #316]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a4e      	ldr	r2, [pc, #312]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d9e:	f7f9 fce5 	bl	800176c <HAL_GetTick>
 8007da2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007da4:	e008      	b.n	8007db8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007da6:	f7f9 fce1 	bl	800176c <HAL_GetTick>
 8007daa:	4602      	mov	r2, r0
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d901      	bls.n	8007db8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e086      	b.n	8007ec6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007db8:	4b45      	ldr	r3, [pc, #276]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1f0      	bne.n	8007da6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007dc4:	4b42      	ldr	r3, [pc, #264]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	051b      	lsls	r3, r3, #20
 8007dd2:	493f      	ldr	r1, [pc, #252]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	628b      	str	r3, [r1, #40]	; 0x28
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	025b      	lsls	r3, r3, #9
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	431a      	orrs	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	3b01      	subs	r3, #1
 8007df4:	041b      	lsls	r3, r3, #16
 8007df6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	3b01      	subs	r3, #1
 8007e02:	061b      	lsls	r3, r3, #24
 8007e04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e08:	4931      	ldr	r1, [pc, #196]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007e0e:	4b30      	ldr	r3, [pc, #192]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	492d      	ldr	r1, [pc, #180]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007e20:	4b2b      	ldr	r3, [pc, #172]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	4928      	ldr	r1, [pc, #160]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e32:	4b27      	ldr	r3, [pc, #156]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e36:	4a26      	ldr	r2, [pc, #152]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e3e:	4b24      	ldr	r3, [pc, #144]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e42:	4b24      	ldr	r3, [pc, #144]	; (8007ed4 <RCCEx_PLL3_Config+0x160>)
 8007e44:	4013      	ands	r3, r2
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	69d2      	ldr	r2, [r2, #28]
 8007e4a:	00d2      	lsls	r2, r2, #3
 8007e4c:	4920      	ldr	r1, [pc, #128]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007e52:	4b1f      	ldr	r3, [pc, #124]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e56:	4a1e      	ldr	r2, [pc, #120]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d106      	bne.n	8007e72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e64:	4b1a      	ldr	r3, [pc, #104]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	4a19      	ldr	r2, [pc, #100]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e70:	e00f      	b.n	8007e92 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d106      	bne.n	8007e86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007e78:	4b15      	ldr	r3, [pc, #84]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7c:	4a14      	ldr	r2, [pc, #80]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e84:	e005      	b.n	8007e92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007e86:	4b12      	ldr	r3, [pc, #72]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8a:	4a11      	ldr	r2, [pc, #68]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e92:	4b0f      	ldr	r3, [pc, #60]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a0e      	ldr	r2, [pc, #56]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e9e:	f7f9 fc65 	bl	800176c <HAL_GetTick>
 8007ea2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ea4:	e008      	b.n	8007eb8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ea6:	f7f9 fc61 	bl	800176c <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d901      	bls.n	8007eb8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e006      	b.n	8007ec6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007eb8:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <RCCEx_PLL3_Config+0x15c>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0f0      	beq.n	8007ea6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	58024400 	.word	0x58024400
 8007ed4:	ffff0007 	.word	0xffff0007

08007ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e049      	b.n	8007f7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d106      	bne.n	8007f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7f9 fa38 	bl	8001374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2202      	movs	r2, #2
 8007f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	3304      	adds	r3, #4
 8007f14:	4619      	mov	r1, r3
 8007f16:	4610      	mov	r0, r2
 8007f18:	f000 fe78 	bl	8008c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d001      	beq.n	8007fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e054      	b.n	800804a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68da      	ldr	r2, [r3, #12]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f042 0201 	orr.w	r2, r2, #1
 8007fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a26      	ldr	r2, [pc, #152]	; (8008058 <HAL_TIM_Base_Start_IT+0xd0>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d022      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x80>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fca:	d01d      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x80>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a22      	ldr	r2, [pc, #136]	; (800805c <HAL_TIM_Base_Start_IT+0xd4>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d018      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x80>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a21      	ldr	r2, [pc, #132]	; (8008060 <HAL_TIM_Base_Start_IT+0xd8>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d013      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x80>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a1f      	ldr	r2, [pc, #124]	; (8008064 <HAL_TIM_Base_Start_IT+0xdc>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d00e      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x80>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a1e      	ldr	r2, [pc, #120]	; (8008068 <HAL_TIM_Base_Start_IT+0xe0>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d009      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x80>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a1c      	ldr	r2, [pc, #112]	; (800806c <HAL_TIM_Base_Start_IT+0xe4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d004      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x80>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a1b      	ldr	r2, [pc, #108]	; (8008070 <HAL_TIM_Base_Start_IT+0xe8>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d115      	bne.n	8008034 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	689a      	ldr	r2, [r3, #8]
 800800e:	4b19      	ldr	r3, [pc, #100]	; (8008074 <HAL_TIM_Base_Start_IT+0xec>)
 8008010:	4013      	ands	r3, r2
 8008012:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2b06      	cmp	r3, #6
 8008018:	d015      	beq.n	8008046 <HAL_TIM_Base_Start_IT+0xbe>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008020:	d011      	beq.n	8008046 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f042 0201 	orr.w	r2, r2, #1
 8008030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008032:	e008      	b.n	8008046 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f042 0201 	orr.w	r2, r2, #1
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	e000      	b.n	8008048 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008046:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	40010000 	.word	0x40010000
 800805c:	40000400 	.word	0x40000400
 8008060:	40000800 	.word	0x40000800
 8008064:	40000c00 	.word	0x40000c00
 8008068:	40010400 	.word	0x40010400
 800806c:	40001800 	.word	0x40001800
 8008070:	40014000 	.word	0x40014000
 8008074:	00010007 	.word	0x00010007

08008078 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68da      	ldr	r2, [r3, #12]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f022 0201 	bic.w	r2, r2, #1
 800808e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6a1a      	ldr	r2, [r3, #32]
 8008096:	f241 1311 	movw	r3, #4369	; 0x1111
 800809a:	4013      	ands	r3, r2
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10f      	bne.n	80080c0 <HAL_TIM_Base_Stop_IT+0x48>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6a1a      	ldr	r2, [r3, #32]
 80080a6:	f240 4344 	movw	r3, #1092	; 0x444
 80080aa:	4013      	ands	r3, r2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d107      	bne.n	80080c0 <HAL_TIM_Base_Stop_IT+0x48>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f022 0201 	bic.w	r2, r2, #1
 80080be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b082      	sub	sp, #8
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e049      	b.n	800817c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d106      	bne.n	8008102 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f841 	bl	8008184 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2202      	movs	r2, #2
 8008106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	3304      	adds	r3, #4
 8008112:	4619      	mov	r1, r3
 8008114:	4610      	mov	r0, r2
 8008116:	f000 fd79 	bl	8008c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d109      	bne.n	80081bc <HAL_TIM_PWM_Start+0x24>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	bf14      	ite	ne
 80081b4:	2301      	movne	r3, #1
 80081b6:	2300      	moveq	r3, #0
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	e03c      	b.n	8008236 <HAL_TIM_PWM_Start+0x9e>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2b04      	cmp	r3, #4
 80081c0:	d109      	bne.n	80081d6 <HAL_TIM_PWM_Start+0x3e>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	bf14      	ite	ne
 80081ce:	2301      	movne	r3, #1
 80081d0:	2300      	moveq	r3, #0
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	e02f      	b.n	8008236 <HAL_TIM_PWM_Start+0x9e>
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b08      	cmp	r3, #8
 80081da:	d109      	bne.n	80081f0 <HAL_TIM_PWM_Start+0x58>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	bf14      	ite	ne
 80081e8:	2301      	movne	r3, #1
 80081ea:	2300      	moveq	r3, #0
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	e022      	b.n	8008236 <HAL_TIM_PWM_Start+0x9e>
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	2b0c      	cmp	r3, #12
 80081f4:	d109      	bne.n	800820a <HAL_TIM_PWM_Start+0x72>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b01      	cmp	r3, #1
 8008200:	bf14      	ite	ne
 8008202:	2301      	movne	r3, #1
 8008204:	2300      	moveq	r3, #0
 8008206:	b2db      	uxtb	r3, r3
 8008208:	e015      	b.n	8008236 <HAL_TIM_PWM_Start+0x9e>
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b10      	cmp	r3, #16
 800820e:	d109      	bne.n	8008224 <HAL_TIM_PWM_Start+0x8c>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b01      	cmp	r3, #1
 800821a:	bf14      	ite	ne
 800821c:	2301      	movne	r3, #1
 800821e:	2300      	moveq	r3, #0
 8008220:	b2db      	uxtb	r3, r3
 8008222:	e008      	b.n	8008236 <HAL_TIM_PWM_Start+0x9e>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b01      	cmp	r3, #1
 800822e:	bf14      	ite	ne
 8008230:	2301      	movne	r3, #1
 8008232:	2300      	moveq	r3, #0
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e0a1      	b.n	8008382 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d104      	bne.n	800824e <HAL_TIM_PWM_Start+0xb6>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2202      	movs	r2, #2
 8008248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800824c:	e023      	b.n	8008296 <HAL_TIM_PWM_Start+0xfe>
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b04      	cmp	r3, #4
 8008252:	d104      	bne.n	800825e <HAL_TIM_PWM_Start+0xc6>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2202      	movs	r2, #2
 8008258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800825c:	e01b      	b.n	8008296 <HAL_TIM_PWM_Start+0xfe>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b08      	cmp	r3, #8
 8008262:	d104      	bne.n	800826e <HAL_TIM_PWM_Start+0xd6>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2202      	movs	r2, #2
 8008268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800826c:	e013      	b.n	8008296 <HAL_TIM_PWM_Start+0xfe>
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	2b0c      	cmp	r3, #12
 8008272:	d104      	bne.n	800827e <HAL_TIM_PWM_Start+0xe6>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2202      	movs	r2, #2
 8008278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800827c:	e00b      	b.n	8008296 <HAL_TIM_PWM_Start+0xfe>
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	2b10      	cmp	r3, #16
 8008282:	d104      	bne.n	800828e <HAL_TIM_PWM_Start+0xf6>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2202      	movs	r2, #2
 8008288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800828c:	e003      	b.n	8008296 <HAL_TIM_PWM_Start+0xfe>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2202      	movs	r2, #2
 8008292:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2201      	movs	r2, #1
 800829c:	6839      	ldr	r1, [r7, #0]
 800829e:	4618      	mov	r0, r3
 80082a0:	f001 f9ac 	bl	80095fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a38      	ldr	r2, [pc, #224]	; (800838c <HAL_TIM_PWM_Start+0x1f4>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d013      	beq.n	80082d6 <HAL_TIM_PWM_Start+0x13e>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a37      	ldr	r2, [pc, #220]	; (8008390 <HAL_TIM_PWM_Start+0x1f8>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d00e      	beq.n	80082d6 <HAL_TIM_PWM_Start+0x13e>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a35      	ldr	r2, [pc, #212]	; (8008394 <HAL_TIM_PWM_Start+0x1fc>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d009      	beq.n	80082d6 <HAL_TIM_PWM_Start+0x13e>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a34      	ldr	r2, [pc, #208]	; (8008398 <HAL_TIM_PWM_Start+0x200>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d004      	beq.n	80082d6 <HAL_TIM_PWM_Start+0x13e>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a32      	ldr	r2, [pc, #200]	; (800839c <HAL_TIM_PWM_Start+0x204>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d101      	bne.n	80082da <HAL_TIM_PWM_Start+0x142>
 80082d6:	2301      	movs	r3, #1
 80082d8:	e000      	b.n	80082dc <HAL_TIM_PWM_Start+0x144>
 80082da:	2300      	movs	r3, #0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d007      	beq.n	80082f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a25      	ldr	r2, [pc, #148]	; (800838c <HAL_TIM_PWM_Start+0x1f4>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d022      	beq.n	8008340 <HAL_TIM_PWM_Start+0x1a8>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008302:	d01d      	beq.n	8008340 <HAL_TIM_PWM_Start+0x1a8>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a25      	ldr	r2, [pc, #148]	; (80083a0 <HAL_TIM_PWM_Start+0x208>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d018      	beq.n	8008340 <HAL_TIM_PWM_Start+0x1a8>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a24      	ldr	r2, [pc, #144]	; (80083a4 <HAL_TIM_PWM_Start+0x20c>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d013      	beq.n	8008340 <HAL_TIM_PWM_Start+0x1a8>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a22      	ldr	r2, [pc, #136]	; (80083a8 <HAL_TIM_PWM_Start+0x210>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d00e      	beq.n	8008340 <HAL_TIM_PWM_Start+0x1a8>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a1a      	ldr	r2, [pc, #104]	; (8008390 <HAL_TIM_PWM_Start+0x1f8>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d009      	beq.n	8008340 <HAL_TIM_PWM_Start+0x1a8>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a1e      	ldr	r2, [pc, #120]	; (80083ac <HAL_TIM_PWM_Start+0x214>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d004      	beq.n	8008340 <HAL_TIM_PWM_Start+0x1a8>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a16      	ldr	r2, [pc, #88]	; (8008394 <HAL_TIM_PWM_Start+0x1fc>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d115      	bne.n	800836c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689a      	ldr	r2, [r3, #8]
 8008346:	4b1a      	ldr	r3, [pc, #104]	; (80083b0 <HAL_TIM_PWM_Start+0x218>)
 8008348:	4013      	ands	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2b06      	cmp	r3, #6
 8008350:	d015      	beq.n	800837e <HAL_TIM_PWM_Start+0x1e6>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008358:	d011      	beq.n	800837e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f042 0201 	orr.w	r2, r2, #1
 8008368:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800836a:	e008      	b.n	800837e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f042 0201 	orr.w	r2, r2, #1
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	e000      	b.n	8008380 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800837e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	40010000 	.word	0x40010000
 8008390:	40010400 	.word	0x40010400
 8008394:	40014000 	.word	0x40014000
 8008398:	40014400 	.word	0x40014400
 800839c:	40014800 	.word	0x40014800
 80083a0:	40000400 	.word	0x40000400
 80083a4:	40000800 	.word	0x40000800
 80083a8:	40000c00 	.word	0x40000c00
 80083ac:	40001800 	.word	0x40001800
 80083b0:	00010007 	.word	0x00010007

080083b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2200      	movs	r2, #0
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f001 f918 	bl	80095fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a3e      	ldr	r2, [pc, #248]	; (80084cc <HAL_TIM_PWM_Stop+0x118>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d013      	beq.n	80083fe <HAL_TIM_PWM_Stop+0x4a>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a3d      	ldr	r2, [pc, #244]	; (80084d0 <HAL_TIM_PWM_Stop+0x11c>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d00e      	beq.n	80083fe <HAL_TIM_PWM_Stop+0x4a>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a3b      	ldr	r2, [pc, #236]	; (80084d4 <HAL_TIM_PWM_Stop+0x120>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d009      	beq.n	80083fe <HAL_TIM_PWM_Stop+0x4a>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a3a      	ldr	r2, [pc, #232]	; (80084d8 <HAL_TIM_PWM_Stop+0x124>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d004      	beq.n	80083fe <HAL_TIM_PWM_Stop+0x4a>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a38      	ldr	r2, [pc, #224]	; (80084dc <HAL_TIM_PWM_Stop+0x128>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d101      	bne.n	8008402 <HAL_TIM_PWM_Stop+0x4e>
 80083fe:	2301      	movs	r3, #1
 8008400:	e000      	b.n	8008404 <HAL_TIM_PWM_Stop+0x50>
 8008402:	2300      	movs	r3, #0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d017      	beq.n	8008438 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6a1a      	ldr	r2, [r3, #32]
 800840e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008412:	4013      	ands	r3, r2
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10f      	bne.n	8008438 <HAL_TIM_PWM_Stop+0x84>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6a1a      	ldr	r2, [r3, #32]
 800841e:	f240 4344 	movw	r3, #1092	; 0x444
 8008422:	4013      	ands	r3, r2
 8008424:	2b00      	cmp	r3, #0
 8008426:	d107      	bne.n	8008438 <HAL_TIM_PWM_Stop+0x84>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008436:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6a1a      	ldr	r2, [r3, #32]
 800843e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008442:	4013      	ands	r3, r2
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10f      	bne.n	8008468 <HAL_TIM_PWM_Stop+0xb4>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6a1a      	ldr	r2, [r3, #32]
 800844e:	f240 4344 	movw	r3, #1092	; 0x444
 8008452:	4013      	ands	r3, r2
 8008454:	2b00      	cmp	r3, #0
 8008456:	d107      	bne.n	8008468 <HAL_TIM_PWM_Stop+0xb4>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f022 0201 	bic.w	r2, r2, #1
 8008466:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d104      	bne.n	8008478 <HAL_TIM_PWM_Stop+0xc4>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008476:	e023      	b.n	80084c0 <HAL_TIM_PWM_Stop+0x10c>
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	2b04      	cmp	r3, #4
 800847c:	d104      	bne.n	8008488 <HAL_TIM_PWM_Stop+0xd4>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008486:	e01b      	b.n	80084c0 <HAL_TIM_PWM_Stop+0x10c>
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	2b08      	cmp	r3, #8
 800848c:	d104      	bne.n	8008498 <HAL_TIM_PWM_Stop+0xe4>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008496:	e013      	b.n	80084c0 <HAL_TIM_PWM_Stop+0x10c>
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2b0c      	cmp	r3, #12
 800849c:	d104      	bne.n	80084a8 <HAL_TIM_PWM_Stop+0xf4>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084a6:	e00b      	b.n	80084c0 <HAL_TIM_PWM_Stop+0x10c>
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	2b10      	cmp	r3, #16
 80084ac:	d104      	bne.n	80084b8 <HAL_TIM_PWM_Stop+0x104>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084b6:	e003      	b.n	80084c0 <HAL_TIM_PWM_Stop+0x10c>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	40010000 	.word	0x40010000
 80084d0:	40010400 	.word	0x40010400
 80084d4:	40014000 	.word	0x40014000
 80084d8:	40014400 	.word	0x40014400
 80084dc:	40014800 	.word	0x40014800

080084e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	f003 0302 	and.w	r3, r3, #2
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d122      	bne.n	800853c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	f003 0302 	and.w	r3, r3, #2
 8008500:	2b02      	cmp	r3, #2
 8008502:	d11b      	bne.n	800853c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f06f 0202 	mvn.w	r2, #2
 800850c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	f003 0303 	and.w	r3, r3, #3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fb54 	bl	8008bd0 <HAL_TIM_IC_CaptureCallback>
 8008528:	e005      	b.n	8008536 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fb46 	bl	8008bbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fb57 	bl	8008be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	f003 0304 	and.w	r3, r3, #4
 8008546:	2b04      	cmp	r3, #4
 8008548:	d122      	bne.n	8008590 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	f003 0304 	and.w	r3, r3, #4
 8008554:	2b04      	cmp	r3, #4
 8008556:	d11b      	bne.n	8008590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f06f 0204 	mvn.w	r2, #4
 8008560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2202      	movs	r2, #2
 8008566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008572:	2b00      	cmp	r3, #0
 8008574:	d003      	beq.n	800857e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fb2a 	bl	8008bd0 <HAL_TIM_IC_CaptureCallback>
 800857c:	e005      	b.n	800858a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fb1c 	bl	8008bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fb2d 	bl	8008be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	f003 0308 	and.w	r3, r3, #8
 800859a:	2b08      	cmp	r3, #8
 800859c:	d122      	bne.n	80085e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	f003 0308 	and.w	r3, r3, #8
 80085a8:	2b08      	cmp	r3, #8
 80085aa:	d11b      	bne.n	80085e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f06f 0208 	mvn.w	r2, #8
 80085b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2204      	movs	r2, #4
 80085ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	69db      	ldr	r3, [r3, #28]
 80085c2:	f003 0303 	and.w	r3, r3, #3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d003      	beq.n	80085d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fb00 	bl	8008bd0 <HAL_TIM_IC_CaptureCallback>
 80085d0:	e005      	b.n	80085de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 faf2 	bl	8008bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fb03 	bl	8008be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	f003 0310 	and.w	r3, r3, #16
 80085ee:	2b10      	cmp	r3, #16
 80085f0:	d122      	bne.n	8008638 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	f003 0310 	and.w	r3, r3, #16
 80085fc:	2b10      	cmp	r3, #16
 80085fe:	d11b      	bne.n	8008638 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f06f 0210 	mvn.w	r2, #16
 8008608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2208      	movs	r2, #8
 800860e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fad6 	bl	8008bd0 <HAL_TIM_IC_CaptureCallback>
 8008624:	e005      	b.n	8008632 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fac8 	bl	8008bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fad9 	bl	8008be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	2b01      	cmp	r3, #1
 8008644:	d10e      	bne.n	8008664 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	f003 0301 	and.w	r3, r3, #1
 8008650:	2b01      	cmp	r3, #1
 8008652:	d107      	bne.n	8008664 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f06f 0201 	mvn.w	r2, #1
 800865c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7f8 fb1a 	bl	8000c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800866e:	2b80      	cmp	r3, #128	; 0x80
 8008670:	d10e      	bne.n	8008690 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800867c:	2b80      	cmp	r3, #128	; 0x80
 800867e:	d107      	bne.n	8008690 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f001 f874 	bl	8009778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800869a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800869e:	d10e      	bne.n	80086be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086aa:	2b80      	cmp	r3, #128	; 0x80
 80086ac:	d107      	bne.n	80086be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80086b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f001 f867 	bl	800978c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c8:	2b40      	cmp	r3, #64	; 0x40
 80086ca:	d10e      	bne.n	80086ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d6:	2b40      	cmp	r3, #64	; 0x40
 80086d8:	d107      	bne.n	80086ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80086e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fa87 	bl	8008bf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	f003 0320 	and.w	r3, r3, #32
 80086f4:	2b20      	cmp	r3, #32
 80086f6:	d10e      	bne.n	8008716 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	f003 0320 	and.w	r3, r3, #32
 8008702:	2b20      	cmp	r3, #32
 8008704:	d107      	bne.n	8008716 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f06f 0220 	mvn.w	r2, #32
 800870e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f001 f827 	bl	8009764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008716:	bf00      	nop
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008736:	2b01      	cmp	r3, #1
 8008738:	d101      	bne.n	800873e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800873a:	2302      	movs	r3, #2
 800873c:	e0ff      	b.n	800893e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b14      	cmp	r3, #20
 800874a:	f200 80f0 	bhi.w	800892e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800874e:	a201      	add	r2, pc, #4	; (adr r2, 8008754 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008754:	080087a9 	.word	0x080087a9
 8008758:	0800892f 	.word	0x0800892f
 800875c:	0800892f 	.word	0x0800892f
 8008760:	0800892f 	.word	0x0800892f
 8008764:	080087e9 	.word	0x080087e9
 8008768:	0800892f 	.word	0x0800892f
 800876c:	0800892f 	.word	0x0800892f
 8008770:	0800892f 	.word	0x0800892f
 8008774:	0800882b 	.word	0x0800882b
 8008778:	0800892f 	.word	0x0800892f
 800877c:	0800892f 	.word	0x0800892f
 8008780:	0800892f 	.word	0x0800892f
 8008784:	0800886b 	.word	0x0800886b
 8008788:	0800892f 	.word	0x0800892f
 800878c:	0800892f 	.word	0x0800892f
 8008790:	0800892f 	.word	0x0800892f
 8008794:	080088ad 	.word	0x080088ad
 8008798:	0800892f 	.word	0x0800892f
 800879c:	0800892f 	.word	0x0800892f
 80087a0:	0800892f 	.word	0x0800892f
 80087a4:	080088ed 	.word	0x080088ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68b9      	ldr	r1, [r7, #8]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 fac6 	bl	8008d40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	699a      	ldr	r2, [r3, #24]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f042 0208 	orr.w	r2, r2, #8
 80087c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	699a      	ldr	r2, [r3, #24]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f022 0204 	bic.w	r2, r2, #4
 80087d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6999      	ldr	r1, [r3, #24]
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	691a      	ldr	r2, [r3, #16]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	430a      	orrs	r2, r1
 80087e4:	619a      	str	r2, [r3, #24]
      break;
 80087e6:	e0a5      	b.n	8008934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68b9      	ldr	r1, [r7, #8]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 fb36 	bl	8008e60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	699a      	ldr	r2, [r3, #24]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	699a      	ldr	r2, [r3, #24]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6999      	ldr	r1, [r3, #24]
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	021a      	lsls	r2, r3, #8
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	430a      	orrs	r2, r1
 8008826:	619a      	str	r2, [r3, #24]
      break;
 8008828:	e084      	b.n	8008934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68b9      	ldr	r1, [r7, #8]
 8008830:	4618      	mov	r0, r3
 8008832:	f000 fb9f 	bl	8008f74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	69da      	ldr	r2, [r3, #28]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f042 0208 	orr.w	r2, r2, #8
 8008844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	69da      	ldr	r2, [r3, #28]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f022 0204 	bic.w	r2, r2, #4
 8008854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	69d9      	ldr	r1, [r3, #28]
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	691a      	ldr	r2, [r3, #16]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	430a      	orrs	r2, r1
 8008866:	61da      	str	r2, [r3, #28]
      break;
 8008868:	e064      	b.n	8008934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68b9      	ldr	r1, [r7, #8]
 8008870:	4618      	mov	r0, r3
 8008872:	f000 fc07 	bl	8009084 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	69da      	ldr	r2, [r3, #28]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	69da      	ldr	r2, [r3, #28]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	69d9      	ldr	r1, [r3, #28]
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	021a      	lsls	r2, r3, #8
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	61da      	str	r2, [r3, #28]
      break;
 80088aa:	e043      	b.n	8008934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68b9      	ldr	r1, [r7, #8]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 fc50 	bl	8009158 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f042 0208 	orr.w	r2, r2, #8
 80088c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f022 0204 	bic.w	r2, r2, #4
 80088d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	691a      	ldr	r2, [r3, #16]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	430a      	orrs	r2, r1
 80088e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80088ea:	e023      	b.n	8008934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68b9      	ldr	r1, [r7, #8]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 fc94 	bl	8009220 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008906:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008916:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	021a      	lsls	r2, r3, #8
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	430a      	orrs	r2, r1
 800892a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800892c:	e002      	b.n	8008934 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	75fb      	strb	r3, [r7, #23]
      break;
 8008932:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800893c:	7dfb      	ldrb	r3, [r7, #23]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3718      	adds	r7, #24
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop

08008948 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800895c:	2b01      	cmp	r3, #1
 800895e:	d101      	bne.n	8008964 <HAL_TIM_ConfigClockSource+0x1c>
 8008960:	2302      	movs	r3, #2
 8008962:	e0dc      	b.n	8008b1e <HAL_TIM_ConfigClockSource+0x1d6>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2202      	movs	r2, #2
 8008970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	4b6a      	ldr	r3, [pc, #424]	; (8008b28 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008980:	4013      	ands	r3, r2
 8008982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800898a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a64      	ldr	r2, [pc, #400]	; (8008b2c <HAL_TIM_ConfigClockSource+0x1e4>)
 800899a:	4293      	cmp	r3, r2
 800899c:	f000 80a9 	beq.w	8008af2 <HAL_TIM_ConfigClockSource+0x1aa>
 80089a0:	4a62      	ldr	r2, [pc, #392]	; (8008b2c <HAL_TIM_ConfigClockSource+0x1e4>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	f200 80ae 	bhi.w	8008b04 <HAL_TIM_ConfigClockSource+0x1bc>
 80089a8:	4a61      	ldr	r2, [pc, #388]	; (8008b30 <HAL_TIM_ConfigClockSource+0x1e8>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	f000 80a1 	beq.w	8008af2 <HAL_TIM_ConfigClockSource+0x1aa>
 80089b0:	4a5f      	ldr	r2, [pc, #380]	; (8008b30 <HAL_TIM_ConfigClockSource+0x1e8>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	f200 80a6 	bhi.w	8008b04 <HAL_TIM_ConfigClockSource+0x1bc>
 80089b8:	4a5e      	ldr	r2, [pc, #376]	; (8008b34 <HAL_TIM_ConfigClockSource+0x1ec>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	f000 8099 	beq.w	8008af2 <HAL_TIM_ConfigClockSource+0x1aa>
 80089c0:	4a5c      	ldr	r2, [pc, #368]	; (8008b34 <HAL_TIM_ConfigClockSource+0x1ec>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	f200 809e 	bhi.w	8008b04 <HAL_TIM_ConfigClockSource+0x1bc>
 80089c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80089cc:	f000 8091 	beq.w	8008af2 <HAL_TIM_ConfigClockSource+0x1aa>
 80089d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80089d4:	f200 8096 	bhi.w	8008b04 <HAL_TIM_ConfigClockSource+0x1bc>
 80089d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089dc:	f000 8089 	beq.w	8008af2 <HAL_TIM_ConfigClockSource+0x1aa>
 80089e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089e4:	f200 808e 	bhi.w	8008b04 <HAL_TIM_ConfigClockSource+0x1bc>
 80089e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089ec:	d03e      	beq.n	8008a6c <HAL_TIM_ConfigClockSource+0x124>
 80089ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089f2:	f200 8087 	bhi.w	8008b04 <HAL_TIM_ConfigClockSource+0x1bc>
 80089f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089fa:	f000 8086 	beq.w	8008b0a <HAL_TIM_ConfigClockSource+0x1c2>
 80089fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a02:	d87f      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a04:	2b70      	cmp	r3, #112	; 0x70
 8008a06:	d01a      	beq.n	8008a3e <HAL_TIM_ConfigClockSource+0xf6>
 8008a08:	2b70      	cmp	r3, #112	; 0x70
 8008a0a:	d87b      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a0c:	2b60      	cmp	r3, #96	; 0x60
 8008a0e:	d050      	beq.n	8008ab2 <HAL_TIM_ConfigClockSource+0x16a>
 8008a10:	2b60      	cmp	r3, #96	; 0x60
 8008a12:	d877      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a14:	2b50      	cmp	r3, #80	; 0x50
 8008a16:	d03c      	beq.n	8008a92 <HAL_TIM_ConfigClockSource+0x14a>
 8008a18:	2b50      	cmp	r3, #80	; 0x50
 8008a1a:	d873      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a1c:	2b40      	cmp	r3, #64	; 0x40
 8008a1e:	d058      	beq.n	8008ad2 <HAL_TIM_ConfigClockSource+0x18a>
 8008a20:	2b40      	cmp	r3, #64	; 0x40
 8008a22:	d86f      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a24:	2b30      	cmp	r3, #48	; 0x30
 8008a26:	d064      	beq.n	8008af2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a28:	2b30      	cmp	r3, #48	; 0x30
 8008a2a:	d86b      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a2c:	2b20      	cmp	r3, #32
 8008a2e:	d060      	beq.n	8008af2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a30:	2b20      	cmp	r3, #32
 8008a32:	d867      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d05c      	beq.n	8008af2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a38:	2b10      	cmp	r3, #16
 8008a3a:	d05a      	beq.n	8008af2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a3c:	e062      	b.n	8008b04 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6818      	ldr	r0, [r3, #0]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	6899      	ldr	r1, [r3, #8]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	685a      	ldr	r2, [r3, #4]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	f000 fdb5 	bl	80095bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	609a      	str	r2, [r3, #8]
      break;
 8008a6a:	e04f      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6818      	ldr	r0, [r3, #0]
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	6899      	ldr	r1, [r3, #8]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	685a      	ldr	r2, [r3, #4]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	f000 fd9e 	bl	80095bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689a      	ldr	r2, [r3, #8]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a8e:	609a      	str	r2, [r3, #8]
      break;
 8008a90:	e03c      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6818      	ldr	r0, [r3, #0]
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	6859      	ldr	r1, [r3, #4]
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	f000 fd0e 	bl	80094c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2150      	movs	r1, #80	; 0x50
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 fd68 	bl	8009580 <TIM_ITRx_SetConfig>
      break;
 8008ab0:	e02c      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6818      	ldr	r0, [r3, #0]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	6859      	ldr	r1, [r3, #4]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f000 fd2d 	bl	800951e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2160      	movs	r1, #96	; 0x60
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 fd58 	bl	8009580 <TIM_ITRx_SetConfig>
      break;
 8008ad0:	e01c      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6818      	ldr	r0, [r3, #0]
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	6859      	ldr	r1, [r3, #4]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f000 fcee 	bl	80094c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2140      	movs	r1, #64	; 0x40
 8008aea:	4618      	mov	r0, r3
 8008aec:	f000 fd48 	bl	8009580 <TIM_ITRx_SetConfig>
      break;
 8008af0:	e00c      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4619      	mov	r1, r3
 8008afc:	4610      	mov	r0, r2
 8008afe:	f000 fd3f 	bl	8009580 <TIM_ITRx_SetConfig>
      break;
 8008b02:	e003      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	73fb      	strb	r3, [r7, #15]
      break;
 8008b08:	e000      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008b0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	ffceff88 	.word	0xffceff88
 8008b2c:	00100040 	.word	0x00100040
 8008b30:	00100030 	.word	0x00100030
 8008b34:	00100020 	.word	0x00100020

08008b38 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d101      	bne.n	8008b50 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	e031      	b.n	8008bb4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fbc2 	bl	80092ec <TIM_SlaveTimer_SetConfig>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d009      	beq.n	8008b82 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e018      	b.n	8008bb4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68da      	ldr	r2, [r3, #12]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b90:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68da      	ldr	r2, [r3, #12]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008ba0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a40      	ldr	r2, [pc, #256]	; (8008d20 <TIM_Base_SetConfig+0x114>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d013      	beq.n	8008c4c <TIM_Base_SetConfig+0x40>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c2a:	d00f      	beq.n	8008c4c <TIM_Base_SetConfig+0x40>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a3d      	ldr	r2, [pc, #244]	; (8008d24 <TIM_Base_SetConfig+0x118>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d00b      	beq.n	8008c4c <TIM_Base_SetConfig+0x40>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a3c      	ldr	r2, [pc, #240]	; (8008d28 <TIM_Base_SetConfig+0x11c>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d007      	beq.n	8008c4c <TIM_Base_SetConfig+0x40>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a3b      	ldr	r2, [pc, #236]	; (8008d2c <TIM_Base_SetConfig+0x120>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d003      	beq.n	8008c4c <TIM_Base_SetConfig+0x40>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a3a      	ldr	r2, [pc, #232]	; (8008d30 <TIM_Base_SetConfig+0x124>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d108      	bne.n	8008c5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a2f      	ldr	r2, [pc, #188]	; (8008d20 <TIM_Base_SetConfig+0x114>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d01f      	beq.n	8008ca6 <TIM_Base_SetConfig+0x9a>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c6c:	d01b      	beq.n	8008ca6 <TIM_Base_SetConfig+0x9a>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a2c      	ldr	r2, [pc, #176]	; (8008d24 <TIM_Base_SetConfig+0x118>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d017      	beq.n	8008ca6 <TIM_Base_SetConfig+0x9a>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a2b      	ldr	r2, [pc, #172]	; (8008d28 <TIM_Base_SetConfig+0x11c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d013      	beq.n	8008ca6 <TIM_Base_SetConfig+0x9a>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a2a      	ldr	r2, [pc, #168]	; (8008d2c <TIM_Base_SetConfig+0x120>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d00f      	beq.n	8008ca6 <TIM_Base_SetConfig+0x9a>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a29      	ldr	r2, [pc, #164]	; (8008d30 <TIM_Base_SetConfig+0x124>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d00b      	beq.n	8008ca6 <TIM_Base_SetConfig+0x9a>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a28      	ldr	r2, [pc, #160]	; (8008d34 <TIM_Base_SetConfig+0x128>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d007      	beq.n	8008ca6 <TIM_Base_SetConfig+0x9a>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a27      	ldr	r2, [pc, #156]	; (8008d38 <TIM_Base_SetConfig+0x12c>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d003      	beq.n	8008ca6 <TIM_Base_SetConfig+0x9a>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a26      	ldr	r2, [pc, #152]	; (8008d3c <TIM_Base_SetConfig+0x130>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d108      	bne.n	8008cb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	689a      	ldr	r2, [r3, #8]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a10      	ldr	r2, [pc, #64]	; (8008d20 <TIM_Base_SetConfig+0x114>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d00f      	beq.n	8008d04 <TIM_Base_SetConfig+0xf8>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a12      	ldr	r2, [pc, #72]	; (8008d30 <TIM_Base_SetConfig+0x124>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d00b      	beq.n	8008d04 <TIM_Base_SetConfig+0xf8>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a11      	ldr	r2, [pc, #68]	; (8008d34 <TIM_Base_SetConfig+0x128>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d007      	beq.n	8008d04 <TIM_Base_SetConfig+0xf8>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a10      	ldr	r2, [pc, #64]	; (8008d38 <TIM_Base_SetConfig+0x12c>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d003      	beq.n	8008d04 <TIM_Base_SetConfig+0xf8>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a0f      	ldr	r2, [pc, #60]	; (8008d3c <TIM_Base_SetConfig+0x130>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d103      	bne.n	8008d0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	691a      	ldr	r2, [r3, #16]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	615a      	str	r2, [r3, #20]
}
 8008d12:	bf00      	nop
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	40010000 	.word	0x40010000
 8008d24:	40000400 	.word	0x40000400
 8008d28:	40000800 	.word	0x40000800
 8008d2c:	40000c00 	.word	0x40000c00
 8008d30:	40010400 	.word	0x40010400
 8008d34:	40014000 	.word	0x40014000
 8008d38:	40014400 	.word	0x40014400
 8008d3c:	40014800 	.word	0x40014800

08008d40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	f023 0201 	bic.w	r2, r3, #1
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	4b37      	ldr	r3, [pc, #220]	; (8008e48 <TIM_OC1_SetConfig+0x108>)
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f023 0303 	bic.w	r3, r3, #3
 8008d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f023 0302 	bic.w	r3, r3, #2
 8008d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a2d      	ldr	r2, [pc, #180]	; (8008e4c <TIM_OC1_SetConfig+0x10c>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d00f      	beq.n	8008dbc <TIM_OC1_SetConfig+0x7c>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a2c      	ldr	r2, [pc, #176]	; (8008e50 <TIM_OC1_SetConfig+0x110>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d00b      	beq.n	8008dbc <TIM_OC1_SetConfig+0x7c>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a2b      	ldr	r2, [pc, #172]	; (8008e54 <TIM_OC1_SetConfig+0x114>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d007      	beq.n	8008dbc <TIM_OC1_SetConfig+0x7c>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a2a      	ldr	r2, [pc, #168]	; (8008e58 <TIM_OC1_SetConfig+0x118>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d003      	beq.n	8008dbc <TIM_OC1_SetConfig+0x7c>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a29      	ldr	r2, [pc, #164]	; (8008e5c <TIM_OC1_SetConfig+0x11c>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d10c      	bne.n	8008dd6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	f023 0308 	bic.w	r3, r3, #8
 8008dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	f023 0304 	bic.w	r3, r3, #4
 8008dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a1c      	ldr	r2, [pc, #112]	; (8008e4c <TIM_OC1_SetConfig+0x10c>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d00f      	beq.n	8008dfe <TIM_OC1_SetConfig+0xbe>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a1b      	ldr	r2, [pc, #108]	; (8008e50 <TIM_OC1_SetConfig+0x110>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d00b      	beq.n	8008dfe <TIM_OC1_SetConfig+0xbe>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a1a      	ldr	r2, [pc, #104]	; (8008e54 <TIM_OC1_SetConfig+0x114>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d007      	beq.n	8008dfe <TIM_OC1_SetConfig+0xbe>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a19      	ldr	r2, [pc, #100]	; (8008e58 <TIM_OC1_SetConfig+0x118>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d003      	beq.n	8008dfe <TIM_OC1_SetConfig+0xbe>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a18      	ldr	r2, [pc, #96]	; (8008e5c <TIM_OC1_SetConfig+0x11c>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d111      	bne.n	8008e22 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	693a      	ldr	r2, [r7, #16]
 8008e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	685a      	ldr	r2, [r3, #4]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	621a      	str	r2, [r3, #32]
}
 8008e3c:	bf00      	nop
 8008e3e:	371c      	adds	r7, #28
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	fffeff8f 	.word	0xfffeff8f
 8008e4c:	40010000 	.word	0x40010000
 8008e50:	40010400 	.word	0x40010400
 8008e54:	40014000 	.word	0x40014000
 8008e58:	40014400 	.word	0x40014400
 8008e5c:	40014800 	.word	0x40014800

08008e60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b087      	sub	sp, #28
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	f023 0210 	bic.w	r2, r3, #16
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a1b      	ldr	r3, [r3, #32]
 8008e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	4b34      	ldr	r3, [pc, #208]	; (8008f5c <TIM_OC2_SetConfig+0xfc>)
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	021b      	lsls	r3, r3, #8
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f023 0320 	bic.w	r3, r3, #32
 8008eaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	011b      	lsls	r3, r3, #4
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a29      	ldr	r2, [pc, #164]	; (8008f60 <TIM_OC2_SetConfig+0x100>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d003      	beq.n	8008ec8 <TIM_OC2_SetConfig+0x68>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a28      	ldr	r2, [pc, #160]	; (8008f64 <TIM_OC2_SetConfig+0x104>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d10d      	bne.n	8008ee4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	011b      	lsls	r3, r3, #4
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ee2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a1e      	ldr	r2, [pc, #120]	; (8008f60 <TIM_OC2_SetConfig+0x100>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d00f      	beq.n	8008f0c <TIM_OC2_SetConfig+0xac>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a1d      	ldr	r2, [pc, #116]	; (8008f64 <TIM_OC2_SetConfig+0x104>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d00b      	beq.n	8008f0c <TIM_OC2_SetConfig+0xac>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a1c      	ldr	r2, [pc, #112]	; (8008f68 <TIM_OC2_SetConfig+0x108>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d007      	beq.n	8008f0c <TIM_OC2_SetConfig+0xac>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a1b      	ldr	r2, [pc, #108]	; (8008f6c <TIM_OC2_SetConfig+0x10c>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d003      	beq.n	8008f0c <TIM_OC2_SetConfig+0xac>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a1a      	ldr	r2, [pc, #104]	; (8008f70 <TIM_OC2_SetConfig+0x110>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d113      	bne.n	8008f34 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	693a      	ldr	r2, [r7, #16]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	685a      	ldr	r2, [r3, #4]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	621a      	str	r2, [r3, #32]
}
 8008f4e:	bf00      	nop
 8008f50:	371c      	adds	r7, #28
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	feff8fff 	.word	0xfeff8fff
 8008f60:	40010000 	.word	0x40010000
 8008f64:	40010400 	.word	0x40010400
 8008f68:	40014000 	.word	0x40014000
 8008f6c:	40014400 	.word	0x40014400
 8008f70:	40014800 	.word	0x40014800

08008f74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b087      	sub	sp, #28
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	69db      	ldr	r3, [r3, #28]
 8008f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	4b33      	ldr	r3, [pc, #204]	; (800906c <TIM_OC3_SetConfig+0xf8>)
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f023 0303 	bic.w	r3, r3, #3
 8008faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	021b      	lsls	r3, r3, #8
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a28      	ldr	r2, [pc, #160]	; (8009070 <TIM_OC3_SetConfig+0xfc>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d003      	beq.n	8008fda <TIM_OC3_SetConfig+0x66>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a27      	ldr	r2, [pc, #156]	; (8009074 <TIM_OC3_SetConfig+0x100>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d10d      	bne.n	8008ff6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	021b      	lsls	r3, r3, #8
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a1d      	ldr	r2, [pc, #116]	; (8009070 <TIM_OC3_SetConfig+0xfc>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d00f      	beq.n	800901e <TIM_OC3_SetConfig+0xaa>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a1c      	ldr	r2, [pc, #112]	; (8009074 <TIM_OC3_SetConfig+0x100>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d00b      	beq.n	800901e <TIM_OC3_SetConfig+0xaa>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a1b      	ldr	r2, [pc, #108]	; (8009078 <TIM_OC3_SetConfig+0x104>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d007      	beq.n	800901e <TIM_OC3_SetConfig+0xaa>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4a1a      	ldr	r2, [pc, #104]	; (800907c <TIM_OC3_SetConfig+0x108>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d003      	beq.n	800901e <TIM_OC3_SetConfig+0xaa>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4a19      	ldr	r2, [pc, #100]	; (8009080 <TIM_OC3_SetConfig+0x10c>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d113      	bne.n	8009046 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800902c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	011b      	lsls	r3, r3, #4
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	4313      	orrs	r3, r2
 8009038:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	011b      	lsls	r3, r3, #4
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	4313      	orrs	r3, r2
 8009044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	685a      	ldr	r2, [r3, #4]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	621a      	str	r2, [r3, #32]
}
 8009060:	bf00      	nop
 8009062:	371c      	adds	r7, #28
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	fffeff8f 	.word	0xfffeff8f
 8009070:	40010000 	.word	0x40010000
 8009074:	40010400 	.word	0x40010400
 8009078:	40014000 	.word	0x40014000
 800907c:	40014400 	.word	0x40014400
 8009080:	40014800 	.word	0x40014800

08009084 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009084:	b480      	push	{r7}
 8009086:	b087      	sub	sp, #28
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a1b      	ldr	r3, [r3, #32]
 8009092:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a1b      	ldr	r3, [r3, #32]
 800909e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	4b24      	ldr	r3, [pc, #144]	; (8009140 <TIM_OC4_SetConfig+0xbc>)
 80090b0:	4013      	ands	r3, r2
 80090b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	021b      	lsls	r3, r3, #8
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	031b      	lsls	r3, r3, #12
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	4313      	orrs	r3, r2
 80090da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a19      	ldr	r2, [pc, #100]	; (8009144 <TIM_OC4_SetConfig+0xc0>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d00f      	beq.n	8009104 <TIM_OC4_SetConfig+0x80>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a18      	ldr	r2, [pc, #96]	; (8009148 <TIM_OC4_SetConfig+0xc4>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d00b      	beq.n	8009104 <TIM_OC4_SetConfig+0x80>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a17      	ldr	r2, [pc, #92]	; (800914c <TIM_OC4_SetConfig+0xc8>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d007      	beq.n	8009104 <TIM_OC4_SetConfig+0x80>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a16      	ldr	r2, [pc, #88]	; (8009150 <TIM_OC4_SetConfig+0xcc>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d003      	beq.n	8009104 <TIM_OC4_SetConfig+0x80>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a15      	ldr	r2, [pc, #84]	; (8009154 <TIM_OC4_SetConfig+0xd0>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d109      	bne.n	8009118 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800910a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	019b      	lsls	r3, r3, #6
 8009112:	697a      	ldr	r2, [r7, #20]
 8009114:	4313      	orrs	r3, r2
 8009116:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	697a      	ldr	r2, [r7, #20]
 800911c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	621a      	str	r2, [r3, #32]
}
 8009132:	bf00      	nop
 8009134:	371c      	adds	r7, #28
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	feff8fff 	.word	0xfeff8fff
 8009144:	40010000 	.word	0x40010000
 8009148:	40010400 	.word	0x40010400
 800914c:	40014000 	.word	0x40014000
 8009150:	40014400 	.word	0x40014400
 8009154:	40014800 	.word	0x40014800

08009158 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009158:	b480      	push	{r7}
 800915a:	b087      	sub	sp, #28
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a1b      	ldr	r3, [r3, #32]
 8009166:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800917e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	4b21      	ldr	r3, [pc, #132]	; (8009208 <TIM_OC5_SetConfig+0xb0>)
 8009184:	4013      	ands	r3, r2
 8009186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	4313      	orrs	r3, r2
 8009190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009198:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	041b      	lsls	r3, r3, #16
 80091a0:	693a      	ldr	r2, [r7, #16]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a18      	ldr	r2, [pc, #96]	; (800920c <TIM_OC5_SetConfig+0xb4>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d00f      	beq.n	80091ce <TIM_OC5_SetConfig+0x76>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a17      	ldr	r2, [pc, #92]	; (8009210 <TIM_OC5_SetConfig+0xb8>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d00b      	beq.n	80091ce <TIM_OC5_SetConfig+0x76>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a16      	ldr	r2, [pc, #88]	; (8009214 <TIM_OC5_SetConfig+0xbc>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d007      	beq.n	80091ce <TIM_OC5_SetConfig+0x76>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a15      	ldr	r2, [pc, #84]	; (8009218 <TIM_OC5_SetConfig+0xc0>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d003      	beq.n	80091ce <TIM_OC5_SetConfig+0x76>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a14      	ldr	r2, [pc, #80]	; (800921c <TIM_OC5_SetConfig+0xc4>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d109      	bne.n	80091e2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	021b      	lsls	r3, r3, #8
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	4313      	orrs	r3, r2
 80091e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	621a      	str	r2, [r3, #32]
}
 80091fc:	bf00      	nop
 80091fe:	371c      	adds	r7, #28
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr
 8009208:	fffeff8f 	.word	0xfffeff8f
 800920c:	40010000 	.word	0x40010000
 8009210:	40010400 	.word	0x40010400
 8009214:	40014000 	.word	0x40014000
 8009218:	40014400 	.word	0x40014400
 800921c:	40014800 	.word	0x40014800

08009220 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009220:	b480      	push	{r7}
 8009222:	b087      	sub	sp, #28
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a1b      	ldr	r3, [r3, #32]
 800922e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a1b      	ldr	r3, [r3, #32]
 800923a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	4b22      	ldr	r3, [pc, #136]	; (80092d4 <TIM_OC6_SetConfig+0xb4>)
 800924c:	4013      	ands	r3, r2
 800924e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	021b      	lsls	r3, r3, #8
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	4313      	orrs	r3, r2
 800925a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009262:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	051b      	lsls	r3, r3, #20
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	4313      	orrs	r3, r2
 800926e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a19      	ldr	r2, [pc, #100]	; (80092d8 <TIM_OC6_SetConfig+0xb8>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d00f      	beq.n	8009298 <TIM_OC6_SetConfig+0x78>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a18      	ldr	r2, [pc, #96]	; (80092dc <TIM_OC6_SetConfig+0xbc>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d00b      	beq.n	8009298 <TIM_OC6_SetConfig+0x78>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a17      	ldr	r2, [pc, #92]	; (80092e0 <TIM_OC6_SetConfig+0xc0>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d007      	beq.n	8009298 <TIM_OC6_SetConfig+0x78>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a16      	ldr	r2, [pc, #88]	; (80092e4 <TIM_OC6_SetConfig+0xc4>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d003      	beq.n	8009298 <TIM_OC6_SetConfig+0x78>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a15      	ldr	r2, [pc, #84]	; (80092e8 <TIM_OC6_SetConfig+0xc8>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d109      	bne.n	80092ac <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800929e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	695b      	ldr	r3, [r3, #20]
 80092a4:	029b      	lsls	r3, r3, #10
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	685a      	ldr	r2, [r3, #4]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	693a      	ldr	r2, [r7, #16]
 80092c4:	621a      	str	r2, [r3, #32]
}
 80092c6:	bf00      	nop
 80092c8:	371c      	adds	r7, #28
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	feff8fff 	.word	0xfeff8fff
 80092d8:	40010000 	.word	0x40010000
 80092dc:	40010400 	.word	0x40010400
 80092e0:	40014000 	.word	0x40014000
 80092e4:	40014400 	.word	0x40014400
 80092e8:	40014800 	.word	0x40014800

080092ec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b086      	sub	sp, #24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	4b65      	ldr	r3, [pc, #404]	; (800949c <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009306:	4013      	ands	r3, r2
 8009308:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	4313      	orrs	r3, r2
 8009312:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	4b62      	ldr	r3, [pc, #392]	; (80094a0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009318:	4013      	ands	r3, r2
 800931a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	4313      	orrs	r3, r2
 8009324:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	4a5c      	ldr	r2, [pc, #368]	; (80094a4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009334:	4293      	cmp	r3, r2
 8009336:	f000 80ab 	beq.w	8009490 <TIM_SlaveTimer_SetConfig+0x1a4>
 800933a:	4a5a      	ldr	r2, [pc, #360]	; (80094a4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800933c:	4293      	cmp	r3, r2
 800933e:	f200 80a4 	bhi.w	800948a <TIM_SlaveTimer_SetConfig+0x19e>
 8009342:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009346:	f000 80a3 	beq.w	8009490 <TIM_SlaveTimer_SetConfig+0x1a4>
 800934a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800934e:	f200 809c 	bhi.w	800948a <TIM_SlaveTimer_SetConfig+0x19e>
 8009352:	4a55      	ldr	r2, [pc, #340]	; (80094a8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009354:	4293      	cmp	r3, r2
 8009356:	f000 809b 	beq.w	8009490 <TIM_SlaveTimer_SetConfig+0x1a4>
 800935a:	4a53      	ldr	r2, [pc, #332]	; (80094a8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800935c:	4293      	cmp	r3, r2
 800935e:	f200 8094 	bhi.w	800948a <TIM_SlaveTimer_SetConfig+0x19e>
 8009362:	4a52      	ldr	r2, [pc, #328]	; (80094ac <TIM_SlaveTimer_SetConfig+0x1c0>)
 8009364:	4293      	cmp	r3, r2
 8009366:	f000 8093 	beq.w	8009490 <TIM_SlaveTimer_SetConfig+0x1a4>
 800936a:	4a50      	ldr	r2, [pc, #320]	; (80094ac <TIM_SlaveTimer_SetConfig+0x1c0>)
 800936c:	4293      	cmp	r3, r2
 800936e:	f200 808c 	bhi.w	800948a <TIM_SlaveTimer_SetConfig+0x19e>
 8009372:	4a4f      	ldr	r2, [pc, #316]	; (80094b0 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8009374:	4293      	cmp	r3, r2
 8009376:	f000 808b 	beq.w	8009490 <TIM_SlaveTimer_SetConfig+0x1a4>
 800937a:	4a4d      	ldr	r2, [pc, #308]	; (80094b0 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800937c:	4293      	cmp	r3, r2
 800937e:	f200 8084 	bhi.w	800948a <TIM_SlaveTimer_SetConfig+0x19e>
 8009382:	4a4c      	ldr	r2, [pc, #304]	; (80094b4 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8009384:	4293      	cmp	r3, r2
 8009386:	f000 8083 	beq.w	8009490 <TIM_SlaveTimer_SetConfig+0x1a4>
 800938a:	4a4a      	ldr	r2, [pc, #296]	; (80094b4 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d87c      	bhi.n	800948a <TIM_SlaveTimer_SetConfig+0x19e>
 8009390:	4a49      	ldr	r2, [pc, #292]	; (80094b8 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d07c      	beq.n	8009490 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009396:	4a48      	ldr	r2, [pc, #288]	; (80094b8 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d876      	bhi.n	800948a <TIM_SlaveTimer_SetConfig+0x19e>
 800939c:	4a47      	ldr	r2, [pc, #284]	; (80094bc <TIM_SlaveTimer_SetConfig+0x1d0>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d076      	beq.n	8009490 <TIM_SlaveTimer_SetConfig+0x1a4>
 80093a2:	4a46      	ldr	r2, [pc, #280]	; (80094bc <TIM_SlaveTimer_SetConfig+0x1d0>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d870      	bhi.n	800948a <TIM_SlaveTimer_SetConfig+0x19e>
 80093a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80093ac:	d070      	beq.n	8009490 <TIM_SlaveTimer_SetConfig+0x1a4>
 80093ae:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80093b2:	d86a      	bhi.n	800948a <TIM_SlaveTimer_SetConfig+0x19e>
 80093b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093b8:	d06a      	beq.n	8009490 <TIM_SlaveTimer_SetConfig+0x1a4>
 80093ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093be:	d864      	bhi.n	800948a <TIM_SlaveTimer_SetConfig+0x19e>
 80093c0:	2b70      	cmp	r3, #112	; 0x70
 80093c2:	d01a      	beq.n	80093fa <TIM_SlaveTimer_SetConfig+0x10e>
 80093c4:	2b70      	cmp	r3, #112	; 0x70
 80093c6:	d860      	bhi.n	800948a <TIM_SlaveTimer_SetConfig+0x19e>
 80093c8:	2b60      	cmp	r3, #96	; 0x60
 80093ca:	d054      	beq.n	8009476 <TIM_SlaveTimer_SetConfig+0x18a>
 80093cc:	2b60      	cmp	r3, #96	; 0x60
 80093ce:	d85c      	bhi.n	800948a <TIM_SlaveTimer_SetConfig+0x19e>
 80093d0:	2b50      	cmp	r3, #80	; 0x50
 80093d2:	d046      	beq.n	8009462 <TIM_SlaveTimer_SetConfig+0x176>
 80093d4:	2b50      	cmp	r3, #80	; 0x50
 80093d6:	d858      	bhi.n	800948a <TIM_SlaveTimer_SetConfig+0x19e>
 80093d8:	2b40      	cmp	r3, #64	; 0x40
 80093da:	d019      	beq.n	8009410 <TIM_SlaveTimer_SetConfig+0x124>
 80093dc:	2b40      	cmp	r3, #64	; 0x40
 80093de:	d854      	bhi.n	800948a <TIM_SlaveTimer_SetConfig+0x19e>
 80093e0:	2b30      	cmp	r3, #48	; 0x30
 80093e2:	d055      	beq.n	8009490 <TIM_SlaveTimer_SetConfig+0x1a4>
 80093e4:	2b30      	cmp	r3, #48	; 0x30
 80093e6:	d850      	bhi.n	800948a <TIM_SlaveTimer_SetConfig+0x19e>
 80093e8:	2b20      	cmp	r3, #32
 80093ea:	d051      	beq.n	8009490 <TIM_SlaveTimer_SetConfig+0x1a4>
 80093ec:	2b20      	cmp	r3, #32
 80093ee:	d84c      	bhi.n	800948a <TIM_SlaveTimer_SetConfig+0x19e>
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d04d      	beq.n	8009490 <TIM_SlaveTimer_SetConfig+0x1a4>
 80093f4:	2b10      	cmp	r3, #16
 80093f6:	d04b      	beq.n	8009490 <TIM_SlaveTimer_SetConfig+0x1a4>
 80093f8:	e047      	b.n	800948a <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	68d9      	ldr	r1, [r3, #12]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	689a      	ldr	r2, [r3, #8]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	f000 f8d7 	bl	80095bc <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800940e:	e040      	b.n	8009492 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2b05      	cmp	r3, #5
 8009416:	d101      	bne.n	800941c <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	e03b      	b.n	8009494 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6a1a      	ldr	r2, [r3, #32]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f022 0201 	bic.w	r2, r2, #1
 8009432:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009442:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	011b      	lsls	r3, r3, #4
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	4313      	orrs	r3, r2
 800944e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	621a      	str	r2, [r3, #32]
      break;
 8009460:	e017      	b.n	8009492 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6818      	ldr	r0, [r3, #0]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	6899      	ldr	r1, [r3, #8]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	461a      	mov	r2, r3
 8009470:	f000 f826 	bl	80094c0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009474:	e00d      	b.n	8009492 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6818      	ldr	r0, [r3, #0]
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	6899      	ldr	r1, [r3, #8]
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	461a      	mov	r2, r3
 8009484:	f000 f84b 	bl	800951e <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009488:	e003      	b.n	8009492 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	75fb      	strb	r3, [r7, #23]
      break;
 800948e:	e000      	b.n	8009492 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8009490:	bf00      	nop
  }

  return status;
 8009492:	7dfb      	ldrb	r3, [r7, #23]
}
 8009494:	4618      	mov	r0, r3
 8009496:	3718      	adds	r7, #24
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	ffcfff8f 	.word	0xffcfff8f
 80094a0:	fffefff8 	.word	0xfffefff8
 80094a4:	00200010 	.word	0x00200010
 80094a8:	00100070 	.word	0x00100070
 80094ac:	00100060 	.word	0x00100060
 80094b0:	00100050 	.word	0x00100050
 80094b4:	00100040 	.word	0x00100040
 80094b8:	00100030 	.word	0x00100030
 80094bc:	00100020 	.word	0x00100020

080094c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6a1b      	ldr	r3, [r3, #32]
 80094d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6a1b      	ldr	r3, [r3, #32]
 80094d6:	f023 0201 	bic.w	r2, r3, #1
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	011b      	lsls	r3, r3, #4
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	f023 030a 	bic.w	r3, r3, #10
 80094fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	4313      	orrs	r3, r2
 8009504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	697a      	ldr	r2, [r7, #20]
 8009510:	621a      	str	r2, [r3, #32]
}
 8009512:	bf00      	nop
 8009514:	371c      	adds	r7, #28
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800951e:	b480      	push	{r7}
 8009520:	b087      	sub	sp, #28
 8009522:	af00      	add	r7, sp, #0
 8009524:	60f8      	str	r0, [r7, #12]
 8009526:	60b9      	str	r1, [r7, #8]
 8009528:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	f023 0210 	bic.w	r2, r3, #16
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6a1b      	ldr	r3, [r3, #32]
 8009540:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009548:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	031b      	lsls	r3, r3, #12
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	4313      	orrs	r3, r2
 8009552:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800955a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	011b      	lsls	r3, r3, #4
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	4313      	orrs	r3, r2
 8009564:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	697a      	ldr	r2, [r7, #20]
 800956a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	693a      	ldr	r2, [r7, #16]
 8009570:	621a      	str	r2, [r3, #32]
}
 8009572:	bf00      	nop
 8009574:	371c      	adds	r7, #28
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
	...

08009580 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	4b09      	ldr	r3, [pc, #36]	; (80095b8 <TIM_ITRx_SetConfig+0x38>)
 8009594:	4013      	ands	r3, r2
 8009596:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009598:	683a      	ldr	r2, [r7, #0]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	4313      	orrs	r3, r2
 800959e:	f043 0307 	orr.w	r3, r3, #7
 80095a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	609a      	str	r2, [r3, #8]
}
 80095aa:	bf00      	nop
 80095ac:	3714      	adds	r7, #20
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	ffcfff8f 	.word	0xffcfff8f

080095bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095bc:	b480      	push	{r7}
 80095be:	b087      	sub	sp, #28
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	607a      	str	r2, [r7, #4]
 80095c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	021a      	lsls	r2, r3, #8
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	431a      	orrs	r2, r3
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	697a      	ldr	r2, [r7, #20]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	609a      	str	r2, [r3, #8]
}
 80095f0:	bf00      	nop
 80095f2:	371c      	adds	r7, #28
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b087      	sub	sp, #28
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	f003 031f 	and.w	r3, r3, #31
 800960e:	2201      	movs	r2, #1
 8009610:	fa02 f303 	lsl.w	r3, r2, r3
 8009614:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6a1a      	ldr	r2, [r3, #32]
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	43db      	mvns	r3, r3
 800961e:	401a      	ands	r2, r3
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6a1a      	ldr	r2, [r3, #32]
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	f003 031f 	and.w	r3, r3, #31
 800962e:	6879      	ldr	r1, [r7, #4]
 8009630:	fa01 f303 	lsl.w	r3, r1, r3
 8009634:	431a      	orrs	r2, r3
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	621a      	str	r2, [r3, #32]
}
 800963a:	bf00      	nop
 800963c:	371c      	adds	r7, #28
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
	...

08009648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009658:	2b01      	cmp	r3, #1
 800965a:	d101      	bne.n	8009660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800965c:	2302      	movs	r3, #2
 800965e:	e06d      	b.n	800973c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2202      	movs	r2, #2
 800966c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a30      	ldr	r2, [pc, #192]	; (8009748 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d004      	beq.n	8009694 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a2f      	ldr	r2, [pc, #188]	; (800974c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d108      	bne.n	80096a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800969a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	4313      	orrs	r3, r2
 80096b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a20      	ldr	r2, [pc, #128]	; (8009748 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d022      	beq.n	8009710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096d2:	d01d      	beq.n	8009710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a1d      	ldr	r2, [pc, #116]	; (8009750 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d018      	beq.n	8009710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a1c      	ldr	r2, [pc, #112]	; (8009754 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d013      	beq.n	8009710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a1a      	ldr	r2, [pc, #104]	; (8009758 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d00e      	beq.n	8009710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a15      	ldr	r2, [pc, #84]	; (800974c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d009      	beq.n	8009710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a16      	ldr	r2, [pc, #88]	; (800975c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d004      	beq.n	8009710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a15      	ldr	r2, [pc, #84]	; (8009760 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d10c      	bne.n	800972a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009716:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	4313      	orrs	r3, r2
 8009720:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2201      	movs	r2, #1
 800972e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800973a:	2300      	movs	r3, #0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3714      	adds	r7, #20
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr
 8009748:	40010000 	.word	0x40010000
 800974c:	40010400 	.word	0x40010400
 8009750:	40000400 	.word	0x40000400
 8009754:	40000800 	.word	0x40000800
 8009758:	40000c00 	.word	0x40000c00
 800975c:	40001800 	.word	0x40001800
 8009760:	40014000 	.word	0x40014000

08009764 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009794:	bf00      	nop
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d101      	bne.n	80097b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e042      	b.n	8009838 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d106      	bne.n	80097ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7f7 feaf 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2224      	movs	r2, #36	; 0x24
 80097ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f022 0201 	bic.w	r2, r2, #1
 80097e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f82c 	bl	8009840 <UART_SetConfig>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d101      	bne.n	80097f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e022      	b.n	8009838 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d002      	beq.n	8009800 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fe8c 	bl	800a518 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	685a      	ldr	r2, [r3, #4]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800980e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	689a      	ldr	r2, [r3, #8]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800981e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f042 0201 	orr.w	r2, r2, #1
 800982e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 ff13 	bl	800a65c <UART_CheckIdleState>
 8009836:	4603      	mov	r3, r0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009844:	b092      	sub	sp, #72	; 0x48
 8009846:	af00      	add	r7, sp, #0
 8009848:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	689a      	ldr	r2, [r3, #8]
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	431a      	orrs	r2, r3
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	695b      	ldr	r3, [r3, #20]
 800985e:	431a      	orrs	r2, r3
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	69db      	ldr	r3, [r3, #28]
 8009864:	4313      	orrs	r3, r2
 8009866:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	4bbe      	ldr	r3, [pc, #760]	; (8009b68 <UART_SetConfig+0x328>)
 8009870:	4013      	ands	r3, r2
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	6812      	ldr	r2, [r2, #0]
 8009876:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009878:	430b      	orrs	r3, r1
 800987a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	68da      	ldr	r2, [r3, #12]
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	430a      	orrs	r2, r1
 8009890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4ab3      	ldr	r2, [pc, #716]	; (8009b6c <UART_SetConfig+0x32c>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d004      	beq.n	80098ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	6a1b      	ldr	r3, [r3, #32]
 80098a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098a8:	4313      	orrs	r3, r2
 80098aa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	689a      	ldr	r2, [r3, #8]
 80098b2:	4baf      	ldr	r3, [pc, #700]	; (8009b70 <UART_SetConfig+0x330>)
 80098b4:	4013      	ands	r3, r2
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	6812      	ldr	r2, [r2, #0]
 80098ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80098bc:	430b      	orrs	r3, r1
 80098be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c6:	f023 010f 	bic.w	r1, r3, #15
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	430a      	orrs	r2, r1
 80098d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4aa6      	ldr	r2, [pc, #664]	; (8009b74 <UART_SetConfig+0x334>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d177      	bne.n	80099d0 <UART_SetConfig+0x190>
 80098e0:	4ba5      	ldr	r3, [pc, #660]	; (8009b78 <UART_SetConfig+0x338>)
 80098e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098e8:	2b28      	cmp	r3, #40	; 0x28
 80098ea:	d86d      	bhi.n	80099c8 <UART_SetConfig+0x188>
 80098ec:	a201      	add	r2, pc, #4	; (adr r2, 80098f4 <UART_SetConfig+0xb4>)
 80098ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f2:	bf00      	nop
 80098f4:	08009999 	.word	0x08009999
 80098f8:	080099c9 	.word	0x080099c9
 80098fc:	080099c9 	.word	0x080099c9
 8009900:	080099c9 	.word	0x080099c9
 8009904:	080099c9 	.word	0x080099c9
 8009908:	080099c9 	.word	0x080099c9
 800990c:	080099c9 	.word	0x080099c9
 8009910:	080099c9 	.word	0x080099c9
 8009914:	080099a1 	.word	0x080099a1
 8009918:	080099c9 	.word	0x080099c9
 800991c:	080099c9 	.word	0x080099c9
 8009920:	080099c9 	.word	0x080099c9
 8009924:	080099c9 	.word	0x080099c9
 8009928:	080099c9 	.word	0x080099c9
 800992c:	080099c9 	.word	0x080099c9
 8009930:	080099c9 	.word	0x080099c9
 8009934:	080099a9 	.word	0x080099a9
 8009938:	080099c9 	.word	0x080099c9
 800993c:	080099c9 	.word	0x080099c9
 8009940:	080099c9 	.word	0x080099c9
 8009944:	080099c9 	.word	0x080099c9
 8009948:	080099c9 	.word	0x080099c9
 800994c:	080099c9 	.word	0x080099c9
 8009950:	080099c9 	.word	0x080099c9
 8009954:	080099b1 	.word	0x080099b1
 8009958:	080099c9 	.word	0x080099c9
 800995c:	080099c9 	.word	0x080099c9
 8009960:	080099c9 	.word	0x080099c9
 8009964:	080099c9 	.word	0x080099c9
 8009968:	080099c9 	.word	0x080099c9
 800996c:	080099c9 	.word	0x080099c9
 8009970:	080099c9 	.word	0x080099c9
 8009974:	080099b9 	.word	0x080099b9
 8009978:	080099c9 	.word	0x080099c9
 800997c:	080099c9 	.word	0x080099c9
 8009980:	080099c9 	.word	0x080099c9
 8009984:	080099c9 	.word	0x080099c9
 8009988:	080099c9 	.word	0x080099c9
 800998c:	080099c9 	.word	0x080099c9
 8009990:	080099c9 	.word	0x080099c9
 8009994:	080099c1 	.word	0x080099c1
 8009998:	2301      	movs	r3, #1
 800999a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800999e:	e326      	b.n	8009fee <UART_SetConfig+0x7ae>
 80099a0:	2304      	movs	r3, #4
 80099a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099a6:	e322      	b.n	8009fee <UART_SetConfig+0x7ae>
 80099a8:	2308      	movs	r3, #8
 80099aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ae:	e31e      	b.n	8009fee <UART_SetConfig+0x7ae>
 80099b0:	2310      	movs	r3, #16
 80099b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099b6:	e31a      	b.n	8009fee <UART_SetConfig+0x7ae>
 80099b8:	2320      	movs	r3, #32
 80099ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099be:	e316      	b.n	8009fee <UART_SetConfig+0x7ae>
 80099c0:	2340      	movs	r3, #64	; 0x40
 80099c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099c6:	e312      	b.n	8009fee <UART_SetConfig+0x7ae>
 80099c8:	2380      	movs	r3, #128	; 0x80
 80099ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ce:	e30e      	b.n	8009fee <UART_SetConfig+0x7ae>
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a69      	ldr	r2, [pc, #420]	; (8009b7c <UART_SetConfig+0x33c>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d130      	bne.n	8009a3c <UART_SetConfig+0x1fc>
 80099da:	4b67      	ldr	r3, [pc, #412]	; (8009b78 <UART_SetConfig+0x338>)
 80099dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099de:	f003 0307 	and.w	r3, r3, #7
 80099e2:	2b05      	cmp	r3, #5
 80099e4:	d826      	bhi.n	8009a34 <UART_SetConfig+0x1f4>
 80099e6:	a201      	add	r2, pc, #4	; (adr r2, 80099ec <UART_SetConfig+0x1ac>)
 80099e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ec:	08009a05 	.word	0x08009a05
 80099f0:	08009a0d 	.word	0x08009a0d
 80099f4:	08009a15 	.word	0x08009a15
 80099f8:	08009a1d 	.word	0x08009a1d
 80099fc:	08009a25 	.word	0x08009a25
 8009a00:	08009a2d 	.word	0x08009a2d
 8009a04:	2300      	movs	r3, #0
 8009a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a0a:	e2f0      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009a0c:	2304      	movs	r3, #4
 8009a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a12:	e2ec      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009a14:	2308      	movs	r3, #8
 8009a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a1a:	e2e8      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009a1c:	2310      	movs	r3, #16
 8009a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a22:	e2e4      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009a24:	2320      	movs	r3, #32
 8009a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a2a:	e2e0      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009a2c:	2340      	movs	r3, #64	; 0x40
 8009a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a32:	e2dc      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009a34:	2380      	movs	r3, #128	; 0x80
 8009a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a3a:	e2d8      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a4f      	ldr	r2, [pc, #316]	; (8009b80 <UART_SetConfig+0x340>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d130      	bne.n	8009aa8 <UART_SetConfig+0x268>
 8009a46:	4b4c      	ldr	r3, [pc, #304]	; (8009b78 <UART_SetConfig+0x338>)
 8009a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a4a:	f003 0307 	and.w	r3, r3, #7
 8009a4e:	2b05      	cmp	r3, #5
 8009a50:	d826      	bhi.n	8009aa0 <UART_SetConfig+0x260>
 8009a52:	a201      	add	r2, pc, #4	; (adr r2, 8009a58 <UART_SetConfig+0x218>)
 8009a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a58:	08009a71 	.word	0x08009a71
 8009a5c:	08009a79 	.word	0x08009a79
 8009a60:	08009a81 	.word	0x08009a81
 8009a64:	08009a89 	.word	0x08009a89
 8009a68:	08009a91 	.word	0x08009a91
 8009a6c:	08009a99 	.word	0x08009a99
 8009a70:	2300      	movs	r3, #0
 8009a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a76:	e2ba      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009a78:	2304      	movs	r3, #4
 8009a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a7e:	e2b6      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009a80:	2308      	movs	r3, #8
 8009a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a86:	e2b2      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009a88:	2310      	movs	r3, #16
 8009a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a8e:	e2ae      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009a90:	2320      	movs	r3, #32
 8009a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a96:	e2aa      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009a98:	2340      	movs	r3, #64	; 0x40
 8009a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a9e:	e2a6      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009aa0:	2380      	movs	r3, #128	; 0x80
 8009aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aa6:	e2a2      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a35      	ldr	r2, [pc, #212]	; (8009b84 <UART_SetConfig+0x344>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d130      	bne.n	8009b14 <UART_SetConfig+0x2d4>
 8009ab2:	4b31      	ldr	r3, [pc, #196]	; (8009b78 <UART_SetConfig+0x338>)
 8009ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab6:	f003 0307 	and.w	r3, r3, #7
 8009aba:	2b05      	cmp	r3, #5
 8009abc:	d826      	bhi.n	8009b0c <UART_SetConfig+0x2cc>
 8009abe:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <UART_SetConfig+0x284>)
 8009ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac4:	08009add 	.word	0x08009add
 8009ac8:	08009ae5 	.word	0x08009ae5
 8009acc:	08009aed 	.word	0x08009aed
 8009ad0:	08009af5 	.word	0x08009af5
 8009ad4:	08009afd 	.word	0x08009afd
 8009ad8:	08009b05 	.word	0x08009b05
 8009adc:	2300      	movs	r3, #0
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ae2:	e284      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009ae4:	2304      	movs	r3, #4
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aea:	e280      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009aec:	2308      	movs	r3, #8
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009af2:	e27c      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009af4:	2310      	movs	r3, #16
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009afa:	e278      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009afc:	2320      	movs	r3, #32
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b02:	e274      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009b04:	2340      	movs	r3, #64	; 0x40
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b0a:	e270      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009b0c:	2380      	movs	r3, #128	; 0x80
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b12:	e26c      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a1b      	ldr	r2, [pc, #108]	; (8009b88 <UART_SetConfig+0x348>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d142      	bne.n	8009ba4 <UART_SetConfig+0x364>
 8009b1e:	4b16      	ldr	r3, [pc, #88]	; (8009b78 <UART_SetConfig+0x338>)
 8009b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b22:	f003 0307 	and.w	r3, r3, #7
 8009b26:	2b05      	cmp	r3, #5
 8009b28:	d838      	bhi.n	8009b9c <UART_SetConfig+0x35c>
 8009b2a:	a201      	add	r2, pc, #4	; (adr r2, 8009b30 <UART_SetConfig+0x2f0>)
 8009b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b30:	08009b49 	.word	0x08009b49
 8009b34:	08009b51 	.word	0x08009b51
 8009b38:	08009b59 	.word	0x08009b59
 8009b3c:	08009b61 	.word	0x08009b61
 8009b40:	08009b8d 	.word	0x08009b8d
 8009b44:	08009b95 	.word	0x08009b95
 8009b48:	2300      	movs	r3, #0
 8009b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b4e:	e24e      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009b50:	2304      	movs	r3, #4
 8009b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b56:	e24a      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009b58:	2308      	movs	r3, #8
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b5e:	e246      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009b60:	2310      	movs	r3, #16
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b66:	e242      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009b68:	cfff69f3 	.word	0xcfff69f3
 8009b6c:	58000c00 	.word	0x58000c00
 8009b70:	11fff4ff 	.word	0x11fff4ff
 8009b74:	40011000 	.word	0x40011000
 8009b78:	58024400 	.word	0x58024400
 8009b7c:	40004400 	.word	0x40004400
 8009b80:	40004800 	.word	0x40004800
 8009b84:	40004c00 	.word	0x40004c00
 8009b88:	40005000 	.word	0x40005000
 8009b8c:	2320      	movs	r3, #32
 8009b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b92:	e22c      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009b94:	2340      	movs	r3, #64	; 0x40
 8009b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b9a:	e228      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009b9c:	2380      	movs	r3, #128	; 0x80
 8009b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ba2:	e224      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4ab1      	ldr	r2, [pc, #708]	; (8009e70 <UART_SetConfig+0x630>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d176      	bne.n	8009c9c <UART_SetConfig+0x45c>
 8009bae:	4bb1      	ldr	r3, [pc, #708]	; (8009e74 <UART_SetConfig+0x634>)
 8009bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bb6:	2b28      	cmp	r3, #40	; 0x28
 8009bb8:	d86c      	bhi.n	8009c94 <UART_SetConfig+0x454>
 8009bba:	a201      	add	r2, pc, #4	; (adr r2, 8009bc0 <UART_SetConfig+0x380>)
 8009bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc0:	08009c65 	.word	0x08009c65
 8009bc4:	08009c95 	.word	0x08009c95
 8009bc8:	08009c95 	.word	0x08009c95
 8009bcc:	08009c95 	.word	0x08009c95
 8009bd0:	08009c95 	.word	0x08009c95
 8009bd4:	08009c95 	.word	0x08009c95
 8009bd8:	08009c95 	.word	0x08009c95
 8009bdc:	08009c95 	.word	0x08009c95
 8009be0:	08009c6d 	.word	0x08009c6d
 8009be4:	08009c95 	.word	0x08009c95
 8009be8:	08009c95 	.word	0x08009c95
 8009bec:	08009c95 	.word	0x08009c95
 8009bf0:	08009c95 	.word	0x08009c95
 8009bf4:	08009c95 	.word	0x08009c95
 8009bf8:	08009c95 	.word	0x08009c95
 8009bfc:	08009c95 	.word	0x08009c95
 8009c00:	08009c75 	.word	0x08009c75
 8009c04:	08009c95 	.word	0x08009c95
 8009c08:	08009c95 	.word	0x08009c95
 8009c0c:	08009c95 	.word	0x08009c95
 8009c10:	08009c95 	.word	0x08009c95
 8009c14:	08009c95 	.word	0x08009c95
 8009c18:	08009c95 	.word	0x08009c95
 8009c1c:	08009c95 	.word	0x08009c95
 8009c20:	08009c7d 	.word	0x08009c7d
 8009c24:	08009c95 	.word	0x08009c95
 8009c28:	08009c95 	.word	0x08009c95
 8009c2c:	08009c95 	.word	0x08009c95
 8009c30:	08009c95 	.word	0x08009c95
 8009c34:	08009c95 	.word	0x08009c95
 8009c38:	08009c95 	.word	0x08009c95
 8009c3c:	08009c95 	.word	0x08009c95
 8009c40:	08009c85 	.word	0x08009c85
 8009c44:	08009c95 	.word	0x08009c95
 8009c48:	08009c95 	.word	0x08009c95
 8009c4c:	08009c95 	.word	0x08009c95
 8009c50:	08009c95 	.word	0x08009c95
 8009c54:	08009c95 	.word	0x08009c95
 8009c58:	08009c95 	.word	0x08009c95
 8009c5c:	08009c95 	.word	0x08009c95
 8009c60:	08009c8d 	.word	0x08009c8d
 8009c64:	2301      	movs	r3, #1
 8009c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c6a:	e1c0      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009c6c:	2304      	movs	r3, #4
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c72:	e1bc      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009c74:	2308      	movs	r3, #8
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c7a:	e1b8      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009c7c:	2310      	movs	r3, #16
 8009c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c82:	e1b4      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009c84:	2320      	movs	r3, #32
 8009c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c8a:	e1b0      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009c8c:	2340      	movs	r3, #64	; 0x40
 8009c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c92:	e1ac      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009c94:	2380      	movs	r3, #128	; 0x80
 8009c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c9a:	e1a8      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a75      	ldr	r2, [pc, #468]	; (8009e78 <UART_SetConfig+0x638>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d130      	bne.n	8009d08 <UART_SetConfig+0x4c8>
 8009ca6:	4b73      	ldr	r3, [pc, #460]	; (8009e74 <UART_SetConfig+0x634>)
 8009ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009caa:	f003 0307 	and.w	r3, r3, #7
 8009cae:	2b05      	cmp	r3, #5
 8009cb0:	d826      	bhi.n	8009d00 <UART_SetConfig+0x4c0>
 8009cb2:	a201      	add	r2, pc, #4	; (adr r2, 8009cb8 <UART_SetConfig+0x478>)
 8009cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb8:	08009cd1 	.word	0x08009cd1
 8009cbc:	08009cd9 	.word	0x08009cd9
 8009cc0:	08009ce1 	.word	0x08009ce1
 8009cc4:	08009ce9 	.word	0x08009ce9
 8009cc8:	08009cf1 	.word	0x08009cf1
 8009ccc:	08009cf9 	.word	0x08009cf9
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd6:	e18a      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009cd8:	2304      	movs	r3, #4
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cde:	e186      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009ce0:	2308      	movs	r3, #8
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce6:	e182      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009ce8:	2310      	movs	r3, #16
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cee:	e17e      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009cf0:	2320      	movs	r3, #32
 8009cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cf6:	e17a      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009cf8:	2340      	movs	r3, #64	; 0x40
 8009cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cfe:	e176      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009d00:	2380      	movs	r3, #128	; 0x80
 8009d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d06:	e172      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a5b      	ldr	r2, [pc, #364]	; (8009e7c <UART_SetConfig+0x63c>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d130      	bne.n	8009d74 <UART_SetConfig+0x534>
 8009d12:	4b58      	ldr	r3, [pc, #352]	; (8009e74 <UART_SetConfig+0x634>)
 8009d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d16:	f003 0307 	and.w	r3, r3, #7
 8009d1a:	2b05      	cmp	r3, #5
 8009d1c:	d826      	bhi.n	8009d6c <UART_SetConfig+0x52c>
 8009d1e:	a201      	add	r2, pc, #4	; (adr r2, 8009d24 <UART_SetConfig+0x4e4>)
 8009d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d24:	08009d3d 	.word	0x08009d3d
 8009d28:	08009d45 	.word	0x08009d45
 8009d2c:	08009d4d 	.word	0x08009d4d
 8009d30:	08009d55 	.word	0x08009d55
 8009d34:	08009d5d 	.word	0x08009d5d
 8009d38:	08009d65 	.word	0x08009d65
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d42:	e154      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009d44:	2304      	movs	r3, #4
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d4a:	e150      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009d4c:	2308      	movs	r3, #8
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d52:	e14c      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009d54:	2310      	movs	r3, #16
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d5a:	e148      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009d5c:	2320      	movs	r3, #32
 8009d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d62:	e144      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009d64:	2340      	movs	r3, #64	; 0x40
 8009d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d6a:	e140      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009d6c:	2380      	movs	r3, #128	; 0x80
 8009d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d72:	e13c      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a41      	ldr	r2, [pc, #260]	; (8009e80 <UART_SetConfig+0x640>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	f040 8082 	bne.w	8009e84 <UART_SetConfig+0x644>
 8009d80:	4b3c      	ldr	r3, [pc, #240]	; (8009e74 <UART_SetConfig+0x634>)
 8009d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d88:	2b28      	cmp	r3, #40	; 0x28
 8009d8a:	d86d      	bhi.n	8009e68 <UART_SetConfig+0x628>
 8009d8c:	a201      	add	r2, pc, #4	; (adr r2, 8009d94 <UART_SetConfig+0x554>)
 8009d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d92:	bf00      	nop
 8009d94:	08009e39 	.word	0x08009e39
 8009d98:	08009e69 	.word	0x08009e69
 8009d9c:	08009e69 	.word	0x08009e69
 8009da0:	08009e69 	.word	0x08009e69
 8009da4:	08009e69 	.word	0x08009e69
 8009da8:	08009e69 	.word	0x08009e69
 8009dac:	08009e69 	.word	0x08009e69
 8009db0:	08009e69 	.word	0x08009e69
 8009db4:	08009e41 	.word	0x08009e41
 8009db8:	08009e69 	.word	0x08009e69
 8009dbc:	08009e69 	.word	0x08009e69
 8009dc0:	08009e69 	.word	0x08009e69
 8009dc4:	08009e69 	.word	0x08009e69
 8009dc8:	08009e69 	.word	0x08009e69
 8009dcc:	08009e69 	.word	0x08009e69
 8009dd0:	08009e69 	.word	0x08009e69
 8009dd4:	08009e49 	.word	0x08009e49
 8009dd8:	08009e69 	.word	0x08009e69
 8009ddc:	08009e69 	.word	0x08009e69
 8009de0:	08009e69 	.word	0x08009e69
 8009de4:	08009e69 	.word	0x08009e69
 8009de8:	08009e69 	.word	0x08009e69
 8009dec:	08009e69 	.word	0x08009e69
 8009df0:	08009e69 	.word	0x08009e69
 8009df4:	08009e51 	.word	0x08009e51
 8009df8:	08009e69 	.word	0x08009e69
 8009dfc:	08009e69 	.word	0x08009e69
 8009e00:	08009e69 	.word	0x08009e69
 8009e04:	08009e69 	.word	0x08009e69
 8009e08:	08009e69 	.word	0x08009e69
 8009e0c:	08009e69 	.word	0x08009e69
 8009e10:	08009e69 	.word	0x08009e69
 8009e14:	08009e59 	.word	0x08009e59
 8009e18:	08009e69 	.word	0x08009e69
 8009e1c:	08009e69 	.word	0x08009e69
 8009e20:	08009e69 	.word	0x08009e69
 8009e24:	08009e69 	.word	0x08009e69
 8009e28:	08009e69 	.word	0x08009e69
 8009e2c:	08009e69 	.word	0x08009e69
 8009e30:	08009e69 	.word	0x08009e69
 8009e34:	08009e61 	.word	0x08009e61
 8009e38:	2301      	movs	r3, #1
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e3e:	e0d6      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009e40:	2304      	movs	r3, #4
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e46:	e0d2      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009e48:	2308      	movs	r3, #8
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e4e:	e0ce      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009e50:	2310      	movs	r3, #16
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e56:	e0ca      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009e58:	2320      	movs	r3, #32
 8009e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e5e:	e0c6      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009e60:	2340      	movs	r3, #64	; 0x40
 8009e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e66:	e0c2      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009e68:	2380      	movs	r3, #128	; 0x80
 8009e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e6e:	e0be      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009e70:	40011400 	.word	0x40011400
 8009e74:	58024400 	.word	0x58024400
 8009e78:	40007800 	.word	0x40007800
 8009e7c:	40007c00 	.word	0x40007c00
 8009e80:	40011800 	.word	0x40011800
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4aad      	ldr	r2, [pc, #692]	; (800a140 <UART_SetConfig+0x900>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d176      	bne.n	8009f7c <UART_SetConfig+0x73c>
 8009e8e:	4bad      	ldr	r3, [pc, #692]	; (800a144 <UART_SetConfig+0x904>)
 8009e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e96:	2b28      	cmp	r3, #40	; 0x28
 8009e98:	d86c      	bhi.n	8009f74 <UART_SetConfig+0x734>
 8009e9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ea0 <UART_SetConfig+0x660>)
 8009e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea0:	08009f45 	.word	0x08009f45
 8009ea4:	08009f75 	.word	0x08009f75
 8009ea8:	08009f75 	.word	0x08009f75
 8009eac:	08009f75 	.word	0x08009f75
 8009eb0:	08009f75 	.word	0x08009f75
 8009eb4:	08009f75 	.word	0x08009f75
 8009eb8:	08009f75 	.word	0x08009f75
 8009ebc:	08009f75 	.word	0x08009f75
 8009ec0:	08009f4d 	.word	0x08009f4d
 8009ec4:	08009f75 	.word	0x08009f75
 8009ec8:	08009f75 	.word	0x08009f75
 8009ecc:	08009f75 	.word	0x08009f75
 8009ed0:	08009f75 	.word	0x08009f75
 8009ed4:	08009f75 	.word	0x08009f75
 8009ed8:	08009f75 	.word	0x08009f75
 8009edc:	08009f75 	.word	0x08009f75
 8009ee0:	08009f55 	.word	0x08009f55
 8009ee4:	08009f75 	.word	0x08009f75
 8009ee8:	08009f75 	.word	0x08009f75
 8009eec:	08009f75 	.word	0x08009f75
 8009ef0:	08009f75 	.word	0x08009f75
 8009ef4:	08009f75 	.word	0x08009f75
 8009ef8:	08009f75 	.word	0x08009f75
 8009efc:	08009f75 	.word	0x08009f75
 8009f00:	08009f5d 	.word	0x08009f5d
 8009f04:	08009f75 	.word	0x08009f75
 8009f08:	08009f75 	.word	0x08009f75
 8009f0c:	08009f75 	.word	0x08009f75
 8009f10:	08009f75 	.word	0x08009f75
 8009f14:	08009f75 	.word	0x08009f75
 8009f18:	08009f75 	.word	0x08009f75
 8009f1c:	08009f75 	.word	0x08009f75
 8009f20:	08009f65 	.word	0x08009f65
 8009f24:	08009f75 	.word	0x08009f75
 8009f28:	08009f75 	.word	0x08009f75
 8009f2c:	08009f75 	.word	0x08009f75
 8009f30:	08009f75 	.word	0x08009f75
 8009f34:	08009f75 	.word	0x08009f75
 8009f38:	08009f75 	.word	0x08009f75
 8009f3c:	08009f75 	.word	0x08009f75
 8009f40:	08009f6d 	.word	0x08009f6d
 8009f44:	2301      	movs	r3, #1
 8009f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f4a:	e050      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009f4c:	2304      	movs	r3, #4
 8009f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f52:	e04c      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009f54:	2308      	movs	r3, #8
 8009f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f5a:	e048      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009f5c:	2310      	movs	r3, #16
 8009f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f62:	e044      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009f64:	2320      	movs	r3, #32
 8009f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f6a:	e040      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009f6c:	2340      	movs	r3, #64	; 0x40
 8009f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f72:	e03c      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009f74:	2380      	movs	r3, #128	; 0x80
 8009f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f7a:	e038      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a71      	ldr	r2, [pc, #452]	; (800a148 <UART_SetConfig+0x908>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d130      	bne.n	8009fe8 <UART_SetConfig+0x7a8>
 8009f86:	4b6f      	ldr	r3, [pc, #444]	; (800a144 <UART_SetConfig+0x904>)
 8009f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f8a:	f003 0307 	and.w	r3, r3, #7
 8009f8e:	2b05      	cmp	r3, #5
 8009f90:	d826      	bhi.n	8009fe0 <UART_SetConfig+0x7a0>
 8009f92:	a201      	add	r2, pc, #4	; (adr r2, 8009f98 <UART_SetConfig+0x758>)
 8009f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f98:	08009fb1 	.word	0x08009fb1
 8009f9c:	08009fb9 	.word	0x08009fb9
 8009fa0:	08009fc1 	.word	0x08009fc1
 8009fa4:	08009fc9 	.word	0x08009fc9
 8009fa8:	08009fd1 	.word	0x08009fd1
 8009fac:	08009fd9 	.word	0x08009fd9
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fb6:	e01a      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009fb8:	2304      	movs	r3, #4
 8009fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fbe:	e016      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009fc0:	2308      	movs	r3, #8
 8009fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fc6:	e012      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009fc8:	2310      	movs	r3, #16
 8009fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fce:	e00e      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009fd0:	2320      	movs	r3, #32
 8009fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fd6:	e00a      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009fd8:	2340      	movs	r3, #64	; 0x40
 8009fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fde:	e006      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009fe0:	2380      	movs	r3, #128	; 0x80
 8009fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fe6:	e002      	b.n	8009fee <UART_SetConfig+0x7ae>
 8009fe8:	2380      	movs	r3, #128	; 0x80
 8009fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a55      	ldr	r2, [pc, #340]	; (800a148 <UART_SetConfig+0x908>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	f040 80f8 	bne.w	800a1ea <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ffa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009ffe:	2b20      	cmp	r3, #32
 800a000:	dc46      	bgt.n	800a090 <UART_SetConfig+0x850>
 800a002:	2b02      	cmp	r3, #2
 800a004:	db75      	blt.n	800a0f2 <UART_SetConfig+0x8b2>
 800a006:	3b02      	subs	r3, #2
 800a008:	2b1e      	cmp	r3, #30
 800a00a:	d872      	bhi.n	800a0f2 <UART_SetConfig+0x8b2>
 800a00c:	a201      	add	r2, pc, #4	; (adr r2, 800a014 <UART_SetConfig+0x7d4>)
 800a00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a012:	bf00      	nop
 800a014:	0800a097 	.word	0x0800a097
 800a018:	0800a0f3 	.word	0x0800a0f3
 800a01c:	0800a09f 	.word	0x0800a09f
 800a020:	0800a0f3 	.word	0x0800a0f3
 800a024:	0800a0f3 	.word	0x0800a0f3
 800a028:	0800a0f3 	.word	0x0800a0f3
 800a02c:	0800a0af 	.word	0x0800a0af
 800a030:	0800a0f3 	.word	0x0800a0f3
 800a034:	0800a0f3 	.word	0x0800a0f3
 800a038:	0800a0f3 	.word	0x0800a0f3
 800a03c:	0800a0f3 	.word	0x0800a0f3
 800a040:	0800a0f3 	.word	0x0800a0f3
 800a044:	0800a0f3 	.word	0x0800a0f3
 800a048:	0800a0f3 	.word	0x0800a0f3
 800a04c:	0800a0bf 	.word	0x0800a0bf
 800a050:	0800a0f3 	.word	0x0800a0f3
 800a054:	0800a0f3 	.word	0x0800a0f3
 800a058:	0800a0f3 	.word	0x0800a0f3
 800a05c:	0800a0f3 	.word	0x0800a0f3
 800a060:	0800a0f3 	.word	0x0800a0f3
 800a064:	0800a0f3 	.word	0x0800a0f3
 800a068:	0800a0f3 	.word	0x0800a0f3
 800a06c:	0800a0f3 	.word	0x0800a0f3
 800a070:	0800a0f3 	.word	0x0800a0f3
 800a074:	0800a0f3 	.word	0x0800a0f3
 800a078:	0800a0f3 	.word	0x0800a0f3
 800a07c:	0800a0f3 	.word	0x0800a0f3
 800a080:	0800a0f3 	.word	0x0800a0f3
 800a084:	0800a0f3 	.word	0x0800a0f3
 800a088:	0800a0f3 	.word	0x0800a0f3
 800a08c:	0800a0e5 	.word	0x0800a0e5
 800a090:	2b40      	cmp	r3, #64	; 0x40
 800a092:	d02a      	beq.n	800a0ea <UART_SetConfig+0x8aa>
 800a094:	e02d      	b.n	800a0f2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a096:	f7fd f9ab 	bl	80073f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a09a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a09c:	e02f      	b.n	800a0fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a09e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fd f9ba 	bl	800741c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0ac:	e027      	b.n	800a0fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0ae:	f107 0318 	add.w	r3, r7, #24
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7fd fb06 	bl	80076c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0bc:	e01f      	b.n	800a0fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0be:	4b21      	ldr	r3, [pc, #132]	; (800a144 <UART_SetConfig+0x904>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f003 0320 	and.w	r3, r3, #32
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d009      	beq.n	800a0de <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0ca:	4b1e      	ldr	r3, [pc, #120]	; (800a144 <UART_SetConfig+0x904>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	08db      	lsrs	r3, r3, #3
 800a0d0:	f003 0303 	and.w	r3, r3, #3
 800a0d4:	4a1d      	ldr	r2, [pc, #116]	; (800a14c <UART_SetConfig+0x90c>)
 800a0d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a0da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0dc:	e00f      	b.n	800a0fe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a0de:	4b1b      	ldr	r3, [pc, #108]	; (800a14c <UART_SetConfig+0x90c>)
 800a0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0e2:	e00c      	b.n	800a0fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0e4:	4b1a      	ldr	r3, [pc, #104]	; (800a150 <UART_SetConfig+0x910>)
 800a0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0e8:	e009      	b.n	800a0fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0f0:	e005      	b.n	800a0fe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a0fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a100:	2b00      	cmp	r3, #0
 800a102:	f000 81ee 	beq.w	800a4e2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10a:	4a12      	ldr	r2, [pc, #72]	; (800a154 <UART_SetConfig+0x914>)
 800a10c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a110:	461a      	mov	r2, r3
 800a112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a114:	fbb3 f3f2 	udiv	r3, r3, r2
 800a118:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	685a      	ldr	r2, [r3, #4]
 800a11e:	4613      	mov	r3, r2
 800a120:	005b      	lsls	r3, r3, #1
 800a122:	4413      	add	r3, r2
 800a124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a126:	429a      	cmp	r2, r3
 800a128:	d305      	bcc.n	800a136 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a132:	429a      	cmp	r2, r3
 800a134:	d910      	bls.n	800a158 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a13c:	e1d1      	b.n	800a4e2 <UART_SetConfig+0xca2>
 800a13e:	bf00      	nop
 800a140:	40011c00 	.word	0x40011c00
 800a144:	58024400 	.word	0x58024400
 800a148:	58000c00 	.word	0x58000c00
 800a14c:	03d09000 	.word	0x03d09000
 800a150:	003d0900 	.word	0x003d0900
 800a154:	0800abdc 	.word	0x0800abdc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a15a:	2200      	movs	r2, #0
 800a15c:	60bb      	str	r3, [r7, #8]
 800a15e:	60fa      	str	r2, [r7, #12]
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a164:	4ac0      	ldr	r2, [pc, #768]	; (800a468 <UART_SetConfig+0xc28>)
 800a166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	2200      	movs	r2, #0
 800a16e:	603b      	str	r3, [r7, #0]
 800a170:	607a      	str	r2, [r7, #4]
 800a172:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a176:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a17a:	f7f6 f8b7 	bl	80002ec <__aeabi_uldivmod>
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	4610      	mov	r0, r2
 800a184:	4619      	mov	r1, r3
 800a186:	f04f 0200 	mov.w	r2, #0
 800a18a:	f04f 0300 	mov.w	r3, #0
 800a18e:	020b      	lsls	r3, r1, #8
 800a190:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a194:	0202      	lsls	r2, r0, #8
 800a196:	6979      	ldr	r1, [r7, #20]
 800a198:	6849      	ldr	r1, [r1, #4]
 800a19a:	0849      	lsrs	r1, r1, #1
 800a19c:	2000      	movs	r0, #0
 800a19e:	460c      	mov	r4, r1
 800a1a0:	4605      	mov	r5, r0
 800a1a2:	eb12 0804 	adds.w	r8, r2, r4
 800a1a6:	eb43 0905 	adc.w	r9, r3, r5
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	469a      	mov	sl, r3
 800a1b2:	4693      	mov	fp, r2
 800a1b4:	4652      	mov	r2, sl
 800a1b6:	465b      	mov	r3, fp
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	4649      	mov	r1, r9
 800a1bc:	f7f6 f896 	bl	80002ec <__aeabi_uldivmod>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1ce:	d308      	bcc.n	800a1e2 <UART_SetConfig+0x9a2>
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1d6:	d204      	bcs.n	800a1e2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1de:	60da      	str	r2, [r3, #12]
 800a1e0:	e17f      	b.n	800a4e2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a1e8:	e17b      	b.n	800a4e2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	69db      	ldr	r3, [r3, #28]
 800a1ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1f2:	f040 80bd 	bne.w	800a370 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a1f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a1fa:	2b20      	cmp	r3, #32
 800a1fc:	dc48      	bgt.n	800a290 <UART_SetConfig+0xa50>
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	db7b      	blt.n	800a2fa <UART_SetConfig+0xaba>
 800a202:	2b20      	cmp	r3, #32
 800a204:	d879      	bhi.n	800a2fa <UART_SetConfig+0xaba>
 800a206:	a201      	add	r2, pc, #4	; (adr r2, 800a20c <UART_SetConfig+0x9cc>)
 800a208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20c:	0800a297 	.word	0x0800a297
 800a210:	0800a29f 	.word	0x0800a29f
 800a214:	0800a2fb 	.word	0x0800a2fb
 800a218:	0800a2fb 	.word	0x0800a2fb
 800a21c:	0800a2a7 	.word	0x0800a2a7
 800a220:	0800a2fb 	.word	0x0800a2fb
 800a224:	0800a2fb 	.word	0x0800a2fb
 800a228:	0800a2fb 	.word	0x0800a2fb
 800a22c:	0800a2b7 	.word	0x0800a2b7
 800a230:	0800a2fb 	.word	0x0800a2fb
 800a234:	0800a2fb 	.word	0x0800a2fb
 800a238:	0800a2fb 	.word	0x0800a2fb
 800a23c:	0800a2fb 	.word	0x0800a2fb
 800a240:	0800a2fb 	.word	0x0800a2fb
 800a244:	0800a2fb 	.word	0x0800a2fb
 800a248:	0800a2fb 	.word	0x0800a2fb
 800a24c:	0800a2c7 	.word	0x0800a2c7
 800a250:	0800a2fb 	.word	0x0800a2fb
 800a254:	0800a2fb 	.word	0x0800a2fb
 800a258:	0800a2fb 	.word	0x0800a2fb
 800a25c:	0800a2fb 	.word	0x0800a2fb
 800a260:	0800a2fb 	.word	0x0800a2fb
 800a264:	0800a2fb 	.word	0x0800a2fb
 800a268:	0800a2fb 	.word	0x0800a2fb
 800a26c:	0800a2fb 	.word	0x0800a2fb
 800a270:	0800a2fb 	.word	0x0800a2fb
 800a274:	0800a2fb 	.word	0x0800a2fb
 800a278:	0800a2fb 	.word	0x0800a2fb
 800a27c:	0800a2fb 	.word	0x0800a2fb
 800a280:	0800a2fb 	.word	0x0800a2fb
 800a284:	0800a2fb 	.word	0x0800a2fb
 800a288:	0800a2fb 	.word	0x0800a2fb
 800a28c:	0800a2ed 	.word	0x0800a2ed
 800a290:	2b40      	cmp	r3, #64	; 0x40
 800a292:	d02e      	beq.n	800a2f2 <UART_SetConfig+0xab2>
 800a294:	e031      	b.n	800a2fa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a296:	f7fb f9e9 	bl	800566c <HAL_RCC_GetPCLK1Freq>
 800a29a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a29c:	e033      	b.n	800a306 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a29e:	f7fb f9fb 	bl	8005698 <HAL_RCC_GetPCLK2Freq>
 800a2a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a2a4:	e02f      	b.n	800a306 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7fd f8b6 	bl	800741c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2b4:	e027      	b.n	800a306 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2b6:	f107 0318 	add.w	r3, r7, #24
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fd fa02 	bl	80076c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2c4:	e01f      	b.n	800a306 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2c6:	4b69      	ldr	r3, [pc, #420]	; (800a46c <UART_SetConfig+0xc2c>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f003 0320 	and.w	r3, r3, #32
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d009      	beq.n	800a2e6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2d2:	4b66      	ldr	r3, [pc, #408]	; (800a46c <UART_SetConfig+0xc2c>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	08db      	lsrs	r3, r3, #3
 800a2d8:	f003 0303 	and.w	r3, r3, #3
 800a2dc:	4a64      	ldr	r2, [pc, #400]	; (800a470 <UART_SetConfig+0xc30>)
 800a2de:	fa22 f303 	lsr.w	r3, r2, r3
 800a2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2e4:	e00f      	b.n	800a306 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a2e6:	4b62      	ldr	r3, [pc, #392]	; (800a470 <UART_SetConfig+0xc30>)
 800a2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2ea:	e00c      	b.n	800a306 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2ec:	4b61      	ldr	r3, [pc, #388]	; (800a474 <UART_SetConfig+0xc34>)
 800a2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2f0:	e009      	b.n	800a306 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2f8:	e005      	b.n	800a306 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a304:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f000 80ea 	beq.w	800a4e2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a312:	4a55      	ldr	r2, [pc, #340]	; (800a468 <UART_SetConfig+0xc28>)
 800a314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a318:	461a      	mov	r2, r3
 800a31a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a31c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a320:	005a      	lsls	r2, r3, #1
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	085b      	lsrs	r3, r3, #1
 800a328:	441a      	add	r2, r3
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a332:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a336:	2b0f      	cmp	r3, #15
 800a338:	d916      	bls.n	800a368 <UART_SetConfig+0xb28>
 800a33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a340:	d212      	bcs.n	800a368 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a344:	b29b      	uxth	r3, r3
 800a346:	f023 030f 	bic.w	r3, r3, #15
 800a34a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34e:	085b      	lsrs	r3, r3, #1
 800a350:	b29b      	uxth	r3, r3
 800a352:	f003 0307 	and.w	r3, r3, #7
 800a356:	b29a      	uxth	r2, r3
 800a358:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a35a:	4313      	orrs	r3, r2
 800a35c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a364:	60da      	str	r2, [r3, #12]
 800a366:	e0bc      	b.n	800a4e2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a36e:	e0b8      	b.n	800a4e2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a370:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a374:	2b20      	cmp	r3, #32
 800a376:	dc4b      	bgt.n	800a410 <UART_SetConfig+0xbd0>
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f2c0 8087 	blt.w	800a48c <UART_SetConfig+0xc4c>
 800a37e:	2b20      	cmp	r3, #32
 800a380:	f200 8084 	bhi.w	800a48c <UART_SetConfig+0xc4c>
 800a384:	a201      	add	r2, pc, #4	; (adr r2, 800a38c <UART_SetConfig+0xb4c>)
 800a386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38a:	bf00      	nop
 800a38c:	0800a417 	.word	0x0800a417
 800a390:	0800a41f 	.word	0x0800a41f
 800a394:	0800a48d 	.word	0x0800a48d
 800a398:	0800a48d 	.word	0x0800a48d
 800a39c:	0800a427 	.word	0x0800a427
 800a3a0:	0800a48d 	.word	0x0800a48d
 800a3a4:	0800a48d 	.word	0x0800a48d
 800a3a8:	0800a48d 	.word	0x0800a48d
 800a3ac:	0800a437 	.word	0x0800a437
 800a3b0:	0800a48d 	.word	0x0800a48d
 800a3b4:	0800a48d 	.word	0x0800a48d
 800a3b8:	0800a48d 	.word	0x0800a48d
 800a3bc:	0800a48d 	.word	0x0800a48d
 800a3c0:	0800a48d 	.word	0x0800a48d
 800a3c4:	0800a48d 	.word	0x0800a48d
 800a3c8:	0800a48d 	.word	0x0800a48d
 800a3cc:	0800a447 	.word	0x0800a447
 800a3d0:	0800a48d 	.word	0x0800a48d
 800a3d4:	0800a48d 	.word	0x0800a48d
 800a3d8:	0800a48d 	.word	0x0800a48d
 800a3dc:	0800a48d 	.word	0x0800a48d
 800a3e0:	0800a48d 	.word	0x0800a48d
 800a3e4:	0800a48d 	.word	0x0800a48d
 800a3e8:	0800a48d 	.word	0x0800a48d
 800a3ec:	0800a48d 	.word	0x0800a48d
 800a3f0:	0800a48d 	.word	0x0800a48d
 800a3f4:	0800a48d 	.word	0x0800a48d
 800a3f8:	0800a48d 	.word	0x0800a48d
 800a3fc:	0800a48d 	.word	0x0800a48d
 800a400:	0800a48d 	.word	0x0800a48d
 800a404:	0800a48d 	.word	0x0800a48d
 800a408:	0800a48d 	.word	0x0800a48d
 800a40c:	0800a47f 	.word	0x0800a47f
 800a410:	2b40      	cmp	r3, #64	; 0x40
 800a412:	d037      	beq.n	800a484 <UART_SetConfig+0xc44>
 800a414:	e03a      	b.n	800a48c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a416:	f7fb f929 	bl	800566c <HAL_RCC_GetPCLK1Freq>
 800a41a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a41c:	e03c      	b.n	800a498 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a41e:	f7fb f93b 	bl	8005698 <HAL_RCC_GetPCLK2Freq>
 800a422:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a424:	e038      	b.n	800a498 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fc fff6 	bl	800741c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a434:	e030      	b.n	800a498 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a436:	f107 0318 	add.w	r3, r7, #24
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fd f942 	bl	80076c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a444:	e028      	b.n	800a498 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a446:	4b09      	ldr	r3, [pc, #36]	; (800a46c <UART_SetConfig+0xc2c>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f003 0320 	and.w	r3, r3, #32
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d012      	beq.n	800a478 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a452:	4b06      	ldr	r3, [pc, #24]	; (800a46c <UART_SetConfig+0xc2c>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	08db      	lsrs	r3, r3, #3
 800a458:	f003 0303 	and.w	r3, r3, #3
 800a45c:	4a04      	ldr	r2, [pc, #16]	; (800a470 <UART_SetConfig+0xc30>)
 800a45e:	fa22 f303 	lsr.w	r3, r2, r3
 800a462:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a464:	e018      	b.n	800a498 <UART_SetConfig+0xc58>
 800a466:	bf00      	nop
 800a468:	0800abdc 	.word	0x0800abdc
 800a46c:	58024400 	.word	0x58024400
 800a470:	03d09000 	.word	0x03d09000
 800a474:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a478:	4b24      	ldr	r3, [pc, #144]	; (800a50c <UART_SetConfig+0xccc>)
 800a47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a47c:	e00c      	b.n	800a498 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a47e:	4b24      	ldr	r3, [pc, #144]	; (800a510 <UART_SetConfig+0xcd0>)
 800a480:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a482:	e009      	b.n	800a498 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a48a:	e005      	b.n	800a498 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a48c:	2300      	movs	r3, #0
 800a48e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a496:	bf00      	nop
    }

    if (pclk != 0U)
 800a498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d021      	beq.n	800a4e2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a2:	4a1c      	ldr	r2, [pc, #112]	; (800a514 <UART_SetConfig+0xcd4>)
 800a4a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ac:	fbb3 f2f2 	udiv	r2, r3, r2
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	085b      	lsrs	r3, r3, #1
 800a4b6:	441a      	add	r2, r3
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4c0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c4:	2b0f      	cmp	r3, #15
 800a4c6:	d909      	bls.n	800a4dc <UART_SetConfig+0xc9c>
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4ce:	d205      	bcs.n	800a4dc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	60da      	str	r2, [r3, #12]
 800a4da:	e002      	b.n	800a4e2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a4fe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a502:	4618      	mov	r0, r3
 800a504:	3748      	adds	r7, #72	; 0x48
 800a506:	46bd      	mov	sp, r7
 800a508:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a50c:	03d09000 	.word	0x03d09000
 800a510:	003d0900 	.word	0x003d0900
 800a514:	0800abdc 	.word	0x0800abdc

0800a518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a524:	f003 0301 	and.w	r3, r3, #1
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00a      	beq.n	800a542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	430a      	orrs	r2, r1
 800a540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a546:	f003 0302 	and.w	r3, r3, #2
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00a      	beq.n	800a564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	430a      	orrs	r2, r1
 800a562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a568:	f003 0304 	and.w	r3, r3, #4
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d00a      	beq.n	800a586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	430a      	orrs	r2, r1
 800a584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58a:	f003 0308 	and.w	r3, r3, #8
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00a      	beq.n	800a5a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	430a      	orrs	r2, r1
 800a5a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ac:	f003 0310 	and.w	r3, r3, #16
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00a      	beq.n	800a5ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	430a      	orrs	r2, r1
 800a5c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ce:	f003 0320 	and.w	r3, r3, #32
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00a      	beq.n	800a5ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	430a      	orrs	r2, r1
 800a5ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d01a      	beq.n	800a62e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	430a      	orrs	r2, r1
 800a60c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a616:	d10a      	bne.n	800a62e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	430a      	orrs	r2, r1
 800a62c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00a      	beq.n	800a650 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	430a      	orrs	r2, r1
 800a64e:	605a      	str	r2, [r3, #4]
  }
}
 800a650:	bf00      	nop
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b098      	sub	sp, #96	; 0x60
 800a660:	af02      	add	r7, sp, #8
 800a662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a66c:	f7f7 f87e 	bl	800176c <HAL_GetTick>
 800a670:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 0308 	and.w	r3, r3, #8
 800a67c:	2b08      	cmp	r3, #8
 800a67e:	d12f      	bne.n	800a6e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a688:	2200      	movs	r2, #0
 800a68a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f88e 	bl	800a7b0 <UART_WaitOnFlagUntilTimeout>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d022      	beq.n	800a6e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a2:	e853 3f00 	ldrex	r3, [r3]
 800a6a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6ae:	653b      	str	r3, [r7, #80]	; 0x50
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6b8:	647b      	str	r3, [r7, #68]	; 0x44
 800a6ba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a6be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6c0:	e841 2300 	strex	r3, r2, [r1]
 800a6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a6c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d1e6      	bne.n	800a69a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2220      	movs	r2, #32
 800a6d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e063      	b.n	800a7a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 0304 	and.w	r3, r3, #4
 800a6ea:	2b04      	cmp	r3, #4
 800a6ec:	d149      	bne.n	800a782 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6f2:	9300      	str	r3, [sp, #0]
 800a6f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f857 	bl	800a7b0 <UART_WaitOnFlagUntilTimeout>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d03c      	beq.n	800a782 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a710:	e853 3f00 	ldrex	r3, [r3]
 800a714:	623b      	str	r3, [r7, #32]
   return(result);
 800a716:	6a3b      	ldr	r3, [r7, #32]
 800a718:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a71c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	461a      	mov	r2, r3
 800a724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a726:	633b      	str	r3, [r7, #48]	; 0x30
 800a728:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a72a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a72c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a72e:	e841 2300 	strex	r3, r2, [r1]
 800a732:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a736:	2b00      	cmp	r3, #0
 800a738:	d1e6      	bne.n	800a708 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	3308      	adds	r3, #8
 800a740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	e853 3f00 	ldrex	r3, [r3]
 800a748:	60fb      	str	r3, [r7, #12]
   return(result);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f023 0301 	bic.w	r3, r3, #1
 800a750:	64bb      	str	r3, [r7, #72]	; 0x48
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	3308      	adds	r3, #8
 800a758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a75a:	61fa      	str	r2, [r7, #28]
 800a75c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75e:	69b9      	ldr	r1, [r7, #24]
 800a760:	69fa      	ldr	r2, [r7, #28]
 800a762:	e841 2300 	strex	r3, r2, [r1]
 800a766:	617b      	str	r3, [r7, #20]
   return(result);
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1e5      	bne.n	800a73a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2220      	movs	r2, #32
 800a772:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a77e:	2303      	movs	r3, #3
 800a780:	e012      	b.n	800a7a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2220      	movs	r2, #32
 800a786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2220      	movs	r2, #32
 800a78e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3758      	adds	r7, #88	; 0x58
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	603b      	str	r3, [r7, #0]
 800a7bc:	4613      	mov	r3, r2
 800a7be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7c0:	e049      	b.n	800a856 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7c8:	d045      	beq.n	800a856 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7ca:	f7f6 ffcf 	bl	800176c <HAL_GetTick>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	1ad3      	subs	r3, r2, r3
 800a7d4:	69ba      	ldr	r2, [r7, #24]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d302      	bcc.n	800a7e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d101      	bne.n	800a7e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a7e0:	2303      	movs	r3, #3
 800a7e2:	e048      	b.n	800a876 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f003 0304 	and.w	r3, r3, #4
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d031      	beq.n	800a856 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	69db      	ldr	r3, [r3, #28]
 800a7f8:	f003 0308 	and.w	r3, r3, #8
 800a7fc:	2b08      	cmp	r3, #8
 800a7fe:	d110      	bne.n	800a822 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2208      	movs	r2, #8
 800a806:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f000 f839 	bl	800a880 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2208      	movs	r2, #8
 800a812:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	e029      	b.n	800a876 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	69db      	ldr	r3, [r3, #28]
 800a828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a82c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a830:	d111      	bne.n	800a856 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a83a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f000 f81f 	bl	800a880 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2220      	movs	r2, #32
 800a846:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a852:	2303      	movs	r3, #3
 800a854:	e00f      	b.n	800a876 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	69da      	ldr	r2, [r3, #28]
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	4013      	ands	r3, r2
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	429a      	cmp	r2, r3
 800a864:	bf0c      	ite	eq
 800a866:	2301      	moveq	r3, #1
 800a868:	2300      	movne	r3, #0
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	461a      	mov	r2, r3
 800a86e:	79fb      	ldrb	r3, [r7, #7]
 800a870:	429a      	cmp	r2, r3
 800a872:	d0a6      	beq.n	800a7c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
	...

0800a880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a880:	b480      	push	{r7}
 800a882:	b095      	sub	sp, #84	; 0x54
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a890:	e853 3f00 	ldrex	r3, [r3]
 800a894:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a898:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a89c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8a6:	643b      	str	r3, [r7, #64]	; 0x40
 800a8a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a8ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a8ae:	e841 2300 	strex	r3, r2, [r1]
 800a8b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1e6      	bne.n	800a888 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	3308      	adds	r3, #8
 800a8c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c2:	6a3b      	ldr	r3, [r7, #32]
 800a8c4:	e853 3f00 	ldrex	r3, [r3]
 800a8c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8ca:	69fa      	ldr	r2, [r7, #28]
 800a8cc:	4b1e      	ldr	r3, [pc, #120]	; (800a948 <UART_EndRxTransfer+0xc8>)
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	3308      	adds	r3, #8
 800a8d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8da:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a8dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8e2:	e841 2300 	strex	r3, r2, [r1]
 800a8e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1e5      	bne.n	800a8ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d118      	bne.n	800a928 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	e853 3f00 	ldrex	r3, [r3]
 800a902:	60bb      	str	r3, [r7, #8]
   return(result);
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	f023 0310 	bic.w	r3, r3, #16
 800a90a:	647b      	str	r3, [r7, #68]	; 0x44
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	461a      	mov	r2, r3
 800a912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a914:	61bb      	str	r3, [r7, #24]
 800a916:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a918:	6979      	ldr	r1, [r7, #20]
 800a91a:	69ba      	ldr	r2, [r7, #24]
 800a91c:	e841 2300 	strex	r3, r2, [r1]
 800a920:	613b      	str	r3, [r7, #16]
   return(result);
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1e6      	bne.n	800a8f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2220      	movs	r2, #32
 800a92c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a93c:	bf00      	nop
 800a93e:	3754      	adds	r7, #84	; 0x54
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	effffffe 	.word	0xeffffffe

0800a94c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d101      	bne.n	800a962 <HAL_UARTEx_DisableFifoMode+0x16>
 800a95e:	2302      	movs	r3, #2
 800a960:	e027      	b.n	800a9b2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2224      	movs	r2, #36	; 0x24
 800a96e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f022 0201 	bic.w	r2, r2, #1
 800a988:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a990:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2220      	movs	r2, #32
 800a9a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3714      	adds	r7, #20
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr

0800a9be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d101      	bne.n	800a9d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	e02d      	b.n	800aa32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2224      	movs	r2, #36	; 0x24
 800a9e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f022 0201 	bic.w	r2, r2, #1
 800a9fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 f850 	bl	800aab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2220      	movs	r2, #32
 800aa24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d101      	bne.n	800aa52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa4e:	2302      	movs	r3, #2
 800aa50:	e02d      	b.n	800aaae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2201      	movs	r2, #1
 800aa56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2224      	movs	r2, #36	; 0x24
 800aa5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f022 0201 	bic.w	r2, r2, #1
 800aa78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	430a      	orrs	r2, r1
 800aa8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f812 	bl	800aab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2220      	movs	r2, #32
 800aaa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
	...

0800aab8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d108      	bne.n	800aada <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aad8:	e031      	b.n	800ab3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aada:	2310      	movs	r3, #16
 800aadc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aade:	2310      	movs	r3, #16
 800aae0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	0e5b      	lsrs	r3, r3, #25
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	f003 0307 	and.w	r3, r3, #7
 800aaf0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	0f5b      	lsrs	r3, r3, #29
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	f003 0307 	and.w	r3, r3, #7
 800ab00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab02:	7bbb      	ldrb	r3, [r7, #14]
 800ab04:	7b3a      	ldrb	r2, [r7, #12]
 800ab06:	4911      	ldr	r1, [pc, #68]	; (800ab4c <UARTEx_SetNbDataToProcess+0x94>)
 800ab08:	5c8a      	ldrb	r2, [r1, r2]
 800ab0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab0e:	7b3a      	ldrb	r2, [r7, #12]
 800ab10:	490f      	ldr	r1, [pc, #60]	; (800ab50 <UARTEx_SetNbDataToProcess+0x98>)
 800ab12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab14:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab20:	7bfb      	ldrb	r3, [r7, #15]
 800ab22:	7b7a      	ldrb	r2, [r7, #13]
 800ab24:	4909      	ldr	r1, [pc, #36]	; (800ab4c <UARTEx_SetNbDataToProcess+0x94>)
 800ab26:	5c8a      	ldrb	r2, [r1, r2]
 800ab28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab2c:	7b7a      	ldrb	r2, [r7, #13]
 800ab2e:	4908      	ldr	r1, [pc, #32]	; (800ab50 <UARTEx_SetNbDataToProcess+0x98>)
 800ab30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab32:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ab3e:	bf00      	nop
 800ab40:	3714      	adds	r7, #20
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	0800abf4 	.word	0x0800abf4
 800ab50:	0800abfc 	.word	0x0800abfc

0800ab54 <__libc_init_array>:
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	4d0d      	ldr	r5, [pc, #52]	; (800ab8c <__libc_init_array+0x38>)
 800ab58:	4c0d      	ldr	r4, [pc, #52]	; (800ab90 <__libc_init_array+0x3c>)
 800ab5a:	1b64      	subs	r4, r4, r5
 800ab5c:	10a4      	asrs	r4, r4, #2
 800ab5e:	2600      	movs	r6, #0
 800ab60:	42a6      	cmp	r6, r4
 800ab62:	d109      	bne.n	800ab78 <__libc_init_array+0x24>
 800ab64:	4d0b      	ldr	r5, [pc, #44]	; (800ab94 <__libc_init_array+0x40>)
 800ab66:	4c0c      	ldr	r4, [pc, #48]	; (800ab98 <__libc_init_array+0x44>)
 800ab68:	f000 f820 	bl	800abac <_init>
 800ab6c:	1b64      	subs	r4, r4, r5
 800ab6e:	10a4      	asrs	r4, r4, #2
 800ab70:	2600      	movs	r6, #0
 800ab72:	42a6      	cmp	r6, r4
 800ab74:	d105      	bne.n	800ab82 <__libc_init_array+0x2e>
 800ab76:	bd70      	pop	{r4, r5, r6, pc}
 800ab78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab7c:	4798      	blx	r3
 800ab7e:	3601      	adds	r6, #1
 800ab80:	e7ee      	b.n	800ab60 <__libc_init_array+0xc>
 800ab82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab86:	4798      	blx	r3
 800ab88:	3601      	adds	r6, #1
 800ab8a:	e7f2      	b.n	800ab72 <__libc_init_array+0x1e>
 800ab8c:	0800ac0c 	.word	0x0800ac0c
 800ab90:	0800ac0c 	.word	0x0800ac0c
 800ab94:	0800ac0c 	.word	0x0800ac0c
 800ab98:	0800ac10 	.word	0x0800ac10

0800ab9c <memset>:
 800ab9c:	4402      	add	r2, r0
 800ab9e:	4603      	mov	r3, r0
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d100      	bne.n	800aba6 <memset+0xa>
 800aba4:	4770      	bx	lr
 800aba6:	f803 1b01 	strb.w	r1, [r3], #1
 800abaa:	e7f9      	b.n	800aba0 <memset+0x4>

0800abac <_init>:
 800abac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abae:	bf00      	nop
 800abb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abb2:	bc08      	pop	{r3}
 800abb4:	469e      	mov	lr, r3
 800abb6:	4770      	bx	lr

0800abb8 <_fini>:
 800abb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abba:	bf00      	nop
 800abbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abbe:	bc08      	pop	{r3}
 800abc0:	469e      	mov	lr, r3
 800abc2:	4770      	bx	lr
